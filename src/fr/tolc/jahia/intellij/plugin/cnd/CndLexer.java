/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package fr.tolc.jahia.intellij.plugin.cnd;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import fr.tolc.jahia.intellij.plugin.cnd.psi.CndTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Cnd.flex</tt>
 */
class CndLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int NAMESPACE = 2;
  public static final int NAMESPACE_URI = 4;
  public static final int NODETYPE_NAMESPACE = 6;
  public static final int NODETYPE = 8;
  public static final int NODETYPE_DONE = 10;
  public static final int SUPER_TYPE_NAMESPACE = 12;
  public static final int SUPER_TYPE_NAME = 14;
  public static final int AFTER_SUPER_TYPE_NAME = 16;
  public static final int OPTIONS = 18;
  public static final int OPTION_REF = 20;
  public static final int OPTION_VALUE = 22;
  public static final int EXTENDS = 24;
  public static final int EXTEND_NAMESPACE = 26;
  public static final int EXTEND = 28;
  public static final int ITEMTYPE = 30;
  public static final int PROPERTY = 32;
  public static final int PROPERTY_TYPE = 34;
  public static final int PROPERTY_MASK_OPTION_NAME = 36;
  public static final int PROPERTY_MASK = 38;
  public static final int PROPERTY_MASK_OPTION = 40;
  public static final int PROPERTY_DEFAULT = 42;
  public static final int PROPERTY_DEFAULT_VALUE = 44;
  public static final int PROPERTY_ATTRIBUTES = 46;
  public static final int PROPERTY_CONSTRAINT = 48;
  public static final int PROPERTY_CONSTRAINT_NEWLINE = 50;
  public static final int NODE = 52;
  public static final int NODE_NAMESPACE = 54;
  public static final int NODE_NODETYPE = 56;
  public static final int NODE_DEFAULT = 58;
  public static final int NODE_DEFAULT_VALUE_NAMESPACE = 60;
  public static final int NODE_DEFAULT_VALUE = 62;
  public static final int NODE_ATTRIBUTES = 64;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 
    32, 32
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 18448 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1"+
    "\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\25\1\61\1\62\5\21\2\25\1\63"+
    "\7\21\1\25\1\64\20\21\1\25\1\65\1\21\1\66\13\25\1\67\2\25\1\70\21\21\1\71"+
    "\1\72\4\21\1\73\11\21\1\74\1\75\1\76\1\77\1\21\1\100\2\21\1\101\1\102\2\21"+
    "\1\103\1\21\1\104\1\105\5\21\1\106\2\21\123\25\1\107\7\25\1\110\1\111\12\25"+
    "\1\112\15\25\1\113\6\21\1\25\1\114\2\21\11\25\1\115\u0576\21\1\116\u017f\21");

  /* The ZZ_CMAP_Y table has 5056 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\0\1\5\1\6\1\7\1\10\1\11\1\6\1\7\1\10\1\12\1\13"+
    "\3\0\1\14\1\15\1\16\1\17\2\20\1\21\3\20\1\21\7\20\1\22\10\20\1\23\50\20\1"+
    "\24\1\20\1\25\1\26\1\27\1\30\2\26\16\0\1\31\1\32\1\33\1\34\2\20\1\35\11\20"+
    "\1\36\21\20\1\37\1\40\24\20\1\41\3\20\1\21\1\42\5\20\1\43\1\44\4\0\1\45\1"+
    "\46\1\26\3\20\1\47\1\50\1\26\1\51\1\52\1\0\1\53\5\20\1\54\3\0\1\55\1\56\13"+
    "\20\1\57\1\45\1\60\1\61\1\0\1\62\1\26\1\63\1\64\3\20\3\0\1\65\12\20\1\66\1"+
    "\0\1\67\1\26\1\0\1\70\3\20\1\54\1\71\1\72\2\20\1\66\1\73\1\74\1\75\2\26\3"+
    "\20\1\76\1\20\1\50\6\26\2\20\1\31\2\20\1\26\1\77\5\0\1\100\6\20\1\101\2\0"+
    "\1\102\1\20\1\103\1\0\1\41\1\20\1\104\1\105\1\106\2\20\1\107\1\110\1\111\1"+
    "\112\1\113\1\63\1\114\1\103\1\0\1\115\1\116\1\117\1\47\1\106\2\20\1\107\1"+
    "\120\1\121\1\122\1\123\1\124\1\125\1\126\1\0\1\127\1\26\1\117\1\36\1\35\2"+
    "\20\1\107\1\130\1\111\1\45\1\131\1\132\1\26\1\103\1\0\1\42\1\133\1\117\1\105"+
    "\1\106\2\20\1\107\1\130\1\111\1\112\1\123\1\134\1\114\1\103\1\0\1\42\1\26"+
    "\1\135\1\136\1\137\1\140\1\141\1\136\1\20\1\142\1\143\1\144\1\145\1\26\1\126"+
    "\1\0\1\26\1\42\1\146\1\31\1\107\2\20\1\107\1\20\1\147\1\150\1\144\1\151\1"+
    "\50\1\103\1\0\2\26\1\104\1\31\1\107\2\20\1\107\1\152\1\111\1\150\1\144\1\151"+
    "\1\33\1\103\1\0\1\153\1\26\1\100\1\31\1\107\4\20\1\154\1\150\1\155\1\156\1"+
    "\157\1\103\1\0\1\26\1\40\1\117\1\20\1\21\1\40\2\20\1\35\1\160\1\21\1\161\1"+
    "\162\1\0\1\126\1\0\1\163\1\26\1\41\5\20\1\164\1\165\1\166\1\167\1\0\1\170"+
    "\4\26\1\140\1\171\2\20\1\172\1\20\1\164\1\173\1\174\1\51\1\0\1\175\4\26\1"+
    "\132\2\26\1\170\1\0\1\170\1\176\1\177\1\20\1\41\3\20\1\27\1\44\1\0\1\150\1"+
    "\200\1\0\1\44\3\0\1\201\1\202\7\26\5\20\1\54\1\0\1\203\1\0\1\170\1\66\1\204"+
    "\1\205\1\206\1\207\1\20\1\210\1\211\1\0\1\51\4\20\1\36\1\16\5\20\1\171\51"+
    "\20\1\137\1\21\1\137\5\20\1\137\4\20\1\137\1\21\1\137\1\20\1\21\7\20\1\137"+
    "\10\20\1\212\4\26\2\20\2\26\12\20\2\213\1\41\114\20\1\105\2\20\1\41\2\20\1"+
    "\50\11\20\1\136\1\20\1\132\1\20\1\31\1\214\1\26\2\20\1\214\1\26\2\20\1\215"+
    "\1\26\1\20\1\31\1\216\1\26\6\20\1\217\3\0\1\220\1\221\1\0\1\170\3\26\1\222"+
    "\1\0\1\170\13\20\1\132\1\223\4\20\1\224\10\20\1\213\1\26\3\20\1\21\1\0\1\2"+
    "\1\0\1\2\1\126\1\0\3\20\1\213\1\27\1\26\5\20\1\115\3\20\1\25\1\0\1\170\4\26"+
    "\2\20\1\166\1\2\6\20\1\200\1\167\3\0\1\112\1\0\1\170\1\0\1\170\1\157\1\26"+
    "\1\0\1\45\1\225\7\26\1\146\5\20\1\217\1\0\1\146\1\115\1\0\1\170\1\26\1\77"+
    "\1\2\1\26\1\226\3\20\1\102\1\206\1\0\1\70\4\20\1\66\1\0\1\2\1\26\4\20\1\217"+
    "\2\0\1\26\1\0\1\227\1\0\1\70\3\20\1\213\1\20\1\132\5\20\1\230\2\26\1\231\2"+
    "\0\1\232\1\233\1\234\30\20\7\0\1\235\42\20\2\213\4\20\2\213\1\20\1\236\3\20"+
    "\1\213\6\20\1\31\1\174\1\237\1\27\1\240\1\115\1\20\1\27\1\237\1\27\1\26\1"+
    "\77\3\26\1\241\1\26\1\157\1\132\1\26\1\242\1\26\1\150\1\0\1\42\1\157\2\26"+
    "\1\20\1\27\4\20\2\26\1\0\1\201\1\243\1\0\1\225\1\26\1\244\1\40\1\160\1\245"+
    "\1\30\1\246\1\20\1\247\1\250\1\251\2\26\5\20\1\132\116\26\5\20\1\21\5\20\1"+
    "\21\20\20\1\27\1\252\1\253\1\26\4\20\1\36\1\16\7\20\1\157\1\26\1\63\2\20\1"+
    "\21\1\26\10\21\4\0\5\26\1\157\72\26\1\250\3\26\1\41\1\210\1\245\1\27\1\41"+
    "\11\20\1\21\1\254\1\41\12\20\1\171\1\250\5\20\1\41\12\20\1\21\2\26\4\20\6"+
    "\26\172\20\10\26\77\20\1\27\21\20\1\27\10\26\5\20\1\213\41\20\1\27\2\20\1"+
    "\0\1\253\2\26\5\20\1\166\1\255\1\256\3\20\1\66\12\20\1\170\3\26\1\157\1\20"+
    "\1\40\14\20\1\106\6\20\1\40\1\50\4\26\1\250\1\20\1\257\1\260\2\20\1\54\1\261"+
    "\1\26\1\132\6\20\1\115\1\26\1\70\5\20\1\217\1\0\1\51\1\26\1\0\1\170\2\0\1"+
    "\70\1\262\1\0\1\70\2\20\1\66\1\51\2\20\1\166\1\0\1\2\1\26\3\20\1\27\1\100"+
    "\5\20\1\54\1\0\1\225\1\157\1\0\1\170\1\263\1\20\1\0\1\264\5\20\1\102\1\167"+
    "\1\26\1\260\1\265\1\0\1\170\2\20\1\21\1\266\6\20\1\205\1\267\1\224\2\26\1"+
    "\270\1\20\1\54\1\271\1\26\3\272\1\26\2\21\5\20\1\171\1\20\1\25\16\20\1\54"+
    "\1\273\1\0\1\170\64\20\1\115\1\26\2\20\1\21\1\274\5\20\1\115\40\26\55\20\1"+
    "\213\15\20\1\25\4\26\1\21\1\26\1\274\1\275\1\20\1\107\1\21\1\174\1\276\15"+
    "\20\1\25\3\26\1\274\54\20\1\213\2\26\10\20\1\40\6\20\5\26\1\20\1\27\2\0\2"+
    "\26\2\0\1\141\2\26\1\250\3\26\1\42\1\31\20\20\1\277\1\242\1\26\1\0\1\170\1"+
    "\41\2\20\1\47\1\41\2\20\1\50\1\300\12\20\1\21\3\40\1\301\1\302\2\26\1\303"+
    "\1\20\1\152\2\20\1\21\2\20\1\304\1\20\1\213\1\20\1\213\4\26\17\20\1\50\10"+
    "\26\6\20\1\27\20\26\1\305\20\26\3\20\1\27\6\20\1\132\1\26\1\225\3\26\4\20"+
    "\1\26\1\250\3\20\1\50\4\20\1\66\1\306\3\20\1\213\4\20\1\115\1\20\1\245\5\26"+
    "\23\20\1\213\1\0\1\170\4\20\1\115\4\20\1\115\5\20\1\26\6\20\1\115\23\26\46"+
    "\20\1\21\1\26\2\20\1\213\1\26\1\20\23\26\1\213\1\107\4\20\1\36\1\307\2\20"+
    "\1\213\1\26\2\20\1\21\1\26\3\20\1\21\10\26\2\20\1\310\1\26\2\20\1\213\1\26"+
    "\3\20\1\25\10\26\7\20\1\300\10\26\1\311\1\255\1\152\1\41\2\20\1\213\1\122"+
    "\4\26\3\20\1\27\3\20\1\27\4\26\1\20\1\41\2\20\1\312\3\26\6\20\1\213\1\26\2"+
    "\20\1\213\1\26\2\20\1\50\1\26\2\20\1\25\15\26\11\20\1\132\6\26\6\20\1\50\1"+
    "\26\6\20\1\50\1\26\4\20\1\217\1\26\1\0\1\170\50\26\5\20\1\313\1\25\11\26\3"+
    "\20\1\27\1\157\1\26\2\20\1\66\1\0\1\225\13\26\2\20\1\27\3\26\2\20\1\21\1\26"+
    "\1\226\6\20\1\0\1\167\3\26\1\126\1\0\1\26\1\63\1\226\5\20\1\0\1\314\1\26\1"+
    "\305\3\20\1\132\1\0\1\170\1\226\3\20\1\166\1\0\1\150\1\0\1\315\1\26\4\20\1"+
    "\316\1\26\1\226\5\20\1\54\1\0\1\317\1\320\1\0\1\321\4\26\2\20\1\35\2\20\1"+
    "\217\1\0\1\202\10\26\1\21\1\246\1\20\1\36\1\20\1\132\5\20\1\166\1\0\1\306"+
    "\1\0\1\170\1\322\1\105\1\106\2\20\1\107\1\130\1\323\1\112\1\123\1\145\1\250"+
    "\1\103\2\201\21\26\6\20\1\200\1\0\1\203\1\50\1\0\1\324\1\25\3\26\6\20\2\0"+
    "\1\325\1\26\1\0\1\170\24\26\5\20\1\166\1\51\1\0\1\225\2\26\1\265\4\26\6\20"+
    "\2\0\1\326\1\26\1\0\1\170\4\26\5\20\1\54\1\0\1\132\1\0\1\170\6\26\3\20\1\212"+
    "\1\0\1\2\1\0\1\170\30\26\5\20\1\217\1\0\1\306\14\26\10\20\1\0\1\170\1\26\1"+
    "\157\1\21\1\327\1\330\3\20\1\45\1\331\1\332\1\26\1\0\1\170\10\26\1\20\1\40"+
    "\4\20\1\102\1\333\1\334\3\26\1\102\1\226\4\20\1\54\1\335\1\63\1\26\1\102\1"+
    "\100\5\20\1\210\1\0\1\336\4\26\7\20\1\132\40\26\1\20\1\107\3\20\1\166\1\167"+
    "\1\0\1\132\1\26\1\0\1\170\2\26\1\40\3\20\1\333\2\0\1\44\1\167\11\26\1\21\1"+
    "\35\4\20\1\337\1\340\1\211\1\26\1\0\1\170\1\36\1\107\3\20\1\341\1\235\1\132"+
    "\1\0\1\170\46\26\2\20\1\342\27\26\1\132\4\26\1\250\1\132\3\26\63\20\1\25\14"+
    "\26\15\20\1\21\2\26\30\20\1\115\27\26\5\20\1\21\1\0\1\225\70\26\10\20\1\21"+
    "\67\26\7\20\1\132\3\20\1\21\1\0\1\170\14\26\3\20\1\213\1\201\1\26\6\20\1\167"+
    "\1\26\1\115\1\26\1\0\1\170\1\274\2\20\1\250\2\20\26\26\10\20\20\26\11\20\1"+
    "\343\1\102\6\0\1\63\1\226\1\20\10\26\1\344\1\26\1\170\1\26\77\20\1\26\32\20"+
    "\1\213\5\26\1\20\1\132\36\26\43\20\1\21\6\26\1\50\1\26\1\345\1\26\61\20\1"+
    "\115\40\26\15\20\1\50\1\20\1\27\1\20\1\132\1\20\1\346\1\2\127\26\1\134\1\347"+
    "\2\0\1\350\1\2\3\26\1\351\22\26\1\352\67\26\12\20\1\31\10\20\1\31\1\353\1"+
    "\354\1\20\1\355\1\152\7\20\1\36\1\230\2\31\3\20\1\356\1\174\1\40\1\107\51"+
    "\20\1\213\3\20\1\107\2\20\1\171\3\20\1\171\2\20\1\31\3\20\1\31\2\20\1\21\3"+
    "\20\1\21\3\20\1\107\3\20\1\107\2\20\1\171\1\357\14\0\1\167\1\77\5\0\1\201"+
    "\1\305\1\26\1\261\2\26\1\77\1\44\1\0\52\26\1\167\2\0\1\360\1\361\1\306\32"+
    "\26\5\20\1\27\1\203\1\213\1\0\1\362\56\26\5\20\1\217\1\0\1\363\40\26\30\20"+
    "\1\27\1\26\1\167\5\26\10\20\1\217\1\364\1\0\1\170\52\26\1\132\51\26\1\152"+
    "\3\20\1\365\1\41\1\171\1\366\1\244\1\367\1\365\1\236\1\365\2\171\1\125\1\20"+
    "\1\35\1\20\1\115\1\370\1\35\1\20\1\115\146\26\1\0\1\170\33\20\1\213\4\26\106"+
    "\20\1\27\1\26\33\20\1\213\120\20\1\25\1\26\146\20\1\132\3\26\3\20\1\213\74"+
    "\26\51\20\1\50\26\26\1\124\3\26\14\0\20\26\36\0\2\26");

  /* The ZZ_CMAP_A table has 1992 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\7\1\3\1\1\1\45\1\3\1\2\6\7\4\0\1\13\1\10\1\44\1\0\1\6\2\0\1\11\1\40\1"+
    "\41\1\5\1\42\1\21\1\37\1\32\1\4\2\7\1\17\1\0\1\14\1\12\1\15\2\0\1\26\2\6\1"+
    "\35\1\31\3\6\1\24\3\6\1\25\1\34\1\6\1\22\1\6\1\23\1\36\1\30\3\6\1\33\1\27"+
    "\1\6\1\16\1\43\1\20\1\0\1\6\1\33\1\27\1\6\4\0\6\7\1\46\2\7\2\0\4\6\4\0\1\6"+
    "\2\0\1\7\7\0\1\6\4\0\1\6\5\0\17\6\1\0\2\24\15\6\1\36\2\6\4\0\4\6\16\0\5\6"+
    "\7\0\1\6\1\0\1\6\1\0\5\6\1\0\2\6\2\0\4\6\1\0\1\6\6\0\1\6\1\0\3\6\1\0\1\6\1"+
    "\0\4\6\1\0\13\6\1\0\3\6\1\0\5\7\2\0\6\6\1\0\7\6\1\0\1\6\6\0\1\6\6\0\1\6\1"+
    "\0\15\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0\1\7\3\6\4\0\4\6\5\0\6\7\5\0\1\6\4\0\3"+
    "\7\1\0\1\7\3\0\3\6\7\7\4\0\2\6\1\7\13\6\1\0\1\6\7\7\2\6\2\7\1\0\4\7\2\6\2"+
    "\7\3\6\2\0\1\6\7\0\1\7\1\6\1\7\6\6\3\7\2\0\11\6\3\7\1\6\6\0\2\7\6\6\4\7\2"+
    "\6\4\0\1\6\2\0\1\7\2\6\2\7\1\6\11\7\1\6\3\7\1\6\5\7\2\0\1\6\3\7\7\0\11\7\6"+
    "\6\3\7\1\6\2\7\1\6\7\7\2\6\2\7\2\0\2\7\1\6\3\7\1\0\10\6\2\0\2\6\2\0\6\6\1"+
    "\0\7\6\1\0\1\6\3\0\4\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7\1\6\5\0\2\6\1\0\5\6"+
    "\7\0\2\6\1\0\1\7\2\0\3\7\1\0\4\6\1\0\2\6\1\0\2\6\1\0\2\6\2\0\1\7\1\0\5\7\4"+
    "\0\2\7\2\0\3\7\3\0\1\7\7\0\4\6\1\0\1\6\7\0\4\7\3\6\1\7\2\0\1\6\1\0\2\6\1\0"+
    "\3\6\2\7\1\0\3\7\2\0\1\6\10\0\1\6\6\7\5\0\3\7\2\0\1\7\1\6\1\0\6\6\3\0\3\6"+
    "\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\2\6\4\0\5\7\3\0\3\7\1\0\4\7\2"+
    "\0\1\6\6\0\6\7\5\6\3\0\1\6\7\7\1\0\2\7\5\0\2\7\1\0\4\6\1\0\3\6\1\0\2\6\5\0"+
    "\3\6\2\7\1\6\3\7\1\0\4\7\1\6\5\0\3\6\1\7\7\0\5\6\1\0\1\6\4\0\1\7\4\0\6\7\1"+
    "\0\1\7\3\0\2\7\4\0\1\6\1\7\2\6\7\7\4\0\10\6\10\7\1\0\2\7\6\0\3\6\1\0\10\6"+
    "\1\0\1\6\1\0\1\6\5\7\1\6\2\0\5\6\1\0\1\6\1\0\2\7\2\0\4\6\5\0\1\7\1\0\1\7\1"+
    "\0\1\7\4\0\2\7\5\6\10\7\11\0\1\7\1\0\7\7\1\6\2\7\4\6\3\7\1\6\3\7\2\6\7\7\3"+
    "\6\4\7\5\6\14\7\1\6\1\7\3\6\2\0\3\7\6\6\2\0\2\6\3\7\3\0\2\6\2\7\4\0\1\6\1"+
    "\0\2\7\4\0\4\6\10\7\3\0\1\6\3\0\2\6\1\7\5\0\4\7\1\0\5\6\2\7\2\6\1\7\1\6\5"+
    "\0\1\7\7\0\3\7\5\6\2\7\3\0\6\6\2\0\3\6\3\7\1\0\5\7\4\6\1\7\6\6\1\7\2\6\3\7"+
    "\1\6\5\0\2\7\1\0\5\7\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6\2\0\3\6\1\0\6\6\2\0\2"+
    "\6\2\45\5\7\5\0\1\6\4\0\1\7\3\0\3\7\2\0\1\6\4\0\1\6\1\0\5\6\2\0\1\6\1\0\4"+
    "\6\1\0\3\6\2\0\4\6\5\0\5\6\4\0\1\6\4\0\4\6\3\7\2\6\5\0\2\7\2\0\3\6\4\0\12"+
    "\7\1\0\3\6\1\7\3\6\1\7\4\6\1\7\4\6\4\0\1\7\6\0\1\6\1\0\2\6\1\7\5\6\1\7\2\6"+
    "\2\7\5\6\1\0\4\6\2\7\4\0\1\6\3\7\2\6\1\7\5\6\2\7\3\0\3\6\4\0\3\6\2\7\2\0\6"+
    "\6\1\0\3\7\1\0\2\7\5\0\5\6\5\0\1\6\1\7\3\6\1\0\2\6\1\0\7\6\2\0\1\7\6\0\2\6"+
    "\2\0\3\6\3\0\2\6\3\0\2\6\2\0\3\7\4\0\3\6\1\0\2\6\1\0\1\6\5\0\1\7\2\0\3\7\5"+
    "\0\1\6\3\0\1\6\2\0\4\6\1\0\2\6\2\0\1\6\3\7\1\0\2\7\1\0\5\6\2\7\1\0\2\6\1\0"+
    "\2\7\3\0\3\7\2\0\1\7\6\0\1\6\2\7\4\6\1\7\2\0\1\6\1\0\1\7\4\6\4\0\4\7\1\0\4"+
    "\7\1\6\1\0\1\6\3\0\4\7\1\0\5\6\1\0\2\7\1\6\4\7\4\0\1\7\1\6\4\7\2\6\1\0\1\6"+
    "\1\7\3\0\1\6\4\0\1\6\2\0\10\6\1\0\2\6\1\0\1\7\2\0\4\7\1\6\1\7\1\6\2\7\6\0"+
    "\7\7\1\6\1\0\1\6\1\7\3\0\2\7\1\6\4\7\1\0\2\7\3\0\1\6\2\0\1\6\6\7\3\0\1\7\1"+
    "\0\2\7\1\0\1\7\2\6\5\7\1\0\3\6\4\7\1\0\3\6\4\0\1\7\2\6\1\0\1\6\1\7\7\0\6\6"+
    "\3\0\2\7\1\0\2\7\3\0\6\7\2\0\3\7\2\0\4\7\4\0\3\7\5\0\1\6\2\0\2\6\2\0\4\6\1"+
    "\0\4\6\1\0\1\6\1\0\5\6\1\0\4\6\1\0\4\6\2\0\3\7\2\0\7\7\1\0\2\7\1\0\4\7\4\0"+
    "\1\6\1\0\2\7\5\0\1\6\3\7\1\6\5\0\2\6\1\0\1\6\2\0\1\6\1\0\1\6\1\0\1\6\5\0\1"+
    "\6\1\0\1\6\1\0\3\6\1\0\3\6\1\0\3\6");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\41\0\1\1\2\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\4\4\1\10\1\11\1\1\1\12\1\13\1\14"+
    "\2\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\2\26\1\27\1\30\1\31\1\32\1\31\1\33"+
    "\1\34\1\35\1\36\1\37\3\40\2\41\1\42\1\43"+
    "\1\44\1\45\3\46\1\47\1\50\3\51\1\1\1\52"+
    "\1\53\2\2\1\3\2\54\1\55\1\56\2\57\2\1"+
    "\1\57\1\1\2\2\1\3\2\60\2\61\2\1\2\62"+
    "\1\63\1\64\1\65\1\66\2\2\1\3\2\67\1\70"+
    "\1\71\1\72\2\2\2\73\1\74\1\0\4\4\1\15"+
    "\1\31\1\40\1\46\1\51\3\0\2\75\1\76\5\0"+
    "\3\57\2\0\1\57\3\0\1\57\4\0\1\57\2\0"+
    "\2\77\4\0\2\61\1\0\1\61\3\0\1\61\2\0"+
    "\2\100\10\0\4\4\1\31\1\51\3\0\2\54\2\0"+
    "\1\57\2\0\1\57\1\0\2\74\3\57\4\0\1\57"+
    "\1\0\1\57\1\0\1\57\3\0\2\57\5\0\2\60"+
    "\2\0\1\74\1\61\2\0\2\61\5\0\2\67\1\0"+
    "\2\73\1\74\2\4\1\101\1\4\1\31\1\0\2\75"+
    "\1\54\1\0\1\57\3\0\3\74\1\57\2\74\1\57"+
    "\1\74\1\0\1\57\1\0\1\57\4\0\1\57\1\0"+
    "\1\57\2\0\2\57\6\0\2\77\1\60\2\74\7\0"+
    "\2\100\1\67\1\73\2\4\1\31\1\75\2\0\2\57"+
    "\1\74\1\57\3\74\6\0\1\57\5\0\1\77\2\0"+
    "\1\100\2\4\1\31\2\57\2\74\3\57\2\0\1\4"+
    "\1\102\1\31\2\57\1\4\1\31\1\4\1\31\1\4"+
    "\1\31\2\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[375];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\234\0\303\0\352\0\u0111"+
    "\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4\0\u01fb\0\u0222\0\u0249"+
    "\0\u0270\0\u0297\0\u02be\0\u02e5\0\u030c\0\u0333\0\u035a\0\u0381"+
    "\0\u03a8\0\u03cf\0\u03f6\0\u041d\0\u0444\0\u046b\0\u0492\0\u04b9"+
    "\0\u04e0\0\u0507\0\u0507\0\u052e\0\u0555\0\u057c\0\u05a3\0\u0507"+
    "\0\u0507\0\u0507\0\u05ca\0\u05f1\0\u0618\0\u063f\0\u0507\0\u0507"+
    "\0\u0666\0\u068d\0\u0507\0\u0507\0\u06b4\0\u06db\0\u0507\0\u0507"+
    "\0\u0702\0\u0729\0\u0507\0\u0507\0\u0507\0\u0507\0\u0507\0\u0750"+
    "\0\u0777\0\u0507\0\u079e\0\u0507\0\u07c5\0\u07ec\0\u0813\0\u0507"+
    "\0\u083a\0\u0507\0\u0861\0\u0888\0\u08af\0\u0507\0\u08d6\0\u0507"+
    "\0\u08fd\0\u0507\0\u0507\0\u0924\0\u094b\0\u0972\0\u0999\0\u0507"+
    "\0\u09c0\0\u09e7\0\u0a0e\0\u0a35\0\u0507\0\u0507\0\u0a5c\0\u0a83"+
    "\0\u0aaa\0\u0ad1\0\u0af8\0\u0507\0\u0507\0\u0b1f\0\u0b46\0\u0b6d"+
    "\0\u0b94\0\u0bbb\0\u0be2\0\u0c09\0\u0c30\0\u0c57\0\u0c7e\0\u0ca5"+
    "\0\u0ccc\0\u0cf3\0\u0d1a\0\u0d41\0\u0507\0\u0d68\0\u0507\0\u0d8f"+
    "\0\u0507\0\u0507\0\u0db6\0\u0ddd\0\u0e04\0\u0e2b\0\u0e52\0\u0507"+
    "\0\u0e79\0\u0ea0\0\u0ec7\0\u0eee\0\u0f15\0\u0f3c\0\u0f63\0\u0f8a"+
    "\0\u0fb1\0\u0fd8\0\u0fff\0\u1026\0\u104d\0\u1074\0\u109b\0\u10c2"+
    "\0\u10e9\0\u1110\0\u0a5c\0\u1137\0\u115e\0\u1185\0\u0507\0\u11ac"+
    "\0\u11d3\0\u11fa\0\u1221\0\u0b94\0\u1248\0\u126f\0\u1296\0\u0b6d"+
    "\0\u12bd\0\u12e4\0\u130b\0\u1332\0\u1359\0\u1380\0\u0be2\0\u13a7"+
    "\0\u13ce\0\u13f5\0\u141c\0\u0c09\0\u1443\0\u146a\0\u1491\0\u14b8"+
    "\0\u14df\0\u1506\0\u152d\0\u1554\0\u157b\0\u0d1a\0\u15a2\0\u15c9"+
    "\0\u0d41\0\u15f0\0\u1617\0\u0db6\0\u163e\0\u1665\0\u168c\0\u16b3"+
    "\0\u16da\0\u1701\0\u0ec7\0\u1728\0\u174f\0\u1776\0\u179d\0\u17c4"+
    "\0\u17eb\0\u1812\0\u1839\0\u1860\0\u0507\0\u1887\0\u18ae\0\u18d5"+
    "\0\u18fc\0\u11fa\0\u1923\0\u1380\0\u194a\0\u1971\0\u1998\0\u19bf"+
    "\0\u19e6\0\u1a0d\0\u1a34\0\u1a5b\0\u1a82\0\u1aa9\0\u1ad0\0\u1aa9"+
    "\0\u1af7\0\u1b1e\0\u1b45\0\u1b6c\0\u1b93\0\u1bba\0\u1be1\0\u1c08"+
    "\0\u1c2f\0\u1c56\0\u1c7d\0\u1ca4\0\u1be1\0\u1ccb\0\u1cf2\0\u1d19"+
    "\0\u1d40\0\u1d67\0\u1506\0\u1d8e\0\u1554\0\u1db5\0\u1ddc\0\u15a2"+
    "\0\u1e03\0\u1e2a\0\u1e51\0\u1617\0\u1e78\0\u1e9f\0\u1ec6\0\u1eed"+
    "\0\u1f14\0\u1701\0\u1f3b\0\u1f62\0\u1776\0\u0507\0\u1f89\0\u1fb0"+
    "\0\u05a3\0\u1fd7\0\u1ffe\0\u2025\0\u204c\0\u18ae\0\u0507\0\u2073"+
    "\0\u19e6\0\u209a\0\u20c1\0\u19bf\0\u20e8\0\u210f\0\u2136\0\u215d"+
    "\0\u2184\0\u21ab\0\u21d2\0\u21f9\0\u2220\0\u2247\0\u226e\0\u1b1e"+
    "\0\u2295\0\u22bc\0\u2247\0\u22e3\0\u230a\0\u2331\0\u1c08\0\u2358"+
    "\0\u237f\0\u23a6\0\u23cd\0\u1c7d\0\u23f4\0\u230a\0\u241b\0\u2442"+
    "\0\u2469\0\u2490\0\u1d19\0\u0507\0\u24b7\0\u1ddc\0\u24de\0\u1e2a"+
    "\0\u2505\0\u1e51\0\u252c\0\u2553\0\u257a\0\u25a1\0\u1ec6\0\u0507"+
    "\0\u0507\0\u25c8\0\u25ef\0\u2616\0\u0507\0\u263d\0\u2664\0\u268b"+
    "\0\u2136\0\u26b2\0\u21f9\0\u26d9\0\u2700\0\u21d2\0\u2727\0\u274e"+
    "\0\u2775\0\u279c\0\u27c3\0\u27ea\0\u2811\0\u23a6\0\u2838\0\u23cd"+
    "\0\u285f\0\u2886\0\u0507\0\u28ad\0\u28d4\0\u0507\0\u28fb\0\u2922"+
    "\0\u2949\0\u0507\0\u209a\0\u2970\0\u2997\0\u12bd\0\u13a7\0\u2358"+
    "\0\u2811\0\u29be\0\u29e5\0\u05a3\0\u2a0c\0\u0f63\0\u26d9\0\u2a33"+
    "\0\u2a5a\0\u2a81\0\u2aa8\0\u2acf\0\u2af6\0\u05a3\0\u079e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[375];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\42\1\43\1\44\1\45\1\46\1\42\1\47\1\42"+
    "\1\50\2\42\1\45\1\51\1\42\1\52\3\42\1\53"+
    "\1\47\1\54\3\47\1\55\1\56\1\42\4\47\1\57"+
    "\2\42\1\60\2\42\2\0\1\42\1\43\1\44\1\45"+
    "\1\61\1\42\1\62\2\42\1\63\1\64\1\45\6\42"+
    "\10\62\1\42\4\62\6\42\2\0\4\65\1\66\4\65"+
    "\1\67\3\65\1\70\31\65\1\42\1\43\1\44\1\45"+
    "\1\61\1\42\1\71\4\42\1\45\6\42\10\71\1\42"+
    "\4\71\6\42\2\0\1\42\1\43\1\44\1\45\1\61"+
    "\1\42\1\72\4\42\1\45\3\42\1\73\1\74\1\42"+
    "\10\72\1\42\4\72\6\42\2\0\1\42\1\43\1\44"+
    "\1\45\1\61\1\42\1\47\4\42\1\45\1\42\1\75"+
    "\4\42\10\47\1\42\4\47\6\42\2\0\1\42\1\43"+
    "\1\44\1\45\1\61\1\42\1\62\4\42\1\45\3\42"+
    "\1\76\2\42\10\62\1\42\4\62\6\42\2\0\1\42"+
    "\1\77\1\100\1\45\1\61\1\42\1\101\4\42\1\45"+
    "\6\42\10\101\1\42\4\101\6\42\2\0\1\42\1\43"+
    "\1\44\1\45\1\61\1\42\1\47\1\42\1\50\2\42"+
    "\1\45\5\42\1\102\1\53\7\47\1\42\4\47\6\42"+
    "\2\0\1\42\1\43\1\44\1\45\1\61\1\42\1\103"+
    "\1\42\1\50\1\42\1\104\1\45\6\42\1\105\7\103"+
    "\1\42\4\103\6\42\2\0\1\42\1\43\1\44\1\45"+
    "\1\61\1\42\1\106\4\42\1\45\6\42\10\106\1\42"+
    "\4\106\6\42\2\0\1\42\1\43\1\44\1\45\1\61"+
    "\1\42\2\107\3\42\1\45\6\42\10\107\1\42\4\107"+
    "\6\42\1\0\1\107\1\42\1\43\1\44\1\45\1\61"+
    "\5\42\1\110\1\45\31\42\2\0\1\42\1\43\1\44"+
    "\1\45\1\61\1\42\1\111\4\42\1\45\6\42\10\111"+
    "\1\42\4\111\6\42\2\0\1\42\1\43\1\44\1\45"+
    "\1\61\1\42\1\72\4\42\1\45\3\42\1\73\1\42"+
    "\1\112\10\72\1\42\4\72\6\42\2\0\1\113\1\43"+
    "\1\44\1\114\1\115\5\113\1\64\1\45\33\113\1\42"+
    "\1\43\1\44\1\45\1\61\1\116\1\117\4\42\1\45"+
    "\6\42\10\117\1\42\4\117\1\42\1\120\4\42\2\0"+
    "\1\42\1\43\1\44\1\45\1\61\1\42\1\121\4\42"+
    "\1\45\5\42\1\122\10\121\1\42\4\121\2\42\1\123"+
    "\3\42\2\0\1\124\1\43\1\44\1\125\1\126\4\124"+
    "\2\42\1\45\4\124\2\42\17\124\1\42\5\124\1\42"+
    "\1\43\1\44\1\45\1\61\1\42\1\127\4\42\1\45"+
    "\2\42\1\130\3\42\10\127\1\42\4\127\2\42\1\123"+
    "\3\42\2\0\1\131\1\43\1\44\1\132\1\133\4\131"+
    "\1\134\1\64\1\45\4\131\1\135\1\136\17\131\1\123"+
    "\5\131\1\42\1\137\1\140\1\141\1\61\1\142\1\143"+
    "\1\42\1\142\1\42\1\144\1\141\1\145\5\42\10\143"+
    "\1\42\4\143\6\42\2\0\1\146\1\43\1\44\1\45"+
    "\1\147\4\146\1\150\1\146\1\45\23\146\1\151\1\152"+
    "\1\146\1\151\1\146\1\153\2\146\1\42\1\154\1\155"+
    "\1\156\1\61\1\157\1\160\1\42\1\157\2\42\1\156"+
    "\1\145\5\42\10\160\1\42\4\160\6\42\2\0\1\161"+
    "\1\43\1\44\1\45\1\162\4\161\1\163\1\161\1\45"+
    "\23\161\1\42\2\161\1\42\1\161\1\164\2\161\1\42"+
    "\1\43\1\44\1\45\1\61\6\42\1\45\31\42\2\0"+
    "\1\42\1\43\1\44\1\45\1\61\1\165\1\166\4\42"+
    "\1\45\6\42\10\166\1\42\4\166\1\42\1\167\4\42"+
    "\2\0\1\42\1\43\1\44\1\45\1\61\1\42\1\170"+
    "\4\42\1\45\6\42\10\170\1\42\4\170\6\42\2\0"+
    "\1\42\1\43\1\44\1\45\1\61\1\42\1\72\4\42"+
    "\1\45\3\42\1\73\1\42\1\171\10\72\1\42\4\72"+
    "\2\42\1\172\3\42\2\0\1\42\1\173\1\174\1\175"+
    "\1\61\1\176\1\177\1\42\1\176\1\42\1\200\1\175"+
    "\6\42\10\177\1\42\4\177\6\42\2\0\1\42\1\43"+
    "\1\44\1\45\1\61\1\42\1\201\4\42\1\45\6\42"+
    "\10\201\1\42\4\201\6\42\2\0\1\42\1\43\1\44"+
    "\1\45\1\61\1\42\1\202\4\42\1\45\3\42\1\73"+
    "\2\42\10\202\1\42\4\202\6\42\2\0\1\42\1\203"+
    "\1\204\1\45\1\61\1\205\1\206\1\42\1\205\2\42"+
    "\1\45\6\42\10\206\1\42\4\206\6\42\52\0\1\43"+
    "\50\0\1\45\7\0\1\45\37\0\1\207\1\210\47\0"+
    "\1\47\13\0\10\47\1\0\4\47\16\0\1\47\13\0"+
    "\1\47\1\211\6\47\1\0\4\47\16\0\1\47\13\0"+
    "\6\47\1\212\1\47\1\0\4\47\16\0\1\47\13\0"+
    "\5\47\1\213\2\47\1\0\4\47\16\0\1\47\13\0"+
    "\10\47\1\0\1\214\3\47\14\0\1\207\50\0\2\62"+
    "\12\0\10\62\1\0\4\62\7\0\1\62\11\65\1\0"+
    "\3\65\1\0\35\65\1\215\4\65\1\0\3\65\1\0"+
    "\31\65\6\0\2\71\12\0\10\71\1\0\4\71\7\0"+
    "\1\71\6\0\2\72\12\0\10\72\1\0\4\72\7\0"+
    "\1\72\1\0\1\77\53\0\2\101\12\0\10\101\1\0"+
    "\4\101\7\0\1\101\6\0\1\103\13\0\10\103\1\0"+
    "\4\103\16\0\1\103\13\0\1\103\1\216\6\103\1\0"+
    "\4\103\16\0\2\106\7\0\1\106\2\0\15\106\7\0"+
    "\1\106\6\0\2\107\12\0\10\107\1\0\4\107\7\0"+
    "\1\107\6\0\2\111\12\0\10\111\1\0\4\111\7\0"+
    "\1\111\1\113\2\0\7\113\2\0\34\113\2\0\1\114"+
    "\6\113\1\0\1\45\34\113\2\0\1\113\1\217\5\113"+
    "\2\0\33\113\6\0\2\117\7\0\1\117\2\0\15\117"+
    "\7\0\1\117\6\0\1\121\13\0\10\121\1\0\4\121"+
    "\10\0\1\124\2\0\6\124\3\0\4\124\2\0\17\124"+
    "\1\0\6\124\2\0\1\125\5\124\2\0\1\45\4\124"+
    "\2\0\17\124\1\0\6\124\2\0\1\124\1\220\4\124"+
    "\3\0\4\124\2\0\17\124\1\0\5\124\6\0\1\127"+
    "\13\0\10\127\1\0\4\127\10\0\1\131\2\0\6\131"+
    "\3\0\4\131\2\0\17\131\1\0\6\131\2\0\1\132"+
    "\5\131\2\0\1\45\4\131\2\0\17\131\1\0\6\131"+
    "\2\0\1\131\1\221\4\131\3\0\4\131\2\0\17\131"+
    "\1\0\5\131\1\222\2\0\6\222\1\0\6\222\1\0"+
    "\26\222\1\0\2\223\1\224\1\0\1\225\1\226\1\0"+
    "\1\225\1\0\1\227\1\224\1\227\5\0\10\226\1\0"+
    "\4\226\11\0\1\137\1\223\1\224\1\0\1\225\1\226"+
    "\1\0\1\225\1\0\1\227\1\224\1\227\5\0\10\226"+
    "\1\0\4\226\11\0\2\230\1\141\6\0\1\227\1\141"+
    "\1\227\35\0\1\231\6\0\1\232\1\231\36\0\1\231"+
    "\2\0\2\143\2\0\1\232\1\231\6\0\10\143\1\0"+
    "\4\143\7\0\1\143\1\146\2\0\1\233\5\146\1\234"+
    "\1\146\1\233\5\146\1\235\15\146\1\234\1\236\1\146"+
    "\1\234\1\146\1\234\3\146\2\0\1\233\1\237\4\146"+
    "\1\234\1\146\1\233\5\146\1\235\15\146\1\234\1\236"+
    "\1\146\1\234\1\146\1\234\2\146\1\240\2\0\1\241"+
    "\5\240\1\242\1\240\1\241\24\240\1\243\2\240\1\244"+
    "\3\240\1\234\3\0\7\234\1\0\24\234\1\245\6\234"+
    "\1\152\2\0\1\233\5\152\1\0\1\152\1\233\5\152"+
    "\1\246\15\152\1\0\2\152\1\0\1\152\1\0\2\152"+
    "\1\247\2\0\1\250\7\247\1\250\24\247\1\251\2\247"+
    "\1\252\1\253\2\247\1\0\2\254\1\255\1\0\1\256"+
    "\1\257\1\0\1\256\2\0\1\255\1\227\5\0\10\257"+
    "\1\0\4\257\11\0\1\154\1\254\1\255\1\0\1\256"+
    "\1\257\1\0\1\256\2\0\1\255\1\227\5\0\10\257"+
    "\1\0\4\257\11\0\2\260\1\156\7\0\1\156\1\227"+
    "\35\0\1\261\6\0\1\262\1\261\36\0\1\261\2\0"+
    "\2\160\2\0\1\262\1\261\6\0\10\160\1\0\4\160"+
    "\7\0\1\160\1\161\2\0\1\263\5\161\1\0\1\161"+
    "\1\263\5\161\1\264\15\161\1\0\2\161\1\0\1\161"+
    "\1\0\3\161\2\0\1\263\1\265\4\161\1\0\1\161"+
    "\1\263\5\161\1\264\15\161\1\0\2\161\1\0\1\161"+
    "\1\0\2\161\1\266\2\0\6\266\1\267\31\266\1\270"+
    "\3\266\1\271\2\0\40\271\1\272\1\273\2\271\6\0"+
    "\2\166\7\0\1\166\2\0\10\166\1\0\4\166\7\0"+
    "\1\166\6\0\2\170\12\0\10\170\1\0\4\170\7\0"+
    "\1\170\1\0\2\274\1\275\1\0\1\276\1\277\1\0"+
    "\1\276\1\0\1\227\1\275\6\0\10\277\1\0\4\277"+
    "\11\0\1\173\1\274\1\275\1\0\1\276\1\277\1\0"+
    "\1\276\1\0\1\227\1\275\6\0\10\277\1\0\4\277"+
    "\11\0\2\300\1\175\6\0\1\227\1\175\36\0\1\301"+
    "\6\0\1\302\1\301\36\0\1\301\2\0\2\177\2\0"+
    "\1\302\1\301\6\0\10\177\1\0\4\177\7\0\1\177"+
    "\6\0\2\201\12\0\10\201\1\0\4\201\7\0\1\201"+
    "\6\0\2\202\12\0\10\202\1\0\4\202\7\0\1\202"+
    "\1\0\2\303\1\304\1\0\1\256\1\257\1\0\1\256"+
    "\2\0\1\304\6\0\10\257\1\0\4\257\11\0\1\203"+
    "\1\303\1\304\1\0\1\256\1\257\1\0\1\256\2\0"+
    "\1\304\6\0\10\257\1\0\4\257\13\0\1\305\6\0"+
    "\1\306\1\305\36\0\1\305\2\0\2\206\2\0\1\306"+
    "\1\305\6\0\10\206\1\0\4\206\7\0\1\206\1\207"+
    "\2\0\44\207\5\210\1\307\41\210\6\0\1\47\13\0"+
    "\2\47\1\310\5\47\1\0\4\47\16\0\1\47\13\0"+
    "\7\47\1\311\1\0\4\47\16\0\1\47\13\0\1\312"+
    "\7\47\1\0\4\47\16\0\1\47\13\0\6\47\1\313"+
    "\1\47\1\0\4\47\10\0\1\215\2\65\6\215\1\207"+
    "\3\215\1\207\31\215\6\0\1\103\13\0\2\103\1\314"+
    "\5\103\1\0\4\103\10\0\1\217\2\0\7\217\2\207"+
    "\33\217\1\220\2\0\6\220\3\207\4\220\2\207\17\220"+
    "\1\207\5\220\1\221\2\0\6\221\3\207\4\221\2\207"+
    "\17\221\1\207\5\221\1\222\2\0\6\222\1\315\6\222"+
    "\1\0\26\222\1\0\2\230\1\224\1\0\1\225\1\226"+
    "\1\0\1\225\1\0\1\227\1\224\1\227\5\0\10\226"+
    "\1\0\4\226\13\0\1\316\6\0\1\317\1\316\36\0"+
    "\1\316\2\0\2\226\2\0\1\317\1\316\6\0\10\226"+
    "\1\0\4\226\7\0\1\226\1\0\3\230\6\0\1\227"+
    "\1\230\1\227\35\0\1\231\5\0\1\320\1\232\1\231"+
    "\33\0\1\321\2\0\1\322\7\321\1\232\33\321\3\0"+
    "\1\233\7\0\1\233\5\0\1\323\25\0\1\146\2\0"+
    "\1\324\5\146\1\234\1\146\1\324\5\146\1\235\15\146"+
    "\1\234\1\236\1\146\1\234\1\146\1\234\2\146\1\325"+
    "\2\0\1\326\5\325\1\327\1\325\1\326\5\325\1\330"+
    "\15\325\1\331\2\325\1\331\1\325\1\331\2\325\1\237"+
    "\2\0\1\332\5\237\1\333\1\237\1\332\5\237\1\334"+
    "\15\237\1\333\1\335\1\237\1\333\1\237\1\333\2\237"+
    "\1\241\2\0\6\241\1\336\31\241\1\337\3\241\1\234"+
    "\2\0\1\340\7\234\1\340\5\234\1\341\16\234\1\245"+
    "\6\234\1\342\2\0\6\342\1\343\31\342\1\344\3\342"+
    "\1\240\2\0\1\241\5\240\1\345\1\240\1\241\24\240"+
    "\1\243\2\240\1\244\3\240\1\331\2\0\6\331\1\327"+
    "\35\331\1\152\2\0\1\324\5\152\1\0\1\152\1\324"+
    "\5\152\1\246\15\152\1\0\2\152\1\0\1\152\1\0"+
    "\2\152\1\250\2\0\40\250\1\346\1\347\2\250\1\350"+
    "\2\0\6\350\1\351\31\350\1\352\1\353\2\350\1\247"+
    "\2\0\1\250\7\247\1\250\24\247\1\251\2\247\1\252"+
    "\1\354\2\247\1\234\2\0\1\355\7\234\1\355\5\234"+
    "\1\356\16\234\1\245\6\234\1\0\2\260\1\255\1\0"+
    "\1\256\1\257\1\0\1\256\2\0\1\255\1\227\5\0"+
    "\10\257\1\0\4\257\13\0\1\357\6\0\1\360\1\357"+
    "\36\0\1\357\2\0\2\257\2\0\1\360\1\357\6\0"+
    "\10\257\1\0\4\257\7\0\1\257\1\0\3\260\7\0"+
    "\1\260\1\227\35\0\1\261\5\0\1\361\1\262\1\261"+
    "\33\0\1\362\2\0\1\363\7\362\1\262\33\362\3\0"+
    "\1\263\7\0\1\263\5\0\1\364\25\0\1\161\2\0"+
    "\1\365\5\161\1\0\1\161\1\365\5\161\1\264\15\161"+
    "\1\0\2\161\1\0\1\161\1\0\2\161\1\265\2\0"+
    "\1\366\5\265\1\207\1\265\1\366\5\265\1\367\15\265"+
    "\1\207\2\265\1\207\1\265\1\207\2\265\3\0\1\370"+
    "\7\0\1\370\5\0\1\371\25\0\1\266\2\0\6\266"+
    "\1\372\31\266\1\270\3\266\1\271\2\0\40\271\1\272"+
    "\1\373\2\271\3\0\1\374\7\0\1\374\5\0\1\375"+
    "\26\0\2\300\1\275\1\0\1\276\1\277\1\0\1\276"+
    "\1\0\1\227\1\275\6\0\10\277\1\0\4\277\13\0"+
    "\1\376\6\0\1\377\1\376\36\0\1\376\2\0\2\277"+
    "\2\0\1\377\1\376\6\0\10\277\1\0\4\277\7\0"+
    "\1\277\1\0\3\300\6\0\1\227\1\300\36\0\1\301"+
    "\5\0\1\u0100\1\302\1\301\33\0\1\u0101\2\0\1\u0102"+
    "\7\u0101\1\302\33\u0101\3\0\1\304\1\0\1\256\1\257"+
    "\1\0\1\256\2\0\1\304\6\0\10\257\1\0\4\257"+
    "\13\0\1\305\5\0\1\u0103\1\306\1\305\33\0\1\u0104"+
    "\2\0\1\u0105\7\u0104\1\306\33\u0104\4\210\1\u0106\1\307"+
    "\41\210\6\0\1\47\13\0\3\47\1\u0107\4\47\1\0"+
    "\4\47\16\0\1\47\13\0\3\47\1\u0108\4\47\1\0"+
    "\4\47\16\0\1\47\13\0\7\47\1\u0109\1\0\4\47"+
    "\16\0\1\47\13\0\7\47\1\u010a\1\0\4\47\16\0"+
    "\1\103\13\0\3\103\1\u010b\4\103\1\0\4\103\13\0"+
    "\1\316\5\0\1\u010c\1\317\1\316\33\0\1\u010d\2\0"+
    "\1\u010e\7\u010d\1\317\33\u010d\11\320\1\u010f\35\320\1\321"+
    "\2\0\10\321\1\0\33\321\1\152\2\0\1\323\5\152"+
    "\1\0\1\152\1\323\23\152\1\0\2\152\1\0\1\152"+
    "\1\0\2\152\1\325\2\0\1\326\5\325\1\0\1\325"+
    "\1\326\5\325\1\330\15\325\1\331\2\325\1\331\1\325"+
    "\1\331\2\325\1\331\2\0\1\326\5\331\1\0\1\331"+
    "\1\326\5\331\1\u0110\17\331\1\u0111\5\331\1\u0112\2\0"+
    "\6\u0112\1\0\31\u0112\1\u0113\3\u0112\1\325\2\0\1\u0114"+
    "\5\325\1\0\1\325\1\u0114\5\325\1\330\15\325\1\331"+
    "\2\325\1\331\1\325\1\331\2\325\1\331\2\0\6\331"+
    "\1\0\27\331\1\u0111\5\331\1\207\2\0\1\332\7\207"+
    "\1\332\5\207\1\u0115\25\207\1\333\2\0\1\207\7\333"+
    "\1\207\24\333\1\u0116\6\333\1\237\2\0\1\u0117\5\237"+
    "\1\333\1\237\1\u0117\5\237\1\334\15\237\1\333\1\335"+
    "\1\237\1\333\1\237\1\333\2\237\1\u0118\2\0\1\u0119"+
    "\5\u0118\1\u011a\1\u0118\1\u0119\5\u0118\1\u011b\15\u0118\1\u011c"+
    "\2\u0118\1\u011c\1\u0118\1\u011c\2\u0118\3\0\1\340\7\0"+
    "\1\340\5\0\1\u011d\25\0\1\241\2\0\6\241\1\u011e"+
    "\31\241\1\337\3\241\1\234\2\u011f\1\u011d\5\234\1\240"+
    "\1\234\1\u011d\24\234\1\245\6\234\1\342\2\0\6\342"+
    "\1\336\27\342\1\u0120\1\342\1\344\3\342\1\u0112\2\0"+
    "\1\u0121\5\u0112\1\0\1\u0112\1\u0121\5\u0112\1\u0122\21\u0112"+
    "\1\u0113\3\u0112\1\342\2\0\6\342\1\u011e\27\342\1\u0120"+
    "\1\342\1\344\3\342\1\240\2\0\1\u0123\5\240\1\242"+
    "\1\240\1\u0123\5\240\1\u0124\16\240\1\243\2\240\1\244"+
    "\3\240\1\250\2\0\40\250\1\346\1\u0125\2\250\3\0"+
    "\1\355\7\0\1\355\5\0\1\u0126\25\0\1\350\2\0"+
    "\6\350\1\250\27\350\1\u0127\1\350\1\352\1\353\2\350"+
    "\1\u0128\2\0\6\u0128\1\250\31\u0128\1\u0129\1\u012a\2\u0128"+
    "\1\350\2\0\6\350\1\250\27\350\1\u0127\1\350\1\352"+
    "\1\u012b\2\350\1\331\2\0\1\u012c\5\331\1\0\1\331"+
    "\1\u012c\5\331\1\u012d\17\331\1\u0111\5\331\1\247\2\0"+
    "\1\u012e\7\247\1\u012e\5\247\1\u012f\16\247\1\251\2\247"+
    "\1\252\1\253\2\247\1\234\2\u0130\1\u0126\7\234\1\u0126"+
    "\24\234\1\245\3\234\1\247\2\234\3\0\1\357\5\0"+
    "\1\u0131\1\360\1\357\33\0\1\u0132\2\0\1\u0133\7\u0132"+
    "\1\360\33\u0132\11\361\1\u0134\35\361\1\362\2\0\10\362"+
    "\1\0\33\362\1\161\2\0\1\364\5\161\1\0\1\161"+
    "\1\364\23\161\1\0\2\161\1\0\1\161\1\0\2\161"+
    "\1\207\2\0\1\366\7\207\1\366\5\207\1\u0135\25\207"+
    "\1\265\2\0\1\u0136\5\265\1\207\1\265\1\u0136\5\265"+
    "\1\367\15\265\1\207\2\265\1\207\1\265\1\207\2\265"+
    "\1\0\2\u0137\1\371\5\0\1\266\1\0\1\371\33\0"+
    "\1\266\2\0\1\u0138\5\266\1\267\1\266\1\u0138\5\266"+
    "\1\u0139\21\266\1\270\3\266\1\271\2\0\1\u013a\7\271"+
    "\1\u013a\5\271\1\u013b\21\271\1\272\1\273\2\271\1\0"+
    "\2\u013c\1\375\7\0\1\375\30\0\1\271\5\0\1\376"+
    "\5\0\1\u013d\1\377\1\376\33\0\1\u013e\2\0\1\u013f"+
    "\7\u013e\1\377\33\u013e\11\u0100\1\u0140\35\u0100\1\u0101\2\0"+
    "\10\u0101\1\0\33\u0101\11\u0103\1\u0141\35\u0103\1\u0104\2\0"+
    "\10\u0104\1\0\33\u0104\6\0\1\47\13\0\4\47\1\u0142"+
    "\3\47\1\0\4\47\16\0\1\47\13\0\6\47\1\55"+
    "\1\47\1\0\4\47\16\0\1\47\13\0\10\47\1\0"+
    "\1\47\1\u0143\2\47\16\0\1\103\13\0\4\103\1\u0144"+
    "\3\103\1\0\4\103\10\0\11\u010c\1\u0145\35\u010c\1\u010d"+
    "\2\0\10\u010d\1\0\33\u010d\1\325\2\0\1\u0110\5\325"+
    "\1\0\1\325\1\u0110\23\325\1\331\2\325\1\331\1\325"+
    "\1\331\2\325\1\u0112\2\0\6\u0112\1\u0146\31\u0112\1\u0113"+
    "\4\u0112\2\0\6\u0112\1\u0147\31\u0112\1\u0113\3\u0112\1\u0148"+
    "\2\0\1\u0115\5\u0148\1\207\1\u0148\1\u0115\23\u0148\1\207"+
    "\2\u0148\1\207\1\u0148\1\207\2\u0148\1\u011c\2\0\6\u011c"+
    "\1\u011a\35\u011c\1\u0148\2\0\1\u0117\5\u0148\1\207\1\u0148"+
    "\1\u0117\5\u0148\1\u0149\15\u0148\1\207\2\u0148\1\207\1\u0148"+
    "\1\207\2\u0148\1\u0118\2\0\1\u0119\5\u0118\1\207\1\u0118"+
    "\1\u0119\5\u0118\1\u011b\15\u0118\1\u011c\2\u0118\1\u011c\1\u0118"+
    "\1\u011c\2\u0118\1\u011c\2\0\1\u0119\5\u011c\1\207\1\u011c"+
    "\1\u0119\5\u011c\1\u014a\17\u011c\1\u014b\5\u011c\1\u014c\2\0"+
    "\6\u014c\1\207\31\u014c\1\u014d\3\u014c\1\u0118\2\0\1\u014e"+
    "\5\u0118\1\207\1\u0118\1\u014e\5\u0118\1\u011b\15\u0118\1\u011c"+
    "\2\u0118\1\u011c\1\u0118\1\u011c\2\u0118\1\u011c\2\0\6\u011c"+
    "\1\207\27\u011c\1\u014b\5\u011c\1\0\2\u011f\1\u011d\5\0"+
    "\1\241\1\0\1\u011d\33\0\1\241\2\0\1\u0123\5\241"+
    "\1\336\1\241\1\u0123\5\241\1\u014f\21\241\1\337\3\241"+
    "\1\0\2\u011f\1\u0150\5\0\1\241\1\0\1\u0150\33\0"+
    "\1\u0112\2\0\1\u0121\5\u0112\1\u0146\1\u0112\1\u0121\5\u0112"+
    "\1\u0122\21\u0112\1\u0113\4\u0112\2\u011f\1\u0122\5\u0112\1\u0151"+
    "\1\u0112\1\u0122\27\u0112\1\u0113\3\u0112\1\240\2\u011f\1\u014f"+
    "\5\240\1\345\1\240\1\u014f\24\240\1\243\2\240\1\244"+
    "\3\240\1\250\2\0\1\u012e\7\250\1\u012e\5\250\1\u0152"+
    "\21\250\1\346\1\347\2\250\1\0\2\u0130\1\u0126\7\0"+
    "\1\u0126\30\0\1\250\2\0\1\u0128\2\0\6\u0128\1\u0153"+
    "\31\u0128\1\u0129\1\u012a\3\u0128\2\0\6\u0128\1\u0154\31\u0128"+
    "\1\u0129\1\u0155\2\u0128\1\u0112\2\0\1\u0156\5\u0112\1\u0146"+
    "\1\u0112\1\u0156\5\u0112\1\u0157\21\u0112\1\u0113\3\u0112\1\350"+
    "\2\0\1\u0158\5\350\1\250\1\350\1\u0158\5\350\1\u0159"+
    "\17\350\1\u0127\1\350\1\352\1\353\2\350\1\331\2\u0130"+
    "\1\u012d\5\331\1\0\1\331\1\u012d\25\331\1\u0111\2\331"+
    "\1\350\2\331\1\247\2\u0130\1\u0152\7\247\1\u0152\24\247"+
    "\1\251\2\247\1\252\1\354\2\247\1\0\2\u0130\1\u015a"+
    "\7\0\1\u015a\30\0\1\250\2\0\11\u0131\1\u015b\35\u0131"+
    "\1\u0132\2\0\10\u0132\1\0\33\u0132\1\265\2\0\1\u0135"+
    "\5\265\1\207\1\265\1\u0135\23\265\1\207\2\265\1\207"+
    "\1\265\1\207\2\265\1\0\2\u0137\1\u015c\5\0\1\266"+
    "\1\0\1\u015c\33\0\1\266\2\u0137\1\u0139\5\266\1\372"+
    "\1\266\1\u0139\27\266\1\270\3\266\1\271\2\u013c\1\u013b"+
    "\7\271\1\u013b\27\271\1\272\1\373\2\271\1\0\2\u013c"+
    "\1\u015d\7\0\1\u015d\30\0\1\271\2\0\11\u013d\1\u015e"+
    "\35\u013d\1\u013e\2\0\10\u013e\1\0\33\u013e\6\0\1\47"+
    "\13\0\1\47\1\u015f\6\47\1\0\4\47\16\0\1\47"+
    "\13\0\10\47\1\0\2\47\1\u0160\1\47\16\0\1\103"+
    "\13\0\1\103\1\u0161\6\103\1\0\4\103\51\0\1\u0162"+
    "\5\0\1\u0112\2\0\6\u0112\1\u0146\27\u0112\1\u0163\1\u0112"+
    "\1\u0113\3\u0112\1\u0148\2\0\1\332\5\u0148\1\207\1\u0148"+
    "\1\332\5\u0148\1\u0149\15\u0148\1\207\2\u0148\1\207\1\u0148"+
    "\1\207\2\u0148\1\u0118\2\0\1\u014a\5\u0118\1\207\1\u0118"+
    "\1\u014a\23\u0118\1\u011c\2\u0118\1\u011c\1\u0118\1\u011c\2\u0118"+
    "\1\u014c\2\0\6\u014c\1\u0164\31\u014c\1\u014d\4\u014c\2\0"+
    "\6\u014c\1\u0165\31\u014c\1\u014d\3\u014c\1\241\2\u011f\1\u014f"+
    "\5\241\1\u011e\1\241\1\u014f\27\241\1\337\3\241\3\0"+
    "\1\u0150\5\0\1\241\1\0\1\u0150\33\0\1\241\2\0"+
    "\6\241\1\336\27\241\1\u0166\1\241\1\337\3\241\1\250"+
    "\2\u0130\1\u0152\7\250\1\u0152\27\250\1\346\1\u0125\3\250"+
    "\2\0\36\250\1\u0167\1\250\1\346\1\347\2\250\1\u0128"+
    "\2\0\6\u0128\1\u0153\27\u0128\1\u0168\1\u0128\1\u0129\1\u012a"+
    "\3\u0128\2\0\1\u0169\5\u0128\1\u0153\1\u0128\1\u0169\5\u0128"+
    "\1\u016a\21\u0128\1\u0129\1\u012a\2\u0128\1\u0112\2\u0130\1\u0157"+
    "\5\u0112\1\u0146\1\u0112\1\u0157\27\u0112\1\u0113\1\u0128\2\u0112"+
    "\1\350\2\u0130\1\u0159\5\350\1\250\1\350\1\u0159\25\350"+
    "\1\u0127\1\350\1\352\1\u012b\2\350\3\0\1\u015a\7\0"+
    "\1\u015a\30\0\1\250\5\0\1\u015c\5\0\1\266\1\0"+
    "\1\u015c\36\0\1\u015d\7\0\1\u015d\30\0\1\271\10\0"+
    "\1\47\13\0\5\47\1\u016b\2\47\1\0\4\47\16\0"+
    "\1\47\13\0\10\47\1\0\3\47\1\u016c\16\0\1\103"+
    "\13\0\5\103\1\u016d\2\103\1\0\4\103\10\0\1\207"+
    "\2\0\36\207\1\u016e\5\207\1\u014c\2\0\6\u014c\1\u0164"+
    "\27\u014c\1\u016f\1\u014c\1\u014d\3\u014c\1\u0128\2\u0130\1\u016a"+
    "\5\u0128\1\u0153\1\u0128\1\u016a\27\u0128\1\u0129\1\u0155\2\u0128"+
    "\6\0\1\47\13\0\2\47\1\u0170\5\47\1\0\4\47"+
    "\16\0\1\103\13\0\2\103\1\u0171\5\103\1\0\4\103"+
    "\16\0\1\47\13\0\6\47\1\u0172\1\47\1\0\4\47"+
    "\16\0\1\103\13\0\6\103\1\u0173\1\103\1\0\4\103"+
    "\16\0\1\47\13\0\7\47\1\u0174\1\0\4\47\16\0"+
    "\1\103\13\0\7\103\1\u0175\1\0\4\103\16\0\1\47"+
    "\13\0\3\47\1\u0176\4\47\1\0\4\47\16\0\1\103"+
    "\13\0\3\103\1\u0177\4\103\1\0\4\103\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11037];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\41\0\2\11\4\1\3\11\4\1\2\11\2\1\2\11"+
    "\2\1\2\11\2\1\5\11\2\1\1\11\1\1\1\11"+
    "\3\1\1\11\1\1\1\11\3\1\1\11\1\1\1\11"+
    "\1\1\2\11\4\1\1\11\4\1\2\11\5\1\2\11"+
    "\17\1\1\11\1\1\1\11\1\1\2\11\5\1\1\11"+
    "\7\1\1\0\11\1\3\0\2\1\1\11\5\0\3\1"+
    "\2\0\1\1\3\0\1\1\4\0\1\1\2\0\2\1"+
    "\4\0\2\1\1\0\1\1\3\0\1\1\2\0\2\1"+
    "\10\0\5\1\1\11\3\0\2\1\2\0\1\1\2\0"+
    "\1\1\1\0\5\1\4\0\1\1\1\0\1\1\1\0"+
    "\1\1\3\0\2\1\5\0\2\1\2\0\2\1\2\0"+
    "\2\1\5\0\2\1\1\0\2\1\1\11\5\1\1\0"+
    "\2\1\1\11\1\0\1\1\3\0\10\1\1\0\1\1"+
    "\1\0\1\1\4\0\1\1\1\0\1\1\2\0\2\1"+
    "\6\0\2\1\1\11\2\1\7\0\2\1\2\11\3\1"+
    "\1\11\2\0\7\1\6\0\1\1\5\0\1\11\2\0"+
    "\1\11\3\1\1\11\6\1\2\0\15\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[375];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CndLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 67: break;
          case 2: 
            { yybegin(YYINITIAL); return CndTypes.CRLF;
            } 
            // fall through
          case 68: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 69: break;
          case 4: 
            { yybegin(OPTIONS); return CndTypes.OPTION;
            } 
            // fall through
          case 70: break;
          case 5: 
            { yybegin(OPTION_REF); return CndTypes.OPTION;
            } 
            // fall through
          case 71: break;
          case 6: 
            { yybegin(NAMESPACE); return CndTypes.LEFT_ANGLE_BRACKET;
            } 
            // fall through
          case 72: break;
          case 7: 
            { yybegin(NODETYPE_NAMESPACE); return CndTypes.LEFT_BRACKET;
            } 
            // fall through
          case 73: break;
          case 8: 
            { yybegin(PROPERTY); return CndTypes.MINUS;
            } 
            // fall through
          case 74: break;
          case 9: 
            { yybegin(NODE); return CndTypes.PLUS;
            } 
            // fall through
          case 75: break;
          case 10: 
            { return CndTypes.NAMESPACE_NAME;
            } 
            // fall through
          case 76: break;
          case 11: 
            { yybegin(NAMESPACE_URI); return CndTypes.SINGLE_QUOTE;
            } 
            // fall through
          case 77: break;
          case 12: 
            { return CndTypes.EQUAL;
            } 
            // fall through
          case 78: break;
          case 13: 
            { return CndTypes.NAMESPACE_URI;
            } 
            // fall through
          case 79: break;
          case 14: 
            { return CndTypes.SINGLE_QUOTE;
            } 
            // fall through
          case 80: break;
          case 15: 
            { yybegin(YYINITIAL); return CndTypes.RIGHT_ANGLE_BRACKET;
            } 
            // fall through
          case 81: break;
          case 16: 
            { yybegin(NODETYPE); return CndTypes.NAMESPACE_NAME;
            } 
            // fall through
          case 82: break;
          case 17: 
            { return CndTypes.NODE_TYPE_NAME;
            } 
            // fall through
          case 83: break;
          case 18: 
            { return CndTypes.COLON;
            } 
            // fall through
          case 84: break;
          case 19: 
            { yybegin(NODETYPE_DONE); return CndTypes.RIGHT_BRACKET;
            } 
            // fall through
          case 85: break;
          case 20: 
            { yybegin(SUPER_TYPE_NAMESPACE); return CndTypes.RIGHT_ONLY_ANGLE_BRACKET;
            } 
            // fall through
          case 86: break;
          case 21: 
            { yybegin(SUPER_TYPE_NAME); return CndTypes.COLON;
            } 
            // fall through
          case 87: break;
          case 22: 
            { yybegin(YYINITIAL); yypushback(yylength()); return CndTypes.NODE_TYPE_NAME;
            } 
            // fall through
          case 88: break;
          case 23: 
            { yybegin(AFTER_SUPER_TYPE_NAME); return CndTypes.NODE_TYPE_NAME;
            } 
            // fall through
          case 89: break;
          case 24: 
            { yybegin(SUPER_TYPE_NAMESPACE); return CndTypes.COMMA;
            } 
            // fall through
          case 90: break;
          case 25: 
            { return CndTypes.OPTION;
            } 
            // fall through
          case 91: break;
          case 26: 
            { yybegin(OPTION_VALUE); return CndTypes.EQUAL;
            } 
            // fall through
          case 92: break;
          case 27: 
            { yybegin(OPTIONS); return CndTypes.PROPERTY_NAME;
            } 
            // fall through
          case 93: break;
          case 28: 
            { yybegin(OPTIONS); return CndTypes.OPTION_VALUE;
            } 
            // fall through
          case 94: break;
          case 29: 
            { yybegin(EXTEND_NAMESPACE); return CndTypes.EQUAL;
            } 
            // fall through
          case 95: break;
          case 30: 
            { yybegin(EXTEND); return CndTypes.NAMESPACE_NAME;
            } 
            // fall through
          case 96: break;
          case 31: 
            { yybegin(EXTEND_NAMESPACE); return CndTypes.COMMA;
            } 
            // fall through
          case 97: break;
          case 32: 
            { return CndTypes.ITEMTYPE_TYPE;
            } 
            // fall through
          case 98: break;
          case 33: 
            { return CndTypes.PROPERTY_NAME;
            } 
            // fall through
          case 99: break;
          case 34: 
            { yybegin(PROPERTY_TYPE); return CndTypes.LEFT_PARENTHESIS;
            } 
            // fall through
          case 100: break;
          case 35: 
            { return CndTypes.PROPERTY_TYPE;
            } 
            // fall through
          case 101: break;
          case 36: 
            { yybegin(PROPERTY_MASK); return CndTypes.COMMA;
            } 
            // fall through
          case 102: break;
          case 37: 
            { yybegin(PROPERTY_DEFAULT); return CndTypes.RIGHT_PARENTHESIS;
            } 
            // fall through
          case 103: break;
          case 38: 
            { yybegin(PROPERTY_MASK_OPTION); return CndTypes.PROPERTY_MASK_OPTION;
            } 
            // fall through
          case 104: break;
          case 39: 
            { return CndTypes.PROPERTY_MASK;
            } 
            // fall through
          case 105: break;
          case 40: 
            { yybegin(PROPERTY_MASK_OPTION_NAME); return CndTypes.LEFT_BRACKET;
            } 
            // fall through
          case 106: break;
          case 41: 
            { return CndTypes.PROPERTY_MASK_OPTION_VALUE;
            } 
            // fall through
          case 107: break;
          case 42: 
            { return CndTypes.RIGHT_BRACKET;
            } 
            // fall through
          case 108: break;
          case 43: 
            { yybegin(PROPERTY_MASK_OPTION_NAME); return CndTypes.COMMA;
            } 
            // fall through
          case 109: break;
          case 44: 
            { yybegin(PROPERTY_ATTRIBUTES); return CndTypes.PROPERTY_ATTRIBUTE;
            } 
            // fall through
          case 110: break;
          case 45: 
            { yybegin(PROPERTY_DEFAULT_VALUE); return CndTypes.EQUAL_PROPERTY_DEFAULT_VALUE;
            } 
            // fall through
          case 111: break;
          case 46: 
            { yybegin(PROPERTY_CONSTRAINT); return CndTypes.LEFT_ONLY_ANGLE_BRACKET;
            } 
            // fall through
          case 112: break;
          case 47: 
            { yybegin(PROPERTY_ATTRIBUTES); return CndTypes.PROPERTY_DEFAULT_VALUE;
            } 
            // fall through
          case 113: break;
          case 48: 
            { return CndTypes.PROPERTY_ATTRIBUTE;
            } 
            // fall through
          case 114: break;
          case 49: 
            { return CndTypes.PROPERTY_CONSTRAINT_VALUE;
            } 
            // fall through
          case 115: break;
          case 50: 
            { return CndTypes.NODE_NAME;
            } 
            // fall through
          case 116: break;
          case 51: 
            { yybegin(NODE_NAMESPACE); return CndTypes.LEFT_PARENTHESIS;
            } 
            // fall through
          case 117: break;
          case 52: 
            { yybegin(NODE_NODETYPE); return CndTypes.NAMESPACE_NAME;
            } 
            // fall through
          case 118: break;
          case 53: 
            { yybegin(NODE_NAMESPACE); return CndTypes.COMMA;
            } 
            // fall through
          case 119: break;
          case 54: 
            { yybegin(NODE_DEFAULT); return CndTypes.RIGHT_PARENTHESIS;
            } 
            // fall through
          case 120: break;
          case 55: 
            { yybegin(NODE_ATTRIBUTES); return CndTypes.NODE_ATTRIBUTE;
            } 
            // fall through
          case 121: break;
          case 56: 
            { yybegin(NODE_DEFAULT_VALUE_NAMESPACE); return CndTypes.EQUAL;
            } 
            // fall through
          case 122: break;
          case 57: 
            { yybegin(NODE_DEFAULT_VALUE); return CndTypes.NAMESPACE_NAME;
            } 
            // fall through
          case 123: break;
          case 58: 
            { yybegin(NODE_ATTRIBUTES); return CndTypes.NODE_TYPE_NAME;
            } 
            // fall through
          case 124: break;
          case 59: 
            { return CndTypes.NODE_ATTRIBUTE;
            } 
            // fall through
          case 125: break;
          case 60: 
            { return CndTypes.COMMENT;
            } 
            // fall through
          case 126: break;
          case 61: 
            { yypushback(yytext().toString().replaceAll("\\r", "").replaceAll("\\n", "").trim().length()); yybegin(PROPERTY_ATTRIBUTES); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 127: break;
          case 62: 
            { yypushback(1); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 128: break;
          case 63: 
            { yypushback(yytext().toString().replaceAll("\\r", "").replaceAll("\\n", "").trim().length()); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 129: break;
          case 64: 
            { yypushback(yytext().toString().replaceAll("\\r", "").replaceAll("\\n", "").trim().length()); yybegin(NODE_ATTRIBUTES); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 130: break;
          case 65: 
            { yybegin(ITEMTYPE); return CndTypes.ITEMTYPE;
            } 
            // fall through
          case 131: break;
          case 66: 
            { yybegin(EXTENDS); return CndTypes.EXTENDS;
            } 
            // fall through
          case 132: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
