/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package fr.tolc.jahia.intellij.plugin.cnd;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import fr.tolc.jahia.intellij.plugin.cnd.psi.CndTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Cnd.flex</tt>
 */
class CndLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int NAMESPACE = 2;
  public static final int NAMESPACE_URI = 4;
  public static final int NODETYPE_NAMESPACE = 6;
  public static final int NODETYPE = 8;
  public static final int NODETYPE_DONE = 10;
  public static final int SUPER_TYPE_NAMESPACE = 12;
  public static final int SUPER_TYPE_NAME = 14;
  public static final int AFTER_SUPER_TYPE_NAME = 16;
  public static final int OPTIONS = 18;
  public static final int OPTION_REF = 20;
  public static final int OPTION_VALUE = 22;
  public static final int EXTENDS = 24;
  public static final int EXTEND_NAMESPACE = 26;
  public static final int EXTEND = 28;
  public static final int ITEMTYPE = 30;
  public static final int PROPERTY = 32;
  public static final int PROPERTY_TYPE = 34;
  public static final int PROPERTY_MASK_OPTION_NAME = 36;
  public static final int PROPERTY_MASK = 38;
  public static final int PROPERTY_MASK_OPTION = 40;
  public static final int PROPERTY_DEFAULT = 42;
  public static final int PROPERTY_DEFAULT_VALUE = 44;
  public static final int PROPERTY_ATTRIBUTES = 46;
  public static final int PROPERTY_CONSTRAINT = 48;
  public static final int PROPERTY_CONSTRAINT_NEWLINE = 50;
  public static final int NODE = 52;
  public static final int NODE_NAMESPACE = 54;
  public static final int NODE_NODETYPE = 56;
  public static final int NODE_DEFAULT = 58;
  public static final int NODE_DEFAULT_VALUE_NAMESPACE = 60;
  public static final int NODE_DEFAULT_VALUE = 62;
  public static final int NODE_ATTRIBUTES = 64;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 
    32, 32
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 17392 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1"+
    "\21\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\21\1\25\1\57\1\60\5\21\2\25\1\61"+
    "\7\21\1\25\1\62\20\21\1\25\1\63\1\21\1\64\13\25\1\65\1\25\1\66\22\21\1\67"+
    "\1\70\4\21\1\71\11\21\1\72\1\73\1\74\1\75\1\21\1\76\2\21\1\77\3\21\1\100\2"+
    "\21\1\101\10\21\123\25\1\102\7\25\1\103\1\104\12\25\1\105\15\25\1\106\6\21"+
    "\1\25\1\107\u0582\21\1\110\u017f\21");

  /* The ZZ_CMAP_Y table has 4672 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\0\1\5\1\6\1\7\1\10\1\11\1\6\1\7\1\10\1\12\1\13"+
    "\3\0\1\14\1\15\1\16\1\17\2\20\1\21\3\20\1\21\7\20\1\22\10\20\1\23\50\20\1"+
    "\24\1\20\1\25\1\26\1\27\1\30\2\26\16\0\1\31\1\32\1\33\1\34\2\20\1\35\11\20"+
    "\1\36\21\20\1\37\1\40\24\20\1\41\3\20\1\21\1\42\1\41\4\20\1\43\1\44\4\0\1"+
    "\45\1\46\1\26\3\20\2\47\1\26\1\50\1\51\1\0\1\52\5\20\1\53\3\0\1\54\1\55\13"+
    "\20\1\56\1\45\1\57\1\60\1\0\1\61\1\26\1\62\1\63\3\20\3\0\1\64\12\20\1\65\1"+
    "\0\1\66\1\26\1\0\1\67\3\20\1\53\1\70\1\17\2\20\1\65\1\71\1\72\1\73\2\26\3"+
    "\20\1\74\1\20\1\47\6\26\2\20\1\31\1\75\2\26\1\76\5\0\1\77\6\20\1\100\2\0\1"+
    "\101\1\20\1\102\1\0\1\41\1\20\1\103\1\104\1\105\2\20\1\106\1\107\1\110\1\111"+
    "\1\112\1\62\1\113\1\102\1\0\1\114\1\115\1\116\1\117\1\105\2\20\1\106\1\120"+
    "\1\121\1\122\1\123\1\124\1\125\1\126\1\0\1\127\1\26\1\116\1\36\1\35\2\20\1"+
    "\106\1\130\1\110\1\45\1\131\1\132\1\26\1\102\1\0\1\42\1\133\1\116\1\104\1"+
    "\105\2\20\1\106\1\130\1\110\1\111\1\123\1\126\1\113\1\102\1\0\1\42\1\26\1"+
    "\134\1\135\1\136\1\137\1\115\1\135\1\20\1\140\1\141\1\142\1\143\1\26\1\126"+
    "\1\0\1\26\1\42\1\144\1\31\1\106\2\20\1\106\1\20\1\145\1\146\1\142\1\147\1"+
    "\47\1\102\1\0\2\26\1\103\1\31\1\106\2\20\1\106\1\150\1\110\1\146\1\142\1\147"+
    "\1\33\1\102\1\0\1\151\1\26\1\144\1\31\1\106\4\20\1\152\1\146\1\153\1\154\1"+
    "\43\1\102\1\0\1\26\1\40\1\155\1\20\1\21\1\40\2\20\1\35\1\156\1\21\1\157\1"+
    "\160\1\0\1\126\1\0\1\161\1\26\1\41\5\20\1\162\1\163\1\164\1\165\1\0\1\166"+
    "\4\26\1\167\1\170\1\171\1\41\1\172\1\173\1\162\1\174\1\175\1\50\1\0\1\176"+
    "\4\26\1\132\2\26\1\166\1\0\1\166\1\177\1\200\1\20\1\41\3\20\1\27\1\44\1\0"+
    "\1\146\1\201\1\0\1\44\3\0\1\202\1\203\7\26\5\20\1\53\1\0\1\204\1\0\1\166\1"+
    "\65\1\205\1\206\1\207\1\210\1\20\1\211\1\212\1\0\1\50\4\20\1\36\1\16\5\20"+
    "\1\213\51\20\1\136\1\21\1\136\5\20\1\136\4\20\1\136\1\21\1\136\1\20\1\21\7"+
    "\20\1\136\10\20\1\214\4\26\2\20\2\26\12\20\2\75\1\41\114\20\1\104\2\20\1\41"+
    "\2\20\1\47\11\20\1\135\1\20\1\132\1\20\1\31\1\215\1\26\2\20\1\215\1\26\2\20"+
    "\1\216\1\26\1\20\1\31\1\217\1\26\6\20\1\220\3\0\1\221\1\222\1\0\1\166\3\26"+
    "\1\223\1\0\1\166\13\20\1\26\1\224\4\20\1\225\10\20\1\75\1\26\3\20\1\21\1\0"+
    "\1\2\1\0\1\2\1\126\1\0\3\20\1\75\1\27\1\26\5\20\1\114\3\20\1\25\1\0\1\166"+
    "\4\26\2\20\1\164\1\2\6\20\1\201\1\165\3\0\1\111\1\0\1\166\1\0\1\166\1\43\1"+
    "\26\1\0\1\50\10\26\1\226\5\20\1\220\1\0\1\226\1\114\1\0\1\166\1\26\1\227\1"+
    "\2\1\26\1\230\3\20\1\101\1\207\1\0\1\67\4\20\1\65\1\0\1\2\1\26\4\20\1\220"+
    "\2\0\1\26\1\0\1\231\1\0\1\67\3\20\1\75\1\20\1\132\10\26\1\232\2\0\1\233\1"+
    "\234\1\166\30\20\7\0\1\235\42\20\2\75\4\20\2\75\1\20\1\236\3\20\1\75\6\20"+
    "\1\31\1\175\1\237\1\27\1\240\1\114\1\20\1\27\1\237\1\27\1\26\1\227\3\26\1"+
    "\241\1\26\1\43\1\132\1\26\1\242\1\26\1\146\1\0\1\42\1\43\2\26\1\20\1\27\4"+
    "\20\2\26\1\0\1\202\1\243\1\0\1\244\1\26\1\245\1\40\1\156\1\246\1\30\1\247"+
    "\1\20\1\250\1\251\1\252\2\26\5\20\1\132\116\26\5\20\1\21\5\20\1\21\20\20\1"+
    "\27\1\253\1\254\1\26\4\20\1\36\1\16\7\20\1\43\1\26\1\62\2\20\1\21\1\26\10"+
    "\21\4\0\5\26\1\43\72\26\1\251\3\26\1\41\1\211\1\246\1\27\1\41\11\20\1\21\1"+
    "\255\1\41\12\20\1\213\1\251\4\20\1\21\1\41\12\20\1\21\2\26\3\20\1\47\6\26"+
    "\170\20\1\75\11\26\75\20\1\47\2\26\21\20\1\27\10\26\5\20\1\75\41\20\1\27\2"+
    "\20\1\0\1\254\2\26\5\20\1\164\1\76\1\256\3\20\1\65\12\20\1\166\3\26\1\43\1"+
    "\20\1\40\14\20\1\105\3\20\1\21\1\20\7\26\1\43\1\20\1\257\1\260\2\20\1\53\2"+
    "\26\1\132\6\20\1\114\1\26\1\67\5\20\1\220\1\0\1\50\1\26\1\0\1\166\2\0\1\67"+
    "\1\261\1\0\1\67\2\20\1\65\1\50\2\20\1\164\1\0\1\2\1\26\3\20\1\27\1\77\5\20"+
    "\1\53\1\0\1\244\1\43\1\0\1\166\1\262\1\20\1\0\1\263\5\20\1\101\1\165\1\26"+
    "\1\260\1\264\1\0\1\166\2\20\1\21\1\265\6\20\1\206\1\266\1\225\2\26\1\267\1"+
    "\20\1\53\1\270\1\26\3\271\1\26\2\21\5\20\1\213\1\75\1\26\16\20\1\53\1\272"+
    "\1\0\1\166\64\20\1\114\1\26\2\20\1\21\1\273\5\20\1\114\40\26\55\20\1\75\15"+
    "\20\1\25\4\26\1\21\1\26\1\273\1\274\1\20\1\106\1\21\1\175\1\275\15\20\1\25"+
    "\3\26\1\273\54\20\1\75\2\26\10\20\1\40\6\20\5\26\1\20\1\27\2\0\2\26\2\0\1"+
    "\115\2\26\1\251\3\26\1\42\1\31\20\20\1\276\1\242\1\26\1\0\1\166\1\41\2\20"+
    "\1\117\1\41\2\20\1\47\1\277\12\20\1\21\3\40\1\300\1\301\2\26\1\302\1\20\1"+
    "\150\2\20\1\21\2\20\1\303\1\20\1\75\1\20\1\75\4\26\17\20\1\47\10\26\6\20\1"+
    "\27\20\26\1\304\20\26\3\20\1\27\6\20\1\132\1\26\1\244\3\26\4\20\1\26\1\251"+
    "\3\20\1\47\4\20\1\65\1\305\3\20\1\75\4\20\1\114\1\20\1\246\5\26\23\20\1\75"+
    "\1\0\1\166\4\20\1\114\4\20\1\114\5\20\1\26\6\20\1\114\23\26\46\20\1\21\1\26"+
    "\2\20\1\75\1\26\1\20\23\26\1\75\1\106\4\20\1\36\1\306\2\20\1\75\1\26\2\20"+
    "\1\21\1\26\3\20\1\21\10\26\2\20\1\307\1\26\2\20\1\75\1\26\3\20\1\25\10\26"+
    "\7\20\1\277\10\26\1\310\1\76\1\150\1\41\2\20\1\114\1\122\4\26\3\20\1\27\3"+
    "\20\1\27\4\26\1\20\1\41\2\20\1\311\3\26\6\20\1\75\1\26\2\20\1\75\1\26\2\20"+
    "\1\47\1\26\2\20\1\25\15\26\11\20\1\132\6\26\6\20\1\47\1\26\6\20\1\47\41\26"+
    "\1\230\6\20\1\0\1\165\3\26\1\126\1\0\1\26\1\62\1\230\5\20\1\0\1\312\2\26\3"+
    "\20\1\132\1\0\1\166\1\230\3\20\1\164\1\0\1\146\1\0\2\26\4\20\1\313\1\26\1"+
    "\230\5\20\1\53\1\0\1\314\1\315\1\0\1\316\4\26\2\20\1\35\2\20\1\220\1\0\1\203"+
    "\10\26\1\21\1\247\1\20\1\36\1\20\1\132\5\20\1\164\1\0\1\305\1\0\1\166\1\144"+
    "\1\104\1\105\2\20\1\106\1\130\1\110\1\111\1\123\1\143\1\251\1\102\2\202\21"+
    "\26\6\20\1\201\1\0\1\204\1\47\1\0\1\166\4\26\6\20\2\0\1\317\1\26\1\0\1\166"+
    "\24\26\5\20\1\164\1\50\1\0\1\244\2\26\1\264\4\26\6\20\2\0\1\320\1\26\1\0\1"+
    "\166\4\26\5\20\1\53\1\0\1\26\1\0\1\166\6\26\3\20\1\321\1\0\1\2\1\0\1\166\54"+
    "\26\10\20\1\0\1\166\1\26\1\43\40\26\1\101\1\230\4\20\1\53\1\322\1\62\1\26"+
    "\1\101\1\77\4\20\1\240\1\211\1\0\1\166\4\26\7\20\1\132\40\26\1\20\1\106\3"+
    "\20\1\164\1\165\1\0\1\132\1\26\1\0\1\166\2\26\1\40\3\20\1\323\2\0\1\44\1\165"+
    "\11\26\1\21\1\35\4\20\1\324\1\325\1\212\1\26\1\0\1\166\24\26\63\20\1\25\14"+
    "\26\15\20\1\21\2\26\30\20\1\114\27\26\5\20\1\21\72\26\10\20\1\21\67\26\7\20"+
    "\1\132\3\20\1\21\1\0\1\166\14\26\3\20\1\75\1\202\1\26\6\20\1\165\1\26\1\114"+
    "\1\26\1\0\1\166\1\273\2\20\1\251\2\20\56\26\10\20\1\27\1\26\1\101\4\0\1\165"+
    "\1\26\1\62\1\230\1\20\10\26\1\25\3\26\75\20\1\27\2\26\36\20\1\47\41\26\43"+
    "\20\1\21\12\26\61\20\1\114\40\26\15\20\1\47\1\20\1\27\1\20\1\132\1\20\1\326"+
    "\1\2\127\26\1\327\1\330\2\0\1\331\1\2\3\26\1\332\22\26\1\315\67\26\12\20\1"+
    "\31\10\20\1\31\1\333\1\334\1\20\1\335\1\150\7\20\1\36\1\336\2\31\3\20\1\337"+
    "\1\175\1\40\1\106\51\20\1\75\3\20\1\106\2\20\1\213\3\20\1\213\2\20\1\31\3"+
    "\20\1\31\2\20\1\21\3\20\1\21\3\20\1\106\3\20\1\106\2\20\1\213\1\340\14\0\1"+
    "\165\1\227\5\0\1\202\1\304\1\26\1\341\2\26\1\227\1\44\1\0\52\26\1\165\2\0"+
    "\1\342\1\343\1\305\72\26\30\20\1\27\1\26\1\165\5\26\10\20\1\220\1\305\1\0"+
    "\1\166\24\26\1\150\3\20\1\167\1\41\1\213\1\344\1\245\1\345\1\167\1\236\1\167"+
    "\2\213\1\125\1\20\1\35\1\20\1\114\1\346\1\35\1\20\1\114\50\26\32\20\1\21\5"+
    "\26\106\20\1\27\1\26\33\20\1\75\120\20\1\25\1\26\146\20\1\132\3\26\3\20\1"+
    "\75\74\26\1\124\3\26\14\0\20\26\36\0\2\26");

  /* The ZZ_CMAP_A table has 1848 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\7\1\3\1\1\1\44\1\3\1\2\6\7\4\0\1\13\1\10\1\43\1\0\1\6\2\0\1\11\1\40\1"+
    "\41\1\5\1\42\1\21\1\37\1\32\1\4\2\7\1\17\1\0\1\14\1\12\1\15\2\0\1\26\2\6\1"+
    "\35\1\31\3\6\1\24\3\6\1\25\1\34\1\6\1\22\1\6\1\23\1\36\1\30\3\6\1\33\1\27"+
    "\1\6\1\16\1\0\1\20\1\0\1\6\1\33\1\27\1\6\4\0\6\7\1\45\2\7\2\0\4\6\4\0\1\6"+
    "\2\0\1\7\7\0\1\6\4\0\1\6\5\0\17\6\1\0\2\24\15\6\1\36\2\6\4\0\4\6\16\0\5\6"+
    "\7\0\1\6\1\0\1\6\1\0\5\6\1\0\2\6\2\0\4\6\1\0\1\6\6\0\1\6\1\0\3\6\1\0\1\6\1"+
    "\0\4\6\1\0\13\6\1\0\3\6\1\0\5\7\2\0\6\6\1\0\7\6\1\0\1\6\15\0\1\6\1\0\15\7"+
    "\1\0\1\7\1\0\2\7\1\0\2\7\1\0\1\7\3\6\5\0\6\7\5\0\1\6\4\0\3\7\1\0\1\7\3\0\3"+
    "\6\7\7\4\0\2\6\1\7\13\6\1\0\1\6\7\7\2\6\2\7\1\0\4\7\2\6\2\7\3\6\2\0\1\6\7"+
    "\0\1\7\1\6\1\7\6\6\3\7\2\0\11\6\3\7\1\6\6\0\2\7\6\6\4\7\2\6\2\0\2\7\1\6\11"+
    "\7\1\6\3\7\1\6\5\7\2\0\1\6\3\7\4\0\6\6\6\0\10\7\6\6\3\7\1\6\2\7\1\6\7\7\2"+
    "\6\2\7\2\0\2\7\1\6\3\7\1\0\10\6\2\0\2\6\2\0\6\6\1\0\7\6\1\0\1\6\3\0\4\6\2"+
    "\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7\1\6\5\0\2\6\1\0\5\6\7\0\2\6\4\0\3\7\1\0\6\6"+
    "\4\0\2\6\1\0\2\6\1\0\2\6\1\0\2\6\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7\3\0\1\7\7"+
    "\0\4\6\1\0\1\6\7\0\4\7\3\6\1\7\2\0\1\6\1\0\2\6\1\0\3\6\2\7\1\0\3\7\2\0\1\6"+
    "\10\0\1\6\6\7\2\0\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0\1\6\1\0\4\6"+
    "\4\0\5\7\3\0\3\7\1\0\4\7\2\0\1\6\6\0\5\7\1\0\5\6\3\0\1\6\7\7\1\0\2\7\5\0\2"+
    "\7\1\0\4\6\1\0\3\6\1\0\2\6\5\0\3\6\2\7\1\6\3\7\1\0\4\7\1\6\5\0\3\6\1\7\2\0"+
    "\2\7\1\0\7\6\1\0\1\6\4\0\1\7\4\0\6\7\1\0\1\7\3\0\2\7\4\0\1\6\1\7\2\6\7\7\4"+
    "\0\10\6\10\7\1\0\2\7\7\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1\0\3"+
    "\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0\3\6\2\7\1\0\2\7\1\6\2\0\5\6\1\0\1\6\1\0\2\7"+
    "\2\0\4\6\5\0\1\7\1\0\1\7\1\0\1\7\4\0\2\7\5\6\10\7\11\0\1\7\1\0\7\7\1\6\2\7"+
    "\4\6\3\7\1\6\3\7\2\6\7\7\3\6\4\7\5\6\14\7\1\6\1\7\3\6\1\0\7\6\2\0\3\7\2\6"+
    "\3\7\3\0\2\6\2\7\4\0\1\6\1\0\2\7\4\0\4\6\10\7\3\0\1\6\3\0\2\6\1\7\5\0\4\7"+
    "\1\0\5\6\2\7\2\6\1\7\1\6\5\0\5\7\3\6\3\0\10\7\5\6\2\7\3\0\3\6\3\7\1\0\5\7"+
    "\4\6\1\7\4\6\3\7\2\6\3\7\1\0\5\7\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6\2\0\3\6\1"+
    "\0\6\6\2\0\2\6\2\44\5\7\5\0\1\6\4\0\1\7\3\0\4\7\11\0\1\6\4\0\1\6\1\0\5\6\2"+
    "\0\1\6\1\0\4\6\1\0\3\6\2\0\4\6\5\0\5\6\4\0\1\6\4\0\4\6\3\7\2\6\5\0\2\7\2\0"+
    "\3\6\6\7\1\0\3\6\1\7\3\6\1\7\4\6\1\7\4\6\3\0\1\6\1\0\1\6\2\0\5\6\1\7\2\6\2"+
    "\7\5\6\1\0\4\6\2\7\4\0\1\6\3\7\2\6\1\7\5\6\2\7\3\0\3\6\4\0\3\6\2\7\2\0\6\6"+
    "\1\0\3\7\1\0\2\7\5\0\5\6\5\0\1\6\1\7\3\6\1\0\2\6\1\0\7\6\2\0\1\7\6\0\2\6\2"+
    "\0\3\6\3\0\2\6\3\0\2\6\2\0\3\7\4\0\3\6\1\0\2\6\1\0\1\6\5\0\1\7\2\0\3\7\5\0"+
    "\1\6\3\0\1\6\2\0\4\6\1\0\2\6\2\0\1\6\3\7\1\0\2\7\1\0\5\6\2\7\1\0\3\7\2\0\1"+
    "\7\2\0\3\6\1\7\2\0\1\6\1\0\1\7\4\6\5\0\3\7\3\0\2\7\1\6\1\0\1\6\3\0\4\7\2\6"+
    "\1\0\1\6\1\7\3\0\1\6\3\0\2\6\3\0\5\7\1\6\4\7\3\0\6\7\1\6\6\7\3\0\1\7\1\0\2"+
    "\7\1\0\1\7\2\6\3\0\2\7\6\0\5\7\3\0\6\7\2\0\3\7\2\0\4\7\4\0\1\6\2\0\2\6\2\0"+
    "\4\6\1\0\4\6\1\0\1\6\1\0\6\6\2\0\5\6\1\0\4\6\1\0\4\6\2\0\2\7\4\0\1\7\3\0\1"+
    "\7\2\0\7\7\1\0\2\7\1\0\2\7\1\0\1\6\1\0\1\6\5\0\1\6\1\0\1\6\1\0\3\6\1\0\3\6"+
    "\1\0\3\6");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\41\0\1\1\2\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\4\4\1\10\1\11\1\1\1\12\1\13\1\14"+
    "\2\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\2\26\1\27\1\30\1\31\1\32\1\31\1\33"+
    "\1\34\1\35\1\36\1\37\3\40\2\41\1\42\1\43"+
    "\1\44\1\45\3\46\1\47\1\50\3\51\1\1\1\52"+
    "\1\53\2\2\1\3\2\54\1\55\1\56\2\57\2\1"+
    "\1\57\1\1\2\2\1\3\2\60\2\61\2\1\2\62"+
    "\1\63\1\64\1\65\1\66\2\2\1\3\2\67\1\70"+
    "\1\71\1\72\2\2\2\73\1\74\1\0\4\4\1\15"+
    "\1\31\1\40\1\46\1\51\3\0\2\75\1\76\5\0"+
    "\3\57\2\0\1\57\2\0\1\57\3\0\1\57\2\0"+
    "\2\77\4\0\2\61\1\0\1\61\1\0\1\61\2\0"+
    "\2\100\10\0\4\4\1\31\1\51\3\0\2\54\2\0"+
    "\1\57\2\0\1\57\1\0\2\74\3\57\3\0\2\57"+
    "\2\0\1\57\5\0\2\60\2\0\1\74\1\61\7\0"+
    "\2\67\1\0\2\73\1\74\2\4\1\101\1\4\1\31"+
    "\1\0\2\75\1\54\1\0\1\57\2\0\3\74\1\57"+
    "\2\74\1\57\1\74\2\0\1\57\3\0\1\57\1\0"+
    "\1\57\4\0\2\77\1\60\2\74\3\0\2\100\1\67"+
    "\1\73\2\4\1\31\1\75\1\0\2\57\1\74\1\57"+
    "\2\74\6\0\1\77\2\0\1\100\2\4\1\31\1\57"+
    "\1\74\2\57\1\4\1\102\1\31\1\57\1\4\1\31"+
    "\1\4\1\31\1\4\1\31\2\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[336];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\230\0\276\0\344\0\u010a"+
    "\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u01ee\0\u0214\0\u023a"+
    "\0\u0260\0\u0286\0\u02ac\0\u02d2\0\u02f8\0\u031e\0\u0344\0\u036a"+
    "\0\u0390\0\u03b6\0\u03dc\0\u0402\0\u0428\0\u044e\0\u0474\0\u049a"+
    "\0\u04c0\0\u04e6\0\u04e6\0\u050c\0\u0532\0\u0558\0\u057e\0\u04e6"+
    "\0\u04e6\0\u04e6\0\u05a4\0\u05ca\0\u05f0\0\u0616\0\u04e6\0\u04e6"+
    "\0\u063c\0\u0662\0\u04e6\0\u04e6\0\u0688\0\u06ae\0\u04e6\0\u04e6"+
    "\0\u06d4\0\u06fa\0\u04e6\0\u04e6\0\u04e6\0\u04e6\0\u04e6\0\u0720"+
    "\0\u0746\0\u04e6\0\u076c\0\u04e6\0\u0792\0\u07b8\0\u07de\0\u04e6"+
    "\0\u0804\0\u04e6\0\u082a\0\u0850\0\u0876\0\u04e6\0\u089c\0\u04e6"+
    "\0\u08c2\0\u04e6\0\u04e6\0\u08e8\0\u090e\0\u0934\0\u095a\0\u04e6"+
    "\0\u0980\0\u09a6\0\u09cc\0\u09f2\0\u04e6\0\u04e6\0\u0a18\0\u0a3e"+
    "\0\u0a64\0\u0a8a\0\u0ab0\0\u04e6\0\u04e6\0\u0ad6\0\u0afc\0\u0b22"+
    "\0\u0b48\0\u0b6e\0\u0b94\0\u0bba\0\u0be0\0\u0c06\0\u0c2c\0\u0c52"+
    "\0\u0c78\0\u0c9e\0\u0cc4\0\u0cea\0\u04e6\0\u0d10\0\u04e6\0\u0d36"+
    "\0\u04e6\0\u04e6\0\u0d5c\0\u0d82\0\u0da8\0\u0dce\0\u0df4\0\u04e6"+
    "\0\u0e1a\0\u0e40\0\u0e66\0\u0e8c\0\u0eb2\0\u0ed8\0\u0efe\0\u0f24"+
    "\0\u0f4a\0\u0f70\0\u0f96\0\u0fbc\0\u0fe2\0\u1008\0\u102e\0\u1054"+
    "\0\u107a\0\u10a0\0\u0a18\0\u10c6\0\u10ec\0\u1112\0\u04e6\0\u1138"+
    "\0\u115e\0\u1184\0\u11aa\0\u0b48\0\u11d0\0\u11f6\0\u121c\0\u0b22"+
    "\0\u1242\0\u1268\0\u128e\0\u12b4\0\u12da\0\u0b94\0\u1300\0\u1326"+
    "\0\u134c\0\u0bba\0\u1372\0\u1398\0\u13be\0\u13e4\0\u140a\0\u1430"+
    "\0\u1456\0\u147c\0\u14a2\0\u0cc4\0\u14c8\0\u0cea\0\u14ee\0\u0d5c"+
    "\0\u1514\0\u153a\0\u1560\0\u1586\0\u15ac\0\u15d2\0\u0e66\0\u15f8"+
    "\0\u161e\0\u1644\0\u166a\0\u1690\0\u16b6\0\u16dc\0\u1702\0\u1728"+
    "\0\u04e6\0\u174e\0\u1774\0\u179a\0\u17c0\0\u1184\0\u17e6\0\u12da"+
    "\0\u180c\0\u1832\0\u1858\0\u187e\0\u18a4\0\u18ca\0\u18f0\0\u1916"+
    "\0\u193c\0\u1962\0\u1962\0\u1988\0\u19ae\0\u19d4\0\u19fa\0\u1a20"+
    "\0\u1a46\0\u1a6c\0\u19fa\0\u1a92\0\u1ab8\0\u1ade\0\u1b04\0\u1b2a"+
    "\0\u1430\0\u1b50\0\u147c\0\u1b76\0\u1b9c\0\u14c8\0\u1bc2\0\u14ee"+
    "\0\u1be8\0\u1c0e\0\u1c34\0\u1c5a\0\u1c80\0\u15d2\0\u1ca6\0\u1ccc"+
    "\0\u1644\0\u04e6\0\u1cf2\0\u1d18\0\u057e\0\u1d3e\0\u1d64\0\u1d8a"+
    "\0\u1db0\0\u1774\0\u04e6\0\u1dd6\0\u18a4\0\u1dfc\0\u187e\0\u1e22"+
    "\0\u1e48\0\u1e6e\0\u1e94\0\u1eba\0\u1ee0\0\u1f06\0\u1f2c\0\u1f52"+
    "\0\u1f78\0\u19ae\0\u1f9e\0\u1fc4\0\u1fea\0\u1a20\0\u2010\0\u2036"+
    "\0\u1a6c\0\u205c\0\u2082\0\u20a8\0\u20ce\0\u1ade\0\u04e6\0\u20f4"+
    "\0\u1b9c\0\u211a\0\u2140\0\u2166\0\u218c\0\u1c34\0\u04e6\0\u04e6"+
    "\0\u21b2\0\u21d8\0\u21fe\0\u04e6\0\u2224\0\u224a\0\u1e6e\0\u2270"+
    "\0\u1f2c\0\u2296\0\u1f06\0\u22bc\0\u22e2\0\u2308\0\u2036\0\u232e"+
    "\0\u2354\0\u04e6\0\u237a\0\u23a0\0\u04e6\0\u23c6\0\u23ec\0\u2412"+
    "\0\u04e6\0\u2438\0\u1242\0\u1300\0\u245e\0\u057e\0\u2484\0\u0efe"+
    "\0\u24aa\0\u24d0\0\u24f6\0\u251c\0\u2542\0\u2568\0\u057e\0\u076c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[336];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\42\1\43\1\44\1\45\1\46\1\42\1\47\1\42"+
    "\1\50\2\42\1\45\1\51\1\42\1\52\3\42\1\53"+
    "\1\47\1\54\3\47\1\55\1\56\1\42\4\47\1\57"+
    "\2\42\1\60\1\42\2\0\1\42\1\43\1\44\1\45"+
    "\1\61\1\42\1\62\2\42\1\63\1\64\1\45\6\42"+
    "\10\62\1\42\4\62\5\42\2\0\4\65\1\66\4\65"+
    "\1\67\3\65\1\70\30\65\1\42\1\43\1\44\1\45"+
    "\1\61\1\42\1\71\4\42\1\45\6\42\10\71\1\42"+
    "\4\71\5\42\2\0\1\42\1\43\1\44\1\45\1\61"+
    "\1\42\1\72\4\42\1\45\3\42\1\73\1\74\1\42"+
    "\10\72\1\42\4\72\5\42\2\0\1\42\1\43\1\44"+
    "\1\45\1\61\1\42\1\47\4\42\1\45\1\42\1\75"+
    "\4\42\10\47\1\42\4\47\5\42\2\0\1\42\1\43"+
    "\1\44\1\45\1\61\1\42\1\62\4\42\1\45\3\42"+
    "\1\76\2\42\10\62\1\42\4\62\5\42\2\0\1\42"+
    "\1\77\1\100\1\45\1\61\1\42\1\101\4\42\1\45"+
    "\6\42\10\101\1\42\4\101\5\42\2\0\1\42\1\43"+
    "\1\44\1\45\1\61\1\42\1\47\1\42\1\50\2\42"+
    "\1\45\5\42\1\102\1\53\7\47\1\42\4\47\5\42"+
    "\2\0\1\42\1\43\1\44\1\45\1\61\1\42\1\103"+
    "\1\42\1\50\1\42\1\104\1\45\6\42\1\105\7\103"+
    "\1\42\4\103\5\42\2\0\1\42\1\43\1\44\1\45"+
    "\1\61\1\42\1\106\4\42\1\45\6\42\10\106\1\42"+
    "\4\106\5\42\2\0\1\42\1\43\1\44\1\45\1\61"+
    "\1\42\2\107\3\42\1\45\6\42\10\107\1\42\4\107"+
    "\5\42\1\0\1\107\1\42\1\43\1\44\1\45\1\61"+
    "\5\42\1\110\1\45\30\42\2\0\1\42\1\43\1\44"+
    "\1\45\1\61\1\42\1\111\4\42\1\45\6\42\10\111"+
    "\1\42\4\111\5\42\2\0\1\42\1\43\1\44\1\45"+
    "\1\61\1\42\1\72\4\42\1\45\3\42\1\73\1\42"+
    "\1\112\10\72\1\42\4\72\5\42\2\0\1\113\1\43"+
    "\1\44\1\114\1\115\5\113\1\64\1\45\32\113\1\42"+
    "\1\43\1\44\1\45\1\61\1\116\1\117\4\42\1\45"+
    "\6\42\10\117\1\42\4\117\1\42\1\120\3\42\2\0"+
    "\1\42\1\43\1\44\1\45\1\61\1\42\1\121\4\42"+
    "\1\45\5\42\1\122\10\121\1\42\4\121\2\42\1\123"+
    "\2\42\2\0\1\124\1\43\1\44\1\125\1\126\4\124"+
    "\2\42\1\45\4\124\2\42\17\124\1\42\4\124\1\42"+
    "\1\43\1\44\1\45\1\61\1\42\1\127\4\42\1\45"+
    "\2\42\1\130\3\42\10\127\1\42\4\127\2\42\1\123"+
    "\2\42\2\0\1\131\1\43\1\44\1\132\1\133\4\131"+
    "\1\134\1\64\1\45\4\131\1\135\1\136\17\131\1\123"+
    "\4\131\1\42\1\137\1\140\1\141\1\61\1\142\1\143"+
    "\1\42\1\142\1\42\1\144\1\141\1\145\5\42\10\143"+
    "\1\42\4\143\5\42\2\0\1\146\1\43\1\44\1\45"+
    "\1\147\4\146\1\150\1\146\1\45\23\146\1\151\1\152"+
    "\1\146\1\151\1\153\2\146\1\42\1\154\1\155\1\156"+
    "\1\61\1\157\1\160\1\42\1\157\2\42\1\156\1\145"+
    "\5\42\10\160\1\42\4\160\5\42\2\0\1\161\1\43"+
    "\1\44\1\45\1\162\4\161\1\163\1\161\1\45\23\161"+
    "\1\42\2\161\1\42\1\164\2\161\1\42\1\43\1\44"+
    "\1\45\1\61\6\42\1\45\30\42\2\0\1\42\1\43"+
    "\1\44\1\45\1\61\1\165\1\166\4\42\1\45\6\42"+
    "\10\166\1\42\4\166\1\42\1\167\3\42\2\0\1\42"+
    "\1\43\1\44\1\45\1\61\1\42\1\170\4\42\1\45"+
    "\6\42\10\170\1\42\4\170\5\42\2\0\1\42\1\43"+
    "\1\44\1\45\1\61\1\42\1\72\4\42\1\45\3\42"+
    "\1\73\1\42\1\171\10\72\1\42\4\72\2\42\1\172"+
    "\2\42\2\0\1\42\1\173\1\174\1\175\1\61\1\176"+
    "\1\177\1\42\1\176\1\42\1\200\1\175\6\42\10\177"+
    "\1\42\4\177\5\42\2\0\1\42\1\43\1\44\1\45"+
    "\1\61\1\42\1\201\4\42\1\45\6\42\10\201\1\42"+
    "\4\201\5\42\2\0\1\42\1\43\1\44\1\45\1\61"+
    "\1\42\1\202\4\42\1\45\3\42\1\73\2\42\10\202"+
    "\1\42\4\202\5\42\2\0\1\42\1\203\1\204\1\45"+
    "\1\61\1\205\1\206\1\42\1\205\2\42\1\45\6\42"+
    "\10\206\1\42\4\206\5\42\51\0\1\43\47\0\1\45"+
    "\7\0\1\45\36\0\1\207\1\210\46\0\1\47\13\0"+
    "\10\47\1\0\4\47\15\0\1\47\13\0\1\47\1\211"+
    "\6\47\1\0\4\47\15\0\1\47\13\0\6\47\1\212"+
    "\1\47\1\0\4\47\15\0\1\47\13\0\5\47\1\213"+
    "\2\47\1\0\4\47\15\0\1\47\13\0\10\47\1\0"+
    "\1\214\3\47\13\0\1\207\47\0\2\62\12\0\10\62"+
    "\1\0\4\62\6\0\1\62\11\65\1\0\3\65\1\0"+
    "\34\65\1\215\4\65\1\0\3\65\1\0\30\65\6\0"+
    "\2\71\12\0\10\71\1\0\4\71\6\0\1\71\6\0"+
    "\2\72\12\0\10\72\1\0\4\72\6\0\1\72\1\0"+
    "\1\77\52\0\2\101\12\0\10\101\1\0\4\101\6\0"+
    "\1\101\6\0\1\103\13\0\10\103\1\0\4\103\15\0"+
    "\1\103\13\0\1\103\1\216\6\103\1\0\4\103\15\0"+
    "\2\106\7\0\1\106\2\0\15\106\6\0\1\106\6\0"+
    "\2\107\12\0\10\107\1\0\4\107\6\0\1\107\6\0"+
    "\2\111\12\0\10\111\1\0\4\111\6\0\1\111\1\113"+
    "\2\0\7\113\2\0\33\113\2\0\1\114\6\113\1\0"+
    "\1\45\33\113\2\0\1\113\1\217\5\113\2\0\32\113"+
    "\6\0\2\117\7\0\1\117\2\0\15\117\6\0\1\117"+
    "\6\0\1\121\13\0\10\121\1\0\4\121\7\0\1\124"+
    "\2\0\6\124\3\0\4\124\2\0\17\124\1\0\5\124"+
    "\2\0\1\125\5\124\2\0\1\45\4\124\2\0\17\124"+
    "\1\0\5\124\2\0\1\124\1\220\4\124\3\0\4\124"+
    "\2\0\17\124\1\0\4\124\6\0\1\127\13\0\10\127"+
    "\1\0\4\127\7\0\1\131\2\0\6\131\3\0\4\131"+
    "\2\0\17\131\1\0\5\131\2\0\1\132\5\131\2\0"+
    "\1\45\4\131\2\0\17\131\1\0\5\131\2\0\1\131"+
    "\1\221\4\131\3\0\4\131\2\0\17\131\1\0\4\131"+
    "\1\222\2\0\6\222\1\0\6\222\1\0\25\222\1\0"+
    "\2\223\1\224\1\0\1\225\1\226\1\0\1\225\1\0"+
    "\1\227\1\224\1\227\5\0\10\226\1\0\4\226\10\0"+
    "\1\137\1\223\1\224\1\0\1\225\1\226\1\0\1\225"+
    "\1\0\1\227\1\224\1\227\5\0\10\226\1\0\4\226"+
    "\10\0\2\230\1\141\6\0\1\227\1\141\1\227\34\0"+
    "\1\231\6\0\1\232\1\231\35\0\1\231\2\0\2\143"+
    "\2\0\1\232\1\231\6\0\10\143\1\0\4\143\6\0"+
    "\1\143\1\146\2\0\1\233\5\146\1\234\1\146\1\233"+
    "\5\146\1\235\15\146\1\234\1\236\1\146\2\234\3\146"+
    "\2\0\1\233\1\237\4\146\1\234\1\146\1\233\5\146"+
    "\1\235\15\146\1\234\1\236\1\146\2\234\2\146\1\240"+
    "\2\0\1\241\5\240\1\242\1\240\1\241\24\240\1\243"+
    "\5\240\1\234\3\0\7\234\1\0\24\234\1\244\5\234"+
    "\1\152\2\0\1\233\5\152\1\0\1\152\1\233\5\152"+
    "\1\245\15\152\1\0\2\152\2\0\2\152\1\246\2\0"+
    "\1\247\7\246\1\247\24\246\1\250\2\246\1\251\2\246"+
    "\1\0\2\252\1\253\1\0\1\254\1\255\1\0\1\254"+
    "\2\0\1\253\1\227\5\0\10\255\1\0\4\255\10\0"+
    "\1\154\1\252\1\253\1\0\1\254\1\255\1\0\1\254"+
    "\2\0\1\253\1\227\5\0\10\255\1\0\4\255\10\0"+
    "\2\256\1\156\7\0\1\156\1\227\34\0\1\257\6\0"+
    "\1\260\1\257\35\0\1\257\2\0\2\160\2\0\1\260"+
    "\1\257\6\0\10\160\1\0\4\160\6\0\1\160\1\161"+
    "\2\0\1\261\5\161\1\0\1\161\1\261\5\161\1\262"+
    "\15\161\1\0\2\161\2\0\3\161\2\0\1\261\1\263"+
    "\4\161\1\0\1\161\1\261\5\161\1\262\15\161\1\0"+
    "\2\161\2\0\2\161\1\264\2\0\6\264\1\265\34\264"+
    "\1\266\2\0\40\266\1\267\2\266\6\0\2\166\7\0"+
    "\1\166\2\0\10\166\1\0\4\166\6\0\1\166\6\0"+
    "\2\170\12\0\10\170\1\0\4\170\6\0\1\170\1\0"+
    "\2\270\1\271\1\0\1\272\1\273\1\0\1\272\1\0"+
    "\1\227\1\271\6\0\10\273\1\0\4\273\10\0\1\173"+
    "\1\270\1\271\1\0\1\272\1\273\1\0\1\272\1\0"+
    "\1\227\1\271\6\0\10\273\1\0\4\273\10\0\2\274"+
    "\1\175\6\0\1\227\1\175\35\0\1\275\6\0\1\276"+
    "\1\275\35\0\1\275\2\0\2\177\2\0\1\276\1\275"+
    "\6\0\10\177\1\0\4\177\6\0\1\177\6\0\2\201"+
    "\12\0\10\201\1\0\4\201\6\0\1\201\6\0\2\202"+
    "\12\0\10\202\1\0\4\202\6\0\1\202\1\0\2\277"+
    "\1\300\1\0\1\254\1\255\1\0\1\254\2\0\1\300"+
    "\6\0\10\255\1\0\4\255\10\0\1\203\1\277\1\300"+
    "\1\0\1\254\1\255\1\0\1\254\2\0\1\300\6\0"+
    "\10\255\1\0\4\255\12\0\1\301\6\0\1\302\1\301"+
    "\35\0\1\301\2\0\2\206\2\0\1\302\1\301\6\0"+
    "\10\206\1\0\4\206\6\0\1\206\1\207\2\0\43\207"+
    "\5\210\1\303\40\210\6\0\1\47\13\0\2\47\1\304"+
    "\5\47\1\0\4\47\15\0\1\47\13\0\7\47\1\305"+
    "\1\0\4\47\15\0\1\47\13\0\1\306\7\47\1\0"+
    "\4\47\15\0\1\47\13\0\6\47\1\307\1\47\1\0"+
    "\4\47\7\0\1\215\2\65\6\215\1\207\3\215\1\207"+
    "\30\215\6\0\1\103\13\0\2\103\1\310\5\103\1\0"+
    "\4\103\7\0\1\217\2\0\7\217\2\207\32\217\1\220"+
    "\2\0\6\220\3\207\4\220\2\207\17\220\1\207\4\220"+
    "\1\221\2\0\6\221\3\207\4\221\2\207\17\221\1\207"+
    "\4\221\1\222\2\0\6\222\1\311\6\222\1\0\25\222"+
    "\1\0\2\230\1\224\1\0\1\225\1\226\1\0\1\225"+
    "\1\0\1\227\1\224\1\227\5\0\10\226\1\0\4\226"+
    "\12\0\1\312\6\0\1\313\1\312\35\0\1\312\2\0"+
    "\2\226\2\0\1\313\1\312\6\0\10\226\1\0\4\226"+
    "\6\0\1\226\1\0\3\230\6\0\1\227\1\230\1\227"+
    "\34\0\1\231\5\0\1\314\1\232\1\231\32\0\1\315"+
    "\2\0\1\316\7\315\1\232\32\315\3\0\1\233\7\0"+
    "\1\233\5\0\1\317\24\0\1\146\2\0\1\320\5\146"+
    "\1\234\1\146\1\320\5\146\1\235\15\146\1\234\1\236"+
    "\1\146\2\234\2\146\1\321\2\0\1\322\5\321\1\323"+
    "\1\321\1\322\5\321\1\324\15\321\1\325\2\321\2\325"+
    "\2\321\1\237\2\0\1\326\5\237\1\327\1\237\1\326"+
    "\5\237\1\330\15\237\1\327\1\331\1\237\2\327\2\237"+
    "\1\241\2\0\6\241\1\332\34\241\1\234\2\0\1\333"+
    "\7\234\1\333\5\234\1\334\16\234\1\244\5\234\1\335"+
    "\2\0\6\335\1\336\34\335\1\325\2\0\6\325\1\323"+
    "\34\325\1\152\2\0\1\320\5\152\1\0\1\152\1\320"+
    "\5\152\1\245\15\152\1\0\2\152\2\0\2\152\1\247"+
    "\2\0\40\247\1\337\2\247\1\340\2\0\6\340\1\341"+
    "\31\340\1\342\2\340\1\234\2\0\1\343\7\234\1\343"+
    "\5\234\1\344\16\234\1\244\5\234\1\0\2\256\1\253"+
    "\1\0\1\254\1\255\1\0\1\254\2\0\1\253\1\227"+
    "\5\0\10\255\1\0\4\255\12\0\1\345\6\0\1\346"+
    "\1\345\35\0\1\345\2\0\2\255\2\0\1\346\1\345"+
    "\6\0\10\255\1\0\4\255\6\0\1\255\1\0\3\256"+
    "\7\0\1\256\1\227\34\0\1\257\5\0\1\347\1\260"+
    "\1\257\32\0\1\350\2\0\1\351\7\350\1\260\32\350"+
    "\3\0\1\261\7\0\1\261\5\0\1\352\24\0\1\161"+
    "\2\0\1\353\5\161\1\0\1\161\1\353\5\161\1\262"+
    "\15\161\1\0\2\161\2\0\2\161\1\263\2\0\1\354"+
    "\5\263\1\207\1\263\1\354\5\263\1\355\15\263\1\207"+
    "\2\263\2\207\2\263\3\0\1\356\7\0\1\356\5\0"+
    "\1\357\27\0\1\360\7\0\1\360\5\0\1\361\25\0"+
    "\2\274\1\271\1\0\1\272\1\273\1\0\1\272\1\0"+
    "\1\227\1\271\6\0\10\273\1\0\4\273\12\0\1\362"+
    "\6\0\1\363\1\362\35\0\1\362\2\0\2\273\2\0"+
    "\1\363\1\362\6\0\10\273\1\0\4\273\6\0\1\273"+
    "\1\0\3\274\6\0\1\227\1\274\35\0\1\275\5\0"+
    "\1\364\1\276\1\275\32\0\1\365\2\0\1\366\7\365"+
    "\1\276\32\365\3\0\1\300\1\0\1\254\1\255\1\0"+
    "\1\254\2\0\1\300\6\0\10\255\1\0\4\255\12\0"+
    "\1\301\5\0\1\367\1\302\1\301\32\0\1\370\2\0"+
    "\1\371\7\370\1\302\32\370\4\210\1\372\1\303\40\210"+
    "\6\0\1\47\13\0\3\47\1\373\4\47\1\0\4\47"+
    "\15\0\1\47\13\0\3\47\1\374\4\47\1\0\4\47"+
    "\15\0\1\47\13\0\7\47\1\375\1\0\4\47\15\0"+
    "\1\47\13\0\7\47\1\376\1\0\4\47\15\0\1\103"+
    "\13\0\3\103\1\377\4\103\1\0\4\103\12\0\1\312"+
    "\5\0\1\u0100\1\313\1\312\32\0\1\u0101\2\0\1\u0102"+
    "\7\u0101\1\313\32\u0101\11\314\1\u0103\34\314\1\315\2\0"+
    "\10\315\1\0\32\315\1\152\2\0\1\317\5\152\1\0"+
    "\1\152\1\317\23\152\1\0\2\152\2\0\2\152\1\321"+
    "\2\0\1\322\5\321\1\0\1\321\1\322\5\321\1\324"+
    "\15\321\1\325\2\321\2\325\2\321\1\325\2\0\1\322"+
    "\5\325\1\0\1\325\1\322\5\325\1\u0104\17\325\1\u0105"+
    "\4\325\1\u0106\2\0\6\u0106\1\0\34\u0106\1\321\2\0"+
    "\1\u0107\5\321\1\0\1\321\1\u0107\5\321\1\324\15\321"+
    "\1\325\2\321\2\325\2\321\1\325\2\0\6\325\1\0"+
    "\27\325\1\u0105\4\325\1\207\2\0\1\326\7\207\1\326"+
    "\5\207\1\u0108\24\207\1\327\2\0\1\207\7\327\1\207"+
    "\24\327\1\u0109\5\327\1\237\2\0\1\u010a\5\237\1\327"+
    "\1\237\1\u010a\5\237\1\330\15\237\1\327\1\331\1\237"+
    "\2\327\2\237\1\u010b\2\0\1\u010c\5\u010b\1\u010d\1\u010b"+
    "\1\u010c\5\u010b\1\u010e\15\u010b\1\u010f\2\u010b\2\u010f\2\u010b"+
    "\3\0\1\333\7\0\1\333\5\0\1\u0110\24\0\1\234"+
    "\2\u0111\1\u0110\5\234\1\240\1\234\1\u0110\24\234\1\244"+
    "\5\234\1\335\2\0\6\335\1\332\27\335\1\u0112\4\335"+
    "\1\u0106\2\0\1\u0113\5\u0106\1\0\1\u0106\1\u0113\5\u0106"+
    "\1\u0114\24\u0106\3\0\1\343\7\0\1\343\5\0\1\u0115"+
    "\24\0\1\340\2\0\6\340\1\247\27\340\1\u0116\1\340"+
    "\1\342\2\340\1\u0117\2\0\6\u0117\1\247\31\u0117\1\u0118"+
    "\2\u0117\1\325\2\0\1\u0119\5\325\1\0\1\325\1\u0119"+
    "\5\325\1\u011a\17\325\1\u0105\4\325\1\234\2\u011b\1\u0115"+
    "\7\234\1\u0115\24\234\1\244\2\234\1\246\2\234\3\0"+
    "\1\345\5\0\1\u011c\1\346\1\345\32\0\1\u011d\2\0"+
    "\1\u011e\7\u011d\1\346\32\u011d\11\347\1\u011f\34\347\1\350"+
    "\2\0\10\350\1\0\32\350\1\161\2\0\1\352\5\161"+
    "\1\0\1\161\1\352\23\161\1\0\2\161\2\0\2\161"+
    "\1\207\2\0\1\354\7\207\1\354\5\207\1\u0120\24\207"+
    "\1\263\2\0\1\u0121\5\263\1\207\1\263\1\u0121\5\263"+
    "\1\355\15\263\1\207\2\263\2\207\2\263\1\0\2\u0122"+
    "\1\357\5\0\1\264\1\0\1\357\33\0\2\u0123\1\361"+
    "\7\0\1\361\27\0\1\266\5\0\1\362\5\0\1\u0124"+
    "\1\363\1\362\32\0\1\u0125\2\0\1\u0126\7\u0125\1\363"+
    "\32\u0125\11\364\1\u0127\34\364\1\365\2\0\10\365\1\0"+
    "\32\365\11\367\1\u0128\34\367\1\370\2\0\10\370\1\0"+
    "\32\370\6\0\1\47\13\0\4\47\1\u0129\3\47\1\0"+
    "\4\47\15\0\1\47\13\0\6\47\1\55\1\47\1\0"+
    "\4\47\15\0\1\47\13\0\10\47\1\0\1\47\1\u012a"+
    "\2\47\15\0\1\103\13\0\4\103\1\u012b\3\103\1\0"+
    "\4\103\7\0\11\u0100\1\u012c\34\u0100\1\u0101\2\0\10\u0101"+
    "\1\0\32\u0101\1\321\2\0\1\u0104\5\321\1\0\1\321"+
    "\1\u0104\23\321\1\325\2\321\2\325\2\321\1\u0106\2\0"+
    "\6\u0106\1\u012d\34\u0106\1\u012e\2\0\1\u0108\5\u012e\1\207"+
    "\1\u012e\1\u0108\23\u012e\1\207\2\u012e\2\207\2\u012e\1\u010f"+
    "\2\0\6\u010f\1\u010d\34\u010f\1\u012e\2\0\1\u010a\5\u012e"+
    "\1\207\1\u012e\1\u010a\5\u012e\1\u012f\15\u012e\1\207\2\u012e"+
    "\2\207\2\u012e\1\u010b\2\0\1\u010c\5\u010b\1\207\1\u010b"+
    "\1\u010c\5\u010b\1\u010e\15\u010b\1\u010f\2\u010b\2\u010f\2\u010b"+
    "\1\u010f\2\0\1\u010c\5\u010f\1\207\1\u010f\1\u010c\5\u010f"+
    "\1\u0130\17\u010f\1\u0131\4\u010f\1\u0132\2\0\6\u0132\1\207"+
    "\34\u0132\1\u010b\2\0\1\u0133\5\u010b\1\207\1\u010b\1\u0133"+
    "\5\u010b\1\u010e\15\u010b\1\u010f\2\u010b\2\u010f\2\u010b\1\u010f"+
    "\2\0\6\u010f\1\207\27\u010f\1\u0131\4\u010f\1\0\2\u0111"+
    "\1\u0110\5\0\1\241\1\0\1\u0110\33\0\2\u0111\1\u0134"+
    "\5\0\1\241\1\0\1\u0134\32\0\1\u0106\2\0\1\u0113"+
    "\5\u0106\1\u012d\1\u0106\1\u0113\5\u0106\1\u0114\25\u0106\2\u0111"+
    "\1\u0114\5\u0106\1\u0135\1\u0106\1\u0114\32\u0106\1\0\2\u011b"+
    "\1\u0115\7\0\1\u0115\27\0\1\247\2\0\1\u0117\2\0"+
    "\6\u0117\1\u0136\31\u0117\1\u0118\2\u0117\1\u0106\2\0\1\u0137"+
    "\5\u0106\1\u012d\1\u0106\1\u0137\5\u0106\1\u0138\24\u0106\1\325"+
    "\2\u011b\1\u011a\5\325\1\0\1\325\1\u011a\25\325\1\u0105"+
    "\1\325\1\340\2\325\1\0\2\u011b\1\u0139\7\0\1\u0139"+
    "\27\0\1\247\2\0\11\u011c\1\u013a\34\u011c\1\u011d\2\0"+
    "\10\u011d\1\0\32\u011d\1\263\2\0\1\u0120\5\263\1\207"+
    "\1\263\1\u0120\23\263\1\207\2\263\2\207\2\263\1\0"+
    "\2\u0122\1\u013b\5\0\1\264\1\0\1\u013b\33\0\2\u0123"+
    "\1\u013c\7\0\1\u013c\27\0\1\266\2\0\11\u0124\1\u013d"+
    "\34\u0124\1\u0125\2\0\10\u0125\1\0\32\u0125\6\0\1\47"+
    "\13\0\1\47\1\u013e\6\47\1\0\4\47\15\0\1\47"+
    "\13\0\10\47\1\0\2\47\1\u013f\1\47\15\0\1\103"+
    "\13\0\1\103\1\u0140\6\103\1\0\4\103\50\0\1\u0141"+
    "\4\0\1\u012e\2\0\1\326\5\u012e\1\207\1\u012e\1\326"+
    "\5\u012e\1\u012f\15\u012e\1\207\2\u012e\2\207\2\u012e\1\u010b"+
    "\2\0\1\u0130\5\u010b\1\207\1\u010b\1\u0130\23\u010b\1\u010f"+
    "\2\u010b\2\u010f\2\u010b\1\u0132\2\0\6\u0132\1\u0142\34\u0132"+
    "\3\0\1\u0134\5\0\1\241\1\0\1\u0134\32\0\1\241"+
    "\2\0\6\241\1\332\27\241\1\u0143\4\241\1\247\2\0"+
    "\36\247\1\u0144\1\247\1\337\2\247\1\u0106\2\u011b\1\u0138"+
    "\5\u0106\1\u012d\1\u0106\1\u0138\27\u0106\1\u0117\2\u0106\3\0"+
    "\1\u0139\7\0\1\u0139\27\0\1\247\5\0\1\u013b\5\0"+
    "\1\264\1\0\1\u013b\35\0\1\u013c\7\0\1\u013c\27\0"+
    "\1\266\10\0\1\47\13\0\5\47\1\u0145\2\47\1\0"+
    "\4\47\15\0\1\47\13\0\10\47\1\0\3\47\1\u0146"+
    "\15\0\1\103\13\0\5\103\1\u0147\2\103\1\0\4\103"+
    "\7\0\1\207\2\0\36\207\1\u0148\4\207\6\0\1\47"+
    "\13\0\2\47\1\u0149\5\47\1\0\4\47\15\0\1\103"+
    "\13\0\2\103\1\u014a\5\103\1\0\4\103\15\0\1\47"+
    "\13\0\6\47\1\u014b\1\47\1\0\4\47\15\0\1\103"+
    "\13\0\6\103\1\u014c\1\103\1\0\4\103\15\0\1\47"+
    "\13\0\7\47\1\u014d\1\0\4\47\15\0\1\103\13\0"+
    "\7\103\1\u014e\1\0\4\103\15\0\1\47\13\0\3\47"+
    "\1\u014f\4\47\1\0\4\47\15\0\1\103\13\0\3\103"+
    "\1\u0150\4\103\1\0\4\103\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9614];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\41\0\2\11\4\1\3\11\4\1\2\11\2\1\2\11"+
    "\2\1\2\11\2\1\5\11\2\1\1\11\1\1\1\11"+
    "\3\1\1\11\1\1\1\11\3\1\1\11\1\1\1\11"+
    "\1\1\2\11\4\1\1\11\4\1\2\11\5\1\2\11"+
    "\17\1\1\11\1\1\1\11\1\1\2\11\5\1\1\11"+
    "\7\1\1\0\11\1\3\0\2\1\1\11\5\0\3\1"+
    "\2\0\1\1\2\0\1\1\3\0\1\1\2\0\2\1"+
    "\4\0\2\1\1\0\1\1\1\0\1\1\2\0\2\1"+
    "\10\0\5\1\1\11\3\0\2\1\2\0\1\1\2\0"+
    "\1\1\1\0\5\1\3\0\2\1\2\0\1\1\5\0"+
    "\2\1\2\0\2\1\7\0\2\1\1\0\2\1\1\11"+
    "\5\1\1\0\2\1\1\11\1\0\1\1\2\0\10\1"+
    "\2\0\1\1\3\0\1\1\1\0\1\1\4\0\2\1"+
    "\1\11\2\1\3\0\2\1\2\11\3\1\1\11\1\0"+
    "\6\1\6\0\1\11\2\0\1\11\3\1\1\11\17\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[336];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CndLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 67: break;
          case 2: 
            { yybegin(YYINITIAL); return CndTypes.CRLF;
            } 
            // fall through
          case 68: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 69: break;
          case 4: 
            { yybegin(OPTIONS); return CndTypes.OPTION;
            } 
            // fall through
          case 70: break;
          case 5: 
            { yybegin(OPTION_REF); return CndTypes.OPTION;
            } 
            // fall through
          case 71: break;
          case 6: 
            { yybegin(NAMESPACE); return CndTypes.LEFT_ANGLE_BRACKET;
            } 
            // fall through
          case 72: break;
          case 7: 
            { yybegin(NODETYPE_NAMESPACE); return CndTypes.LEFT_BRACKET;
            } 
            // fall through
          case 73: break;
          case 8: 
            { yybegin(PROPERTY); return CndTypes.MINUS;
            } 
            // fall through
          case 74: break;
          case 9: 
            { yybegin(NODE); return CndTypes.PLUS;
            } 
            // fall through
          case 75: break;
          case 10: 
            { return CndTypes.NAMESPACE_NAME;
            } 
            // fall through
          case 76: break;
          case 11: 
            { yybegin(NAMESPACE_URI); return CndTypes.SINGLE_QUOTE;
            } 
            // fall through
          case 77: break;
          case 12: 
            { return CndTypes.EQUAL;
            } 
            // fall through
          case 78: break;
          case 13: 
            { return CndTypes.NAMESPACE_URI;
            } 
            // fall through
          case 79: break;
          case 14: 
            { return CndTypes.SINGLE_QUOTE;
            } 
            // fall through
          case 80: break;
          case 15: 
            { yybegin(YYINITIAL); return CndTypes.RIGHT_ANGLE_BRACKET;
            } 
            // fall through
          case 81: break;
          case 16: 
            { yybegin(NODETYPE); return CndTypes.NAMESPACE_NAME;
            } 
            // fall through
          case 82: break;
          case 17: 
            { return CndTypes.NODE_TYPE_NAME;
            } 
            // fall through
          case 83: break;
          case 18: 
            { return CndTypes.COLON;
            } 
            // fall through
          case 84: break;
          case 19: 
            { yybegin(NODETYPE_DONE); return CndTypes.RIGHT_BRACKET;
            } 
            // fall through
          case 85: break;
          case 20: 
            { yybegin(SUPER_TYPE_NAMESPACE); return CndTypes.RIGHT_ONLY_ANGLE_BRACKET;
            } 
            // fall through
          case 86: break;
          case 21: 
            { yybegin(SUPER_TYPE_NAME); return CndTypes.COLON;
            } 
            // fall through
          case 87: break;
          case 22: 
            { yybegin(YYINITIAL); yypushback(yylength()); return CndTypes.NODE_TYPE_NAME;
            } 
            // fall through
          case 88: break;
          case 23: 
            { yybegin(AFTER_SUPER_TYPE_NAME); return CndTypes.NODE_TYPE_NAME;
            } 
            // fall through
          case 89: break;
          case 24: 
            { yybegin(SUPER_TYPE_NAMESPACE); return CndTypes.COMMA;
            } 
            // fall through
          case 90: break;
          case 25: 
            { return CndTypes.OPTION;
            } 
            // fall through
          case 91: break;
          case 26: 
            { yybegin(OPTION_VALUE); return CndTypes.EQUAL;
            } 
            // fall through
          case 92: break;
          case 27: 
            { yybegin(OPTIONS); return CndTypes.PROPERTY_NAME;
            } 
            // fall through
          case 93: break;
          case 28: 
            { yybegin(OPTIONS); return CndTypes.OPTION_VALUE;
            } 
            // fall through
          case 94: break;
          case 29: 
            { yybegin(EXTEND_NAMESPACE); return CndTypes.EQUAL;
            } 
            // fall through
          case 95: break;
          case 30: 
            { yybegin(EXTEND); return CndTypes.NAMESPACE_NAME;
            } 
            // fall through
          case 96: break;
          case 31: 
            { yybegin(EXTEND_NAMESPACE); return CndTypes.COMMA;
            } 
            // fall through
          case 97: break;
          case 32: 
            { return CndTypes.ITEMTYPE_TYPE;
            } 
            // fall through
          case 98: break;
          case 33: 
            { return CndTypes.PROPERTY_NAME;
            } 
            // fall through
          case 99: break;
          case 34: 
            { yybegin(PROPERTY_TYPE); return CndTypes.LEFT_PARENTHESIS;
            } 
            // fall through
          case 100: break;
          case 35: 
            { return CndTypes.PROPERTY_TYPE;
            } 
            // fall through
          case 101: break;
          case 36: 
            { yybegin(PROPERTY_MASK); return CndTypes.COMMA;
            } 
            // fall through
          case 102: break;
          case 37: 
            { yybegin(PROPERTY_DEFAULT); return CndTypes.RIGHT_PARENTHESIS;
            } 
            // fall through
          case 103: break;
          case 38: 
            { yybegin(PROPERTY_MASK_OPTION); return CndTypes.PROPERTY_MASK_OPTION;
            } 
            // fall through
          case 104: break;
          case 39: 
            { return CndTypes.PROPERTY_MASK;
            } 
            // fall through
          case 105: break;
          case 40: 
            { yybegin(PROPERTY_MASK_OPTION_NAME); return CndTypes.LEFT_BRACKET;
            } 
            // fall through
          case 106: break;
          case 41: 
            { return CndTypes.PROPERTY_MASK_OPTION_VALUE;
            } 
            // fall through
          case 107: break;
          case 42: 
            { return CndTypes.RIGHT_BRACKET;
            } 
            // fall through
          case 108: break;
          case 43: 
            { yybegin(PROPERTY_MASK_OPTION_NAME); return CndTypes.COMMA;
            } 
            // fall through
          case 109: break;
          case 44: 
            { yybegin(PROPERTY_ATTRIBUTES); return CndTypes.PROPERTY_ATTRIBUTE;
            } 
            // fall through
          case 110: break;
          case 45: 
            { yybegin(PROPERTY_DEFAULT_VALUE); return CndTypes.EQUAL_PROPERTY_DEFAULT_VALUE;
            } 
            // fall through
          case 111: break;
          case 46: 
            { yybegin(PROPERTY_CONSTRAINT); return CndTypes.LEFT_ONLY_ANGLE_BRACKET;
            } 
            // fall through
          case 112: break;
          case 47: 
            { yybegin(PROPERTY_ATTRIBUTES); return CndTypes.PROPERTY_DEFAULT_VALUE;
            } 
            // fall through
          case 113: break;
          case 48: 
            { return CndTypes.PROPERTY_ATTRIBUTE;
            } 
            // fall through
          case 114: break;
          case 49: 
            { return CndTypes.PROPERTY_CONSTRAINT_VALUE;
            } 
            // fall through
          case 115: break;
          case 50: 
            { return CndTypes.NODE_NAME;
            } 
            // fall through
          case 116: break;
          case 51: 
            { yybegin(NODE_NAMESPACE); return CndTypes.LEFT_PARENTHESIS;
            } 
            // fall through
          case 117: break;
          case 52: 
            { yybegin(NODE_NODETYPE); return CndTypes.NAMESPACE_NAME;
            } 
            // fall through
          case 118: break;
          case 53: 
            { yybegin(NODE_NAMESPACE); return CndTypes.COMMA;
            } 
            // fall through
          case 119: break;
          case 54: 
            { yybegin(NODE_DEFAULT); return CndTypes.RIGHT_PARENTHESIS;
            } 
            // fall through
          case 120: break;
          case 55: 
            { yybegin(NODE_ATTRIBUTES); return CndTypes.NODE_ATTRIBUTE;
            } 
            // fall through
          case 121: break;
          case 56: 
            { yybegin(NODE_DEFAULT_VALUE_NAMESPACE); return CndTypes.EQUAL;
            } 
            // fall through
          case 122: break;
          case 57: 
            { yybegin(NODE_DEFAULT_VALUE); return CndTypes.NAMESPACE_NAME;
            } 
            // fall through
          case 123: break;
          case 58: 
            { yybegin(NODE_ATTRIBUTES); return CndTypes.NODE_TYPE_NAME;
            } 
            // fall through
          case 124: break;
          case 59: 
            { return CndTypes.NODE_ATTRIBUTE;
            } 
            // fall through
          case 125: break;
          case 60: 
            { return CndTypes.COMMENT;
            } 
            // fall through
          case 126: break;
          case 61: 
            { yypushback(yytext().toString().replaceAll("\\r", "").replaceAll("\\n", "").trim().length()); yybegin(PROPERTY_ATTRIBUTES); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 127: break;
          case 62: 
            { yypushback(1); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 128: break;
          case 63: 
            { yypushback(yytext().toString().replaceAll("\\r", "").replaceAll("\\n", "").trim().length()); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 129: break;
          case 64: 
            { yypushback(yytext().toString().replaceAll("\\r", "").replaceAll("\\n", "").trim().length()); yybegin(NODE_ATTRIBUTES); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 130: break;
          case 65: 
            { yybegin(ITEMTYPE); return CndTypes.ITEMTYPE;
            } 
            // fall through
          case 131: break;
          case 66: 
            { yybegin(EXTENDS); return CndTypes.EXTENDS;
            } 
            // fall through
          case 132: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
