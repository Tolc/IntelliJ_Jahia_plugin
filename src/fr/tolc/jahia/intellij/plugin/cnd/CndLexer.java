/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package fr.tolc.jahia.intellij.plugin.cnd;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import fr.tolc.jahia.intellij.plugin.cnd.psi.CndTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Cnd.flex</tt>
 */
class CndLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int NAMESPACE = 2;
  public static final int NAMESPACE_URI = 4;
  public static final int NODETYPE_NAMESPACE = 6;
  public static final int NODETYPE = 8;
  public static final int NODETYPE_DONE = 10;
  public static final int SUPER_TYPE_NAMESPACE = 12;
  public static final int SUPER_TYPE_NAME = 14;
  public static final int AFTER_SUPER_TYPE_NAME = 16;
  public static final int OPTIONS = 18;
  public static final int EXTENDS = 20;
  public static final int EXTEND_NAMESPACE = 22;
  public static final int EXTEND = 24;
  public static final int ITEMTYPE = 26;
  public static final int PROPERTY = 28;
  public static final int PROPERTY_TYPE = 30;
  public static final int PROPERTY_MASK_OPTION_NAME = 32;
  public static final int PROPERTY_MASK = 34;
  public static final int PROPERTY_MASK_OPTION = 36;
  public static final int PROPERTY_DEFAULT = 38;
  public static final int PROPERTY_DEFAULT_VALUE = 40;
  public static final int PROPERTY_ATTRIBUTES = 42;
  public static final int PROPERTY_CONSTRAINT = 44;
  public static final int PROPERTY_CONSTRAINT_NEWLINE = 46;
  public static final int NODE = 48;
  public static final int NODE_NAMESPACE = 50;
  public static final int NODE_NODETYPE = 52;
  public static final int NODE_DEFAULT = 54;
  public static final int NODE_DEFAULT_VALUE_NAMESPACE = 56;
  public static final int NODE_DEFAULT_VALUE = 58;
  public static final int NODE_ATTRIBUTES = 60;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 17312 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1"+
    "\21\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\21\1\25\1\57\1\60\5\21\2\25\1\61"+
    "\7\21\1\25\1\62\20\21\1\25\1\63\1\21\1\64\13\25\1\65\1\25\1\66\22\21\1\67"+
    "\1\70\4\21\1\71\11\21\1\72\1\73\1\74\1\75\1\21\1\76\2\21\1\77\3\21\1\100\2"+
    "\21\1\101\10\21\123\25\1\102\7\25\1\103\1\104\12\25\1\105\15\25\1\106\6\21"+
    "\1\25\1\107\u0582\21\1\110\u017f\21");

  /* The ZZ_CMAP_Y table has 4672 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\0\1\5\1\6\2\7\1\10\1\6\2\7\1\11\1\12\3\0\1\13\1"+
    "\14\1\15\1\16\2\7\1\17\3\7\1\17\71\7\1\20\1\7\1\21\1\22\1\23\1\24\2\22\16"+
    "\0\1\25\1\26\1\27\1\30\2\7\1\31\11\7\1\32\21\7\1\33\1\34\24\7\1\6\3\7\1\17"+
    "\1\35\1\6\4\7\1\36\1\37\4\0\1\40\1\41\1\22\3\7\2\42\1\22\1\43\1\44\1\0\1\45"+
    "\5\7\1\46\3\0\1\47\1\50\13\7\1\51\1\40\1\52\1\53\1\0\1\54\1\22\1\55\1\56\3"+
    "\7\3\0\1\57\12\7\1\60\1\0\1\61\1\22\1\0\1\62\3\7\1\46\1\63\1\16\2\7\1\60\1"+
    "\64\1\65\1\66\2\22\3\7\1\67\1\7\1\42\6\22\2\7\1\25\1\70\2\22\1\71\5\0\1\72"+
    "\6\7\1\73\2\0\1\74\1\7\1\75\1\0\1\6\1\7\1\76\1\77\1\100\2\7\1\101\1\102\1"+
    "\103\1\104\1\105\1\55\1\106\1\75\1\0\1\107\1\110\1\111\1\112\1\100\2\7\1\101"+
    "\1\113\1\114\1\115\1\116\1\117\1\120\1\121\1\0\1\122\1\22\1\111\1\32\1\31"+
    "\2\7\1\101\1\123\1\103\1\40\1\124\1\125\1\22\1\75\1\0\1\35\1\126\1\111\1\77"+
    "\1\100\2\7\1\101\1\123\1\103\1\104\1\116\1\121\1\106\1\75\1\0\1\35\1\22\1"+
    "\127\1\130\1\131\1\132\1\110\1\130\1\7\1\133\1\134\1\135\1\136\1\22\1\121"+
    "\1\0\1\22\1\35\1\137\1\25\1\101\2\7\1\101\1\7\1\140\1\141\1\135\1\142\1\42"+
    "\1\75\1\0\2\22\1\76\1\25\1\101\2\7\1\101\1\143\1\103\1\141\1\135\1\142\1\27"+
    "\1\75\1\0\1\144\1\22\1\137\1\25\1\101\4\7\1\145\1\141\1\146\1\147\1\36\1\75"+
    "\1\0\1\22\1\34\1\150\1\7\1\17\1\34\2\7\1\31\1\151\1\17\1\152\1\153\1\0\1\121"+
    "\1\0\1\154\1\22\1\6\5\7\1\155\1\156\1\157\1\160\1\0\1\161\4\22\1\162\1\163"+
    "\1\164\1\6\1\165\1\166\1\155\1\167\1\170\1\43\1\0\1\171\4\22\1\125\2\22\1"+
    "\161\1\0\1\161\1\172\1\173\1\7\1\6\3\7\1\23\1\37\1\0\1\141\1\174\1\0\1\37"+
    "\3\0\1\175\1\176\7\22\5\7\1\46\1\0\1\177\1\0\1\161\1\60\1\200\1\201\1\202"+
    "\1\203\1\7\1\204\1\205\1\0\1\43\4\7\1\32\1\15\5\7\1\206\51\7\1\131\1\17\1"+
    "\131\5\7\1\131\4\7\1\131\1\17\1\131\1\7\1\17\7\7\1\131\10\7\1\207\4\22\2\7"+
    "\2\22\12\7\2\70\1\6\114\7\1\77\2\7\1\6\2\7\1\42\11\7\1\130\1\7\1\125\1\7\1"+
    "\25\1\210\1\22\2\7\1\210\1\22\2\7\1\211\1\22\1\7\1\25\1\212\1\22\6\7\1\213"+
    "\3\0\1\214\1\215\1\0\1\161\3\22\1\216\1\0\1\161\13\7\1\22\1\217\4\7\1\220"+
    "\10\7\1\70\1\22\3\7\1\17\1\0\1\2\1\0\1\2\1\121\1\0\3\7\1\70\1\23\1\22\5\7"+
    "\1\107\3\7\1\21\1\0\1\161\4\22\2\7\1\157\1\2\6\7\1\174\1\160\3\0\1\104\1\0"+
    "\1\161\1\0\1\161\1\36\1\22\1\0\1\43\10\22\1\221\5\7\1\213\1\0\1\221\1\107"+
    "\1\0\1\161\1\22\1\222\1\2\1\22\1\223\3\7\1\74\1\202\1\0\1\62\4\7\1\60\1\0"+
    "\1\2\1\22\4\7\1\213\2\0\1\22\1\0\1\224\1\0\1\62\3\7\1\70\1\7\1\125\10\22\1"+
    "\225\2\0\1\226\1\227\1\161\30\7\7\0\1\230\42\7\2\70\4\7\2\70\1\7\1\231\3\7"+
    "\1\70\6\7\1\25\1\170\1\232\1\23\1\233\1\107\1\7\1\23\1\232\1\23\1\22\1\222"+
    "\3\22\1\234\1\22\1\36\1\125\1\22\1\235\1\22\1\141\1\0\1\35\1\36\2\22\1\7\1"+
    "\23\4\7\2\22\1\0\1\175\1\236\1\0\1\237\1\22\1\240\1\34\1\151\1\241\1\24\1"+
    "\242\1\7\1\243\1\244\1\245\2\22\5\7\1\125\116\22\5\7\1\17\5\7\1\17\20\7\1"+
    "\23\1\246\1\247\1\22\4\7\1\32\1\15\7\7\1\36\1\22\1\55\2\7\1\17\1\22\10\17"+
    "\4\0\5\22\1\36\72\22\1\244\3\22\1\6\1\204\1\241\1\23\1\6\11\7\1\17\1\250\1"+
    "\6\12\7\1\206\1\244\4\7\1\17\1\6\12\7\1\17\2\22\3\7\1\42\6\22\170\7\1\70\11"+
    "\22\75\7\1\42\2\22\21\7\1\23\10\22\5\7\1\70\41\7\1\23\2\7\1\0\1\247\2\22\5"+
    "\7\1\157\1\71\1\251\3\7\1\60\12\7\1\161\3\22\1\36\1\7\1\34\14\7\1\100\3\7"+
    "\1\17\1\7\7\22\1\36\1\7\1\252\1\253\2\7\1\46\2\22\1\125\6\7\1\107\1\22\1\62"+
    "\5\7\1\213\1\0\1\43\1\22\1\0\1\161\2\0\1\62\1\254\1\0\1\62\2\7\1\60\1\43\2"+
    "\7\1\157\1\0\1\2\1\22\3\7\1\23\1\72\5\7\1\46\1\0\1\237\1\36\1\0\1\161\1\255"+
    "\1\7\1\0\1\256\5\7\1\74\1\160\1\22\1\253\1\257\1\0\1\161\2\7\1\17\1\260\6"+
    "\7\1\201\1\261\1\220\2\22\1\262\1\7\1\46\1\263\1\22\3\264\1\22\2\17\5\7\1"+
    "\206\1\70\1\22\16\7\1\46\1\265\1\0\1\161\64\7\1\107\1\22\2\7\1\17\1\266\5"+
    "\7\1\107\40\22\55\7\1\70\15\7\1\21\4\22\1\17\1\22\1\266\1\267\1\7\1\101\1"+
    "\17\1\170\1\270\15\7\1\21\3\22\1\266\54\7\1\70\2\22\10\7\1\34\6\7\5\22\1\7"+
    "\1\23\2\0\2\22\2\0\1\110\2\22\1\244\3\22\1\35\1\25\20\7\1\271\1\235\1\22\1"+
    "\0\1\161\1\6\2\7\1\112\1\6\2\7\1\42\1\272\12\7\1\17\3\34\1\273\1\274\2\22"+
    "\1\275\1\7\1\143\2\7\1\17\2\7\1\276\1\7\1\70\1\7\1\70\4\22\17\7\1\42\10\22"+
    "\6\7\1\23\20\22\1\277\20\22\3\7\1\23\6\7\1\125\1\22\1\237\3\22\4\7\1\22\1"+
    "\244\3\7\1\42\4\7\1\60\1\300\3\7\1\70\4\7\1\107\1\7\1\241\5\22\23\7\1\70\1"+
    "\0\1\161\4\7\1\107\4\7\1\107\5\7\1\22\6\7\1\107\23\22\46\7\1\17\1\22\2\7\1"+
    "\70\1\22\1\7\23\22\1\70\1\101\4\7\1\32\1\301\2\7\1\70\1\22\2\7\1\17\1\22\3"+
    "\7\1\17\10\22\2\7\1\302\1\22\2\7\1\70\1\22\3\7\1\21\10\22\7\7\1\272\10\22"+
    "\1\303\1\71\1\143\1\6\2\7\1\107\1\115\4\22\3\7\1\23\3\7\1\23\4\22\1\7\1\6"+
    "\2\7\1\304\3\22\6\7\1\70\1\22\2\7\1\70\1\22\2\7\1\42\1\22\2\7\1\21\15\22\11"+
    "\7\1\125\6\22\6\7\1\42\1\22\6\7\1\42\41\22\1\223\6\7\1\0\1\160\3\22\1\121"+
    "\1\0\1\22\1\55\1\223\5\7\1\0\1\305\2\22\3\7\1\125\1\0\1\161\1\223\3\7\1\157"+
    "\1\0\1\141\1\0\2\22\4\7\1\306\1\22\1\223\5\7\1\46\1\0\1\307\1\310\1\0\1\311"+
    "\4\22\2\7\1\31\2\7\1\213\1\0\1\176\10\22\1\17\1\242\1\7\1\32\1\7\1\125\5\7"+
    "\1\157\1\0\1\300\1\0\1\161\1\137\1\77\1\100\2\7\1\101\1\123\1\103\1\104\1"+
    "\116\1\136\1\244\1\75\2\175\21\22\6\7\1\174\1\0\1\177\1\42\1\0\1\161\4\22"+
    "\6\7\2\0\1\312\1\22\1\0\1\161\24\22\5\7\1\157\1\43\1\0\1\237\2\22\1\257\4"+
    "\22\6\7\2\0\1\313\1\22\1\0\1\161\4\22\5\7\1\46\1\0\1\22\1\0\1\161\6\22\3\7"+
    "\1\314\1\0\1\2\1\0\1\161\54\22\10\7\1\0\1\161\1\22\1\36\40\22\1\74\1\223\4"+
    "\7\1\46\1\315\1\55\1\22\1\74\1\72\4\7\1\233\1\204\1\0\1\161\4\22\7\7\1\125"+
    "\40\22\1\7\1\101\3\7\1\157\1\160\1\0\1\125\1\22\1\0\1\161\2\22\1\34\3\7\1"+
    "\316\2\0\1\37\1\160\11\22\1\17\1\31\4\7\1\317\1\320\1\205\1\22\1\0\1\161\24"+
    "\22\63\7\1\21\14\22\15\7\1\17\2\22\30\7\1\107\27\22\5\7\1\17\72\22\10\7\1"+
    "\17\67\22\7\7\1\125\3\7\1\17\1\0\1\161\14\22\3\7\1\70\1\175\1\22\6\7\1\160"+
    "\1\22\1\107\1\22\1\0\1\161\1\266\2\7\1\244\2\7\56\22\10\7\1\23\1\22\1\74\4"+
    "\0\1\160\1\22\1\55\1\223\1\7\10\22\1\21\3\22\75\7\1\23\2\22\36\7\1\42\41\22"+
    "\43\7\1\17\12\22\61\7\1\107\40\22\15\7\1\42\1\7\1\23\1\7\1\125\1\7\1\321\1"+
    "\2\127\22\1\322\1\323\2\0\1\324\1\2\3\22\1\325\22\22\1\310\67\22\12\7\1\25"+
    "\10\7\1\25\1\326\1\327\1\7\1\330\1\143\7\7\1\32\1\331\2\25\3\7\1\332\1\170"+
    "\1\34\1\101\51\7\1\70\3\7\1\101\2\7\1\206\3\7\1\206\2\7\1\25\3\7\1\25\2\7"+
    "\1\17\3\7\1\17\3\7\1\101\3\7\1\101\2\7\1\206\1\333\14\0\1\160\1\222\5\0\1"+
    "\175\1\277\1\22\1\334\2\22\1\222\1\37\1\0\52\22\1\160\2\0\1\335\1\336\1\300"+
    "\72\22\30\7\1\23\1\22\1\160\5\22\10\7\1\213\1\300\1\0\1\161\24\22\1\143\3"+
    "\7\1\162\1\6\1\206\1\337\1\240\1\340\1\162\1\231\1\162\2\206\1\120\1\7\1\31"+
    "\1\7\1\107\1\341\1\31\1\7\1\107\50\22\32\7\1\17\5\22\106\7\1\23\1\22\33\7"+
    "\1\70\120\7\1\21\1\22\146\7\1\125\3\22\3\7\1\70\74\22\1\117\3\22\14\0\20\22"+
    "\36\0\2\22");

  /* The ZZ_CMAP_A table has 1808 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\7\1\3\1\1\1\27\1\3\1\2\6\7\4\0\1\10\1\0\1\26\1\0\1\6\2\0\1\13\1\23\1\24"+
    "\1\5\1\25\1\20\1\21\1\22\1\4\2\7\1\16\1\0\1\12\1\11\1\14\2\0\22\6\1\15\1\0"+
    "\1\17\1\0\4\6\4\0\6\7\1\30\2\7\2\0\4\6\4\0\1\6\2\0\1\7\7\0\1\6\4\0\1\6\5\0"+
    "\7\6\1\0\2\6\4\0\4\6\16\0\5\6\7\0\1\6\1\0\1\6\1\0\5\6\1\0\2\6\2\0\4\6\1\0"+
    "\1\6\6\0\1\6\1\0\3\6\1\0\1\6\1\0\4\6\1\0\13\6\1\0\3\6\1\0\5\7\2\0\6\6\1\0"+
    "\1\6\15\0\1\6\1\0\15\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0\1\7\3\6\5\0\6\7\5\0\1\6"+
    "\4\0\3\7\1\0\1\7\3\0\3\6\7\7\4\0\2\6\1\7\13\6\1\0\1\6\7\7\2\6\2\7\1\0\4\7"+
    "\2\6\2\7\3\6\2\0\1\6\7\0\1\7\1\6\1\7\6\6\3\7\2\0\11\6\3\7\1\6\6\0\2\7\6\6"+
    "\4\7\2\6\2\0\2\7\1\6\11\7\1\6\3\7\1\6\5\7\2\0\1\6\3\7\4\0\6\6\6\0\10\7\6\6"+
    "\3\7\1\6\2\7\1\6\7\7\2\6\2\7\2\0\2\7\1\6\3\7\1\0\10\6\2\0\2\6\2\0\6\6\1\0"+
    "\7\6\1\0\1\6\3\0\4\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7\1\6\5\0\2\6\1\0\5\6\7"+
    "\0\2\6\4\0\3\7\1\0\6\6\4\0\2\6\1\0\2\6\1\0\2\6\1\0\2\6\2\0\1\7\1\0\5\7\4\0"+
    "\2\7\2\0\3\7\3\0\1\7\7\0\4\6\1\0\1\6\7\0\4\7\3\6\1\7\2\0\1\6\1\0\2\6\1\0\3"+
    "\6\2\7\1\0\3\7\2\0\1\6\10\0\1\6\6\7\2\0\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3"+
    "\0\2\6\1\0\1\6\1\0\4\6\4\0\5\7\3\0\3\7\1\0\4\7\2\0\1\6\6\0\5\7\1\0\5\6\3\0"+
    "\1\6\7\7\1\0\2\7\5\0\2\7\1\0\4\6\1\0\3\6\1\0\2\6\5\0\3\6\2\7\1\6\3\7\1\0\4"+
    "\7\1\6\5\0\3\6\1\7\2\0\2\7\1\0\7\6\1\0\1\6\4\0\1\7\4\0\6\7\1\0\1\7\3\0\2\7"+
    "\4\0\1\6\1\7\2\6\7\7\4\0\10\6\10\7\1\0\2\7\7\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6"+
    "\2\0\1\6\6\0\4\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0\3\6\2\7\1\0\2\7\1\6\2"+
    "\0\5\6\1\0\1\6\1\0\2\7\2\0\4\6\5\0\1\7\1\0\1\7\1\0\1\7\4\0\2\7\5\6\10\7\11"+
    "\0\1\7\1\0\7\7\1\6\2\7\4\6\3\7\1\6\3\7\2\6\7\7\3\6\4\7\5\6\14\7\1\6\1\7\3"+
    "\6\1\0\7\6\2\0\3\7\2\6\3\7\3\0\2\6\2\7\4\0\1\6\1\0\2\7\4\0\4\6\10\7\3\0\1"+
    "\6\3\0\2\6\1\7\5\0\4\7\1\0\5\6\2\7\2\6\1\7\1\6\5\0\5\7\3\6\3\0\10\7\5\6\2"+
    "\7\3\0\3\6\3\7\1\0\5\7\4\6\1\7\4\6\3\7\2\6\3\7\1\0\5\7\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\2\0\3\6\1\0\6\6\2\0\2\6\2\27\5\7\5\0\1\6\4\0\1\7\3\0\4\7\11\0"+
    "\1\6\4\0\1\6\1\0\5\6\2\0\1\6\1\0\4\6\1\0\3\6\2\0\4\6\5\0\5\6\4\0\1\6\4\0\4"+
    "\6\3\7\2\6\5\0\2\7\2\0\3\6\6\7\1\0\3\6\1\7\3\6\1\7\4\6\1\7\4\6\3\0\1\6\1\0"+
    "\1\6\2\0\5\6\1\7\2\6\2\7\5\6\1\0\4\6\2\7\4\0\1\6\3\7\2\6\1\7\5\6\2\7\3\0\3"+
    "\6\4\0\3\6\2\7\2\0\6\6\1\0\3\7\1\0\2\7\5\0\5\6\5\0\1\6\1\7\3\6\1\0\2\6\1\0"+
    "\7\6\2\0\1\7\6\0\2\6\2\0\3\6\3\0\2\6\3\0\2\6\2\0\3\7\4\0\3\6\1\0\2\6\1\0\1"+
    "\6\5\0\1\7\2\0\3\7\5\0\1\6\3\0\1\6\2\0\4\6\1\0\2\6\2\0\1\6\3\7\1\0\2\7\1\0"+
    "\5\6\2\7\1\0\3\7\2\0\1\7\2\0\3\6\1\7\2\0\1\6\1\0\1\7\4\6\5\0\3\7\3\0\2\7\1"+
    "\6\1\0\1\6\3\0\4\7\2\6\1\0\1\6\1\7\3\0\1\6\3\0\2\6\3\0\5\7\1\6\4\7\3\0\6\7"+
    "\1\6\6\7\3\0\1\7\1\0\2\7\1\0\1\7\2\6\3\0\2\7\6\0\5\7\3\0\6\7\2\0\3\7\2\0\4"+
    "\7\4\0\1\6\2\0\2\6\2\0\4\6\1\0\4\6\1\0\1\6\1\0\6\6\2\0\5\6\1\0\4\6\1\0\4\6"+
    "\2\0\2\7\4\0\1\7\3\0\1\7\2\0\7\7\1\0\2\7\1\0\2\7\1\0\1\6\1\0\1\6\5\0\1\6\1"+
    "\0\1\6\1\0\3\6\1\0\3\6\1\0\3\6");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\37\0\1\1\2\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\1\1\11\1\12\1\13\2\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\2\26\1\27\1\30\1\31\1\32\1\33\1\34\3\35"+
    "\2\36\1\37\1\40\1\41\1\42\3\43\1\44\1\45"+
    "\3\46\1\1\1\47\1\50\2\2\1\3\1\51\1\52"+
    "\1\53\2\54\2\1\1\54\1\1\2\2\1\3\1\55"+
    "\2\56\2\1\2\57\1\60\1\61\1\62\1\63\2\2"+
    "\1\3\1\64\1\65\1\66\1\67\2\2\1\70\1\71"+
    "\1\0\1\14\1\35\1\43\1\46\3\0\1\72\1\73"+
    "\4\0\3\54\2\0\1\54\2\0\1\54\3\0\1\54"+
    "\2\0\1\74\2\0\2\56\1\0\1\56\1\0\1\56"+
    "\2\0\1\75\5\0\1\46\1\0\1\51\1\0\1\51"+
    "\2\0\1\54\2\0\1\54\1\0\2\71\3\54\3\0"+
    "\2\54\2\0\1\54\3\0\1\55\1\0\1\55\2\0"+
    "\1\71\1\56\5\0\1\64\1\0\1\64\1\70\1\0"+
    "\1\70\1\71\1\72\1\0\1\72\3\0\1\54\2\0"+
    "\3\71\1\54\2\71\1\54\1\71\2\0\1\54\3\0"+
    "\1\54\1\0\1\54\3\0\1\74\1\0\1\74\2\0"+
    "\2\71\2\0\1\75\1\0\1\75\6\0\3\51\1\0"+
    "\2\54\1\71\1\54\2\71\10\0\3\55\4\0\3\64"+
    "\3\70\3\72\1\54\1\71\2\54\3\74\3\75\1\54";

  private static int [] zzUnpackAction() {
    int [] result = new int[306];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\31\0\62\0\113\0\144\0\175\0\226\0\257"+
    "\0\310\0\341\0\372\0\u0113\0\u012c\0\u0145\0\u015e\0\u0177"+
    "\0\u0190\0\u01a9\0\u01c2\0\u01db\0\u01f4\0\u020d\0\u0226\0\u023f"+
    "\0\u0258\0\u0271\0\u028a\0\u02a3\0\u02bc\0\u02d5\0\u02ee\0\u0307"+
    "\0\u0307\0\u0320\0\u0339\0\u0352\0\u036b\0\u0307\0\u0307\0\u0307"+
    "\0\u0307\0\u0384\0\u039d\0\u0307\0\u0307\0\u03b6\0\u03cf\0\u0307"+
    "\0\u0307\0\u03e8\0\u0401\0\u0307\0\u0307\0\u041a\0\u0307\0\u0307"+
    "\0\u0307\0\u0433\0\u044c\0\u0307\0\u0465\0\u0307\0\u047e\0\u0307"+
    "\0\u0497\0\u04b0\0\u04c9\0\u0307\0\u04e2\0\u0307\0\u04fb\0\u0307"+
    "\0\u0307\0\u0514\0\u052d\0\u0546\0\u055f\0\u0307\0\u0578\0\u0591"+
    "\0\u05aa\0\u05c3\0\u0307\0\u0307\0\u05dc\0\u05f5\0\u060e\0\u0627"+
    "\0\u0640\0\u0307\0\u0659\0\u0672\0\u068b\0\u06a4\0\u06bd\0\u06d6"+
    "\0\u06ef\0\u0708\0\u0721\0\u073a\0\u0753\0\u076c\0\u0785\0\u079e"+
    "\0\u0307\0\u07b7\0\u0307\0\u07d0\0\u0307\0\u0307\0\u07e9\0\u0802"+
    "\0\u081b\0\u0834\0\u0307\0\u084d\0\u0866\0\u087f\0\u0898\0\u08b1"+
    "\0\u08ca\0\u08e3\0\u08fc\0\u0915\0\u092e\0\u0947\0\u0960\0\u05dc"+
    "\0\u0979\0\u0992\0\u0307\0\u09ab\0\u09c4\0\u09dd\0\u06a4\0\u09f6"+
    "\0\u0a0f\0\u0a28\0\u068b\0\u0a41\0\u0a5a\0\u0a73\0\u0a8c\0\u0aa5"+
    "\0\u06d6\0\u0abe\0\u0ad7\0\u0af0\0\u06ef\0\u0b09\0\u0b22\0\u0b3b"+
    "\0\u0b54\0\u0b6d\0\u0b86\0\u0785\0\u0b9f\0\u079e\0\u0bb8\0\u07e9"+
    "\0\u0bd1\0\u0bea\0\u0c03\0\u087f\0\u0c1c\0\u0c35\0\u0c4e\0\u0307"+
    "\0\u0c67\0\u09c4\0\u0c80\0\u0c99\0\u0cb2\0\u0aa5\0\u0ccb\0\u0ce4"+
    "\0\u0cfd\0\u0d16\0\u0d2f\0\u0d48\0\u0d61\0\u0d7a\0\u0d93\0\u0dac"+
    "\0\u0dac\0\u0dc5\0\u0dde\0\u0df7\0\u0e10\0\u0e29\0\u0e42\0\u0e5b"+
    "\0\u0e10\0\u0e74\0\u0e8d\0\u0b3b\0\u0ea6\0\u0ebf\0\u0ed8\0\u0b6d"+
    "\0\u0ef1\0\u0f0a\0\u0b9f\0\u0f23\0\u0bb8\0\u0f3c\0\u0f55\0\u0c03"+
    "\0\u0f6e\0\u0f87\0\u0c35\0\u0fa0\0\u0fb9\0\u0307\0\u0c67\0\u0fd2"+
    "\0\u0feb\0\u1004\0\u101d\0\u1036\0\u0d2f\0\u104f\0\u0d16\0\u1068"+
    "\0\u1081\0\u109a\0\u10b3\0\u10cc\0\u10e5\0\u10fe\0\u1117\0\u1130"+
    "\0\u1149\0\u0dde\0\u1162\0\u117b\0\u1194\0\u0e29\0\u11ad\0\u11c6"+
    "\0\u0e5b\0\u11df\0\u11f8\0\u0e8d\0\u1211\0\u122a\0\u1243\0\u125c"+
    "\0\u1275\0\u0f0a\0\u128e\0\u12a7\0\u0f55\0\u12c0\0\u12d9\0\u12f2"+
    "\0\u130b\0\u1324\0\u133d\0\u1356\0\u136f\0\u1388\0\u1004\0\u101d"+
    "\0\u13a1\0\u13ba\0\u109a\0\u13d3\0\u1117\0\u13ec\0\u10fe\0\u1405"+
    "\0\u141e\0\u1437\0\u11c6\0\u1450\0\u1469\0\u1482\0\u149b\0\u14b4"+
    "\0\u1243\0\u125c\0\u14cd\0\u14e6\0\u14ff\0\u1518\0\u1531\0\u12f2"+
    "\0\u130b\0\u154a\0\u1324\0\u133d\0\u1563\0\u1356\0\u136f\0\u0307"+
    "\0\u157c\0\u0a41\0\u0abe\0\u1595\0\u1482\0\u149b\0\u15ae\0\u14ff"+
    "\0\u1518\0\u08ca";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[306];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\40\1\41\1\42\1\43\1\44\1\40\1\45\1\40"+
    "\1\43\1\40\1\46\2\40\1\47\3\40\1\50\3\40"+
    "\1\51\1\40\2\0\1\40\1\41\1\42\1\43\1\52"+
    "\1\40\1\53\1\40\1\43\1\54\1\40\1\55\13\40"+
    "\2\0\4\56\1\57\6\56\1\60\1\61\14\56\1\40"+
    "\1\41\1\42\1\43\1\52\1\40\1\62\1\40\1\43"+
    "\16\40\2\0\1\40\1\41\1\42\1\43\1\52\1\40"+
    "\1\63\1\40\1\43\5\40\1\64\1\65\7\40\2\0"+
    "\1\40\1\41\1\42\1\43\1\52\1\40\1\66\1\40"+
    "\1\43\3\40\1\67\12\40\2\0\1\40\1\41\1\42"+
    "\1\43\1\52\1\40\1\53\1\40\1\43\5\40\1\70"+
    "\10\40\2\0\1\40\1\71\1\72\1\43\1\52\1\40"+
    "\1\73\1\40\1\43\16\40\2\0\1\40\1\41\1\42"+
    "\1\43\1\52\1\40\1\66\1\40\1\43\7\40\1\74"+
    "\6\40\2\0\1\40\1\41\1\42\1\43\1\52\1\40"+
    "\1\75\1\40\1\43\16\40\2\0\1\40\1\41\1\42"+
    "\1\43\1\52\3\40\1\43\1\76\15\40\2\0\1\40"+
    "\1\41\1\42\1\43\1\52\1\40\1\77\1\40\1\43"+
    "\16\40\2\0\1\40\1\41\1\42\1\43\1\52\1\40"+
    "\1\63\1\40\1\43\5\40\1\64\1\40\1\100\6\40"+
    "\2\0\1\101\1\41\1\42\1\102\1\103\3\101\1\43"+
    "\1\54\17\101\1\40\1\41\1\42\1\43\1\52\1\104"+
    "\1\105\1\40\1\43\12\40\1\106\3\40\2\0\1\40"+
    "\1\41\1\42\1\43\1\52\1\40\1\107\1\40\1\43"+
    "\7\40\1\110\3\40\1\111\2\40\2\0\1\112\1\41"+
    "\1\42\1\113\1\114\3\112\1\43\1\40\1\112\1\40"+
    "\3\112\2\40\3\112\1\40\4\112\1\40\1\41\1\42"+
    "\1\43\1\52\1\40\1\115\1\40\1\43\4\40\1\116"+
    "\6\40\1\111\2\40\2\0\1\117\1\41\1\42\1\120"+
    "\1\121\3\117\1\43\1\54\1\117\1\122\3\117\1\123"+
    "\1\124\3\117\1\111\4\117\1\40\1\125\1\126\1\127"+
    "\1\52\1\40\1\130\1\40\1\127\1\131\1\132\14\40"+
    "\2\0\1\133\1\41\1\42\1\43\1\134\3\133\1\43"+
    "\2\133\1\135\5\133\1\136\1\133\1\137\1\133\1\136"+
    "\1\140\2\133\1\40\1\141\1\142\1\143\1\52\1\40"+
    "\1\144\1\40\1\143\1\40\1\132\14\40\2\0\1\145"+
    "\1\41\1\42\1\43\1\146\3\145\1\43\2\145\1\147"+
    "\5\145\1\40\3\145\1\40\1\150\2\145\1\40\1\41"+
    "\1\42\1\43\1\52\3\40\1\43\16\40\2\0\1\40"+
    "\1\41\1\42\1\43\1\52\1\151\1\152\1\40\1\43"+
    "\12\40\1\153\3\40\2\0\1\40\1\41\1\42\1\43"+
    "\1\52\1\40\1\154\1\40\1\43\16\40\2\0\1\40"+
    "\1\41\1\42\1\43\1\52\1\40\1\63\1\40\1\43"+
    "\5\40\1\64\1\40\1\155\3\40\1\156\2\40\2\0"+
    "\1\40\1\157\1\160\1\161\1\52\1\40\1\162\1\40"+
    "\1\161\1\163\15\40\2\0\1\40\1\41\1\42\1\43"+
    "\1\52\1\40\1\164\1\40\1\43\16\40\2\0\1\40"+
    "\1\41\1\42\1\43\1\52\1\40\1\165\1\40\1\43"+
    "\5\40\1\64\10\40\2\0\1\40\1\166\1\167\1\43"+
    "\1\52\1\40\1\170\1\40\1\43\16\40\34\0\1\41"+
    "\32\0\1\43\4\0\1\43\24\0\1\171\1\172\31\0"+
    "\1\45\26\0\1\171\32\0\2\53\20\0\1\53\13\56"+
    "\2\0\20\56\1\173\6\56\2\0\14\56\6\0\2\62"+
    "\20\0\1\62\6\0\2\63\20\0\1\63\6\0\1\66"+
    "\23\0\1\71\35\0\2\73\20\0\1\73\6\0\1\75"+
    "\30\0\2\77\20\0\1\77\1\101\2\0\5\101\2\0"+
    "\20\101\2\0\1\102\4\101\1\43\1\0\20\101\2\0"+
    "\1\101\1\174\3\101\2\0\17\101\6\0\2\105\6\0"+
    "\1\105\3\0\1\105\5\0\1\105\6\0\1\107\22\0"+
    "\1\112\2\0\5\112\2\0\1\112\1\0\3\112\2\0"+
    "\3\112\1\0\5\112\2\0\1\113\4\112\1\43\1\0"+
    "\1\112\1\0\3\112\2\0\3\112\1\0\5\112\2\0"+
    "\1\112\1\175\3\112\2\0\1\112\1\0\3\112\2\0"+
    "\3\112\1\0\4\112\6\0\1\115\22\0\1\117\2\0"+
    "\5\117\2\0\1\117\1\0\3\117\2\0\3\117\1\0"+
    "\5\117\2\0\1\120\4\117\1\43\1\0\1\117\1\0"+
    "\3\117\2\0\3\117\1\0\5\117\2\0\1\117\1\176"+
    "\3\117\2\0\1\117\1\0\3\117\2\0\3\117\1\0"+
    "\4\117\1\177\2\0\10\177\1\0\3\177\1\0\11\177"+
    "\1\0\2\200\1\201\2\0\1\202\1\0\1\201\1\203"+
    "\1\132\17\0\1\125\1\200\1\201\2\0\1\202\1\0"+
    "\1\201\1\203\1\132\17\0\2\204\1\127\4\0\1\127"+
    "\1\203\1\132\16\0\1\205\2\0\5\205\1\0\20\205"+
    "\3\0\1\131\4\0\1\131\20\0\1\133\2\0\1\206"+
    "\4\133\1\206\2\133\1\207\4\133\1\210\1\207\1\133"+
    "\1\211\1\133\2\207\3\133\2\0\1\206\1\212\3\133"+
    "\1\206\2\133\1\207\4\133\1\210\1\207\1\133\1\211"+
    "\1\133\2\207\2\133\1\213\2\0\1\214\4\213\1\214"+
    "\2\213\1\215\7\213\1\216\5\213\1\207\3\0\4\207"+
    "\1\0\12\207\1\217\5\207\1\137\2\0\1\206\4\137"+
    "\1\206\2\137\1\0\4\137\1\220\1\0\3\137\2\0"+
    "\2\137\1\221\2\0\1\222\4\221\1\222\12\221\1\223"+
    "\2\221\1\224\2\221\1\0\2\225\1\226\2\0\1\227"+
    "\1\0\1\226\1\0\1\132\17\0\1\141\1\225\1\226"+
    "\2\0\1\227\1\0\1\226\1\0\1\132\21\0\1\143"+
    "\4\0\1\143\1\0\1\132\16\0\1\230\2\0\5\230"+
    "\1\0\20\230\1\145\2\0\1\231\4\145\1\231\2\145"+
    "\1\0\4\145\1\232\1\0\3\145\2\0\3\145\2\0"+
    "\1\231\1\233\3\145\1\231\2\145\1\0\4\145\1\232"+
    "\1\0\3\145\2\0\2\145\1\234\2\0\10\234\1\235"+
    "\15\234\1\236\2\0\23\236\1\237\2\236\6\0\2\152"+
    "\6\0\1\152\11\0\1\152\6\0\2\154\20\0\1\154"+
    "\1\0\2\240\1\241\2\0\1\242\1\0\1\241\1\163"+
    "\20\0\1\157\1\240\1\241\2\0\1\242\1\0\1\241"+
    "\1\163\22\0\1\161\4\0\1\161\1\163\17\0\1\243"+
    "\2\0\5\243\1\0\20\243\6\0\2\164\20\0\1\164"+
    "\6\0\2\165\20\0\1\165\1\0\2\244\1\245\2\0"+
    "\1\227\1\0\1\245\21\0\1\166\1\244\1\245\2\0"+
    "\1\227\1\0\1\245\20\0\1\246\2\0\5\246\1\0"+
    "\20\246\1\171\2\0\26\171\5\172\1\247\23\172\1\173"+
    "\2\56\10\173\2\171\14\173\1\174\2\0\5\174\2\171"+
    "\17\174\1\175\2\0\5\175\2\171\1\175\1\171\3\175"+
    "\2\171\3\175\1\171\4\175\1\176\2\0\5\176\2\171"+
    "\1\176\1\171\3\176\2\171\3\176\1\171\4\176\1\177"+
    "\2\0\10\177\1\250\3\177\1\0\11\177\1\0\2\204"+
    "\1\201\2\0\1\202\1\0\1\201\1\203\1\132\16\0"+
    "\1\251\2\0\5\251\1\0\20\251\1\0\3\204\4\0"+
    "\1\204\1\203\17\0\1\252\2\0\5\252\1\253\1\254"+
    "\17\252\3\0\1\206\4\0\1\206\7\0\1\255\10\0"+
    "\1\133\2\0\1\256\4\133\1\256\2\133\1\207\4\133"+
    "\1\210\1\207\1\133\1\211\1\133\2\207\2\133\1\257"+
    "\2\0\1\260\4\257\1\260\2\257\1\261\4\257\1\262"+
    "\1\263\3\257\2\263\2\257\1\212\2\0\1\264\4\212"+
    "\1\264\2\212\1\265\4\212\1\266\1\265\1\212\1\267"+
    "\1\212\2\265\2\212\1\214\2\0\10\214\1\270\15\214"+
    "\1\207\2\0\1\271\4\207\1\271\7\207\1\272\2\207"+
    "\1\217\5\207\1\273\2\0\10\273\1\274\15\273\1\263"+
    "\2\0\10\263\1\261\15\263\1\137\2\0\1\256\4\137"+
    "\1\256\2\137\1\0\4\137\1\220\1\0\3\137\2\0"+
    "\2\137\1\222\2\0\23\222\1\275\2\222\1\276\2\0"+
    "\10\276\1\277\12\276\1\300\2\276\1\207\2\0\1\301"+
    "\4\207\1\301\7\207\1\302\2\207\1\217\5\207\3\0"+
    "\1\226\2\0\1\227\1\0\1\226\1\0\1\132\16\0"+
    "\1\303\2\0\5\303\1\0\20\303\1\304\2\0\5\304"+
    "\1\305\1\306\17\304\3\0\1\231\4\0\1\231\7\0"+
    "\1\307\10\0\1\145\2\0\1\310\4\145\1\310\2\145"+
    "\1\0\4\145\1\232\1\0\3\145\2\0\2\145\1\233"+
    "\2\0\1\311\4\233\1\311\2\233\1\171\4\233\1\312"+
    "\1\171\3\233\2\171\2\233\3\0\1\313\4\0\1\313"+
    "\7\0\1\314\13\0\1\315\4\0\1\315\7\0\1\316"+
    "\13\0\1\241\2\0\1\242\1\0\1\241\1\163\17\0"+
    "\1\317\2\0\5\317\1\0\20\317\1\320\2\0\5\320"+
    "\1\321\1\322\17\320\3\0\1\245\2\0\1\227\1\0"+
    "\1\245\20\0\1\323\2\0\5\323\1\324\1\325\17\323"+
    "\4\172\1\326\1\247\23\172\1\327\2\0\5\327\1\330"+
    "\1\331\17\327\3\0\1\253\4\0\1\253\1\332\17\0"+
    "\1\252\2\0\1\254\4\252\1\333\1\254\17\252\1\137"+
    "\2\0\1\255\4\137\1\255\2\137\1\0\5\137\1\0"+
    "\3\137\2\0\2\137\1\257\2\0\1\260\4\257\1\260"+
    "\2\257\1\0\4\257\1\262\1\263\3\257\2\263\2\257"+
    "\1\263\2\0\1\260\4\263\1\260\2\263\1\0\4\263"+
    "\1\334\3\263\1\335\4\263\1\336\2\0\10\336\1\0"+
    "\15\336\1\257\2\0\1\337\4\257\1\337\2\257\1\0"+
    "\4\257\1\262\1\263\3\257\2\263\2\257\1\263\2\0"+
    "\10\263\1\0\10\263\1\335\4\263\1\171\2\0\1\264"+
    "\4\171\1\264\7\171\1\340\10\171\1\265\2\0\1\171"+
    "\4\265\1\171\12\265\1\341\5\265\1\212\2\0\1\342"+
    "\4\212\1\342\2\212\1\265\4\212\1\266\1\265\1\212"+
    "\1\267\1\212\2\265\2\212\1\343\2\0\1\344\4\343"+
    "\1\344\2\343\1\345\4\343\1\346\1\347\3\343\2\347"+
    "\2\343\3\0\1\271\4\0\1\271\7\0\1\350\10\0"+
    "\1\207\2\351\1\350\4\207\1\350\2\207\1\213\7\207"+
    "\1\217\5\207\1\273\2\0\10\273\1\270\10\273\1\352"+
    "\4\273\1\336\2\0\1\353\4\336\1\353\2\336\1\0"+
    "\4\336\1\354\10\336\3\0\1\301\4\0\1\301\7\0"+
    "\1\355\10\0\1\276\2\0\10\276\1\222\10\276\1\356"+
    "\1\276\1\300\2\276\1\357\2\0\10\357\1\222\12\357"+
    "\1\360\2\357\1\263\2\0\1\361\4\263\1\361\2\263"+
    "\1\0\4\263\1\362\3\263\1\335\4\263\1\207\2\363"+
    "\1\355\4\207\1\355\12\207\1\217\2\207\1\221\2\207"+
    "\1\364\2\0\5\364\1\365\1\366\17\364\3\0\1\305"+
    "\4\0\1\305\1\367\17\0\1\304\2\0\1\306\4\304"+
    "\1\370\1\306\17\304\1\145\2\0\1\307\4\145\1\307"+
    "\2\145\1\0\5\145\1\0\3\145\2\0\2\145\1\171"+
    "\2\0\1\311\4\171\1\311\7\171\1\371\10\171\1\233"+
    "\2\0\1\372\4\233\1\372\2\233\1\171\4\233\1\312"+
    "\1\171\3\233\2\171\2\233\1\0\2\373\1\314\4\0"+
    "\1\314\2\0\1\234\16\0\2\374\1\316\4\0\1\316"+
    "\15\0\1\236\2\0\1\375\2\0\5\375\1\376\1\377"+
    "\17\375\3\0\1\321\4\0\1\321\1\u0100\17\0\1\320"+
    "\2\0\1\322\4\320\1\u0101\1\322\17\320\3\0\1\324"+
    "\4\0\1\324\1\u0102\17\0\1\323\2\0\1\325\4\323"+
    "\1\u0103\1\325\17\323\3\0\1\330\4\0\1\330\1\u0104"+
    "\17\0\1\327\2\0\1\331\4\327\1\u0105\1\331\17\327"+
    "\1\u0106\2\0\1\u0107\4\u0106\1\332\21\u0106\2\0\1\u0108"+
    "\4\u0106\1\333\1\u0107\17\u0106\1\257\2\0\1\334\4\257"+
    "\1\334\2\257\1\0\5\257\1\263\3\257\2\263\2\257"+
    "\1\336\2\0\10\336\1\u0109\15\336\1\u010a\2\0\1\340"+
    "\4\u010a\1\340\2\u010a\1\171\5\u010a\1\171\3\u010a\2\171"+
    "\2\u010a\1\347\2\0\10\347\1\345\15\347\1\u010a\2\0"+
    "\1\342\4\u010a\1\342\2\u010a\1\171\4\u010a\1\u010b\1\171"+
    "\3\u010a\2\171\2\u010a\1\343\2\0\1\344\4\343\1\344"+
    "\2\343\1\171\4\343\1\346\1\347\3\343\2\347\2\343"+
    "\1\347\2\0\1\344\4\347\1\344\2\347\1\171\4\347"+
    "\1\u010c\3\347\1\u010d\4\347\1\u010e\2\0\10\u010e\1\171"+
    "\15\u010e\1\343\2\0\1\u010f\4\343\1\u010f\2\343\1\171"+
    "\4\343\1\346\1\347\3\343\2\347\2\343\1\347\2\0"+
    "\10\347\1\171\10\347\1\u010d\4\347\1\0\2\351\1\350"+
    "\4\0\1\350\2\0\1\214\16\0\2\351\1\u0110\4\0"+
    "\1\u0110\2\0\1\214\15\0\1\336\2\0\1\353\4\336"+
    "\1\353\2\336\1\u0109\4\336\1\354\11\336\2\351\1\354"+
    "\4\336\1\354\2\336\1\u0111\15\336\1\0\2\363\1\355"+
    "\4\0\1\355\15\0\1\222\2\0\1\357\2\0\10\357"+
    "\1\u0112\12\357\1\360\2\357\1\336\2\0\1\u0113\4\336"+
    "\1\u0113\2\336\1\u0109\4\336\1\u0114\10\336\1\263\2\363"+
    "\1\362\4\263\1\362\2\263\1\0\10\263\1\335\1\263"+
    "\1\276\2\263\1\0\2\363\1\u0115\4\0\1\u0115\15\0"+
    "\1\222\5\0\1\365\4\0\1\365\1\u0116\17\0\1\364"+
    "\2\0\1\366\4\364\1\u0117\1\366\17\364\1\u0118\2\0"+
    "\1\u0119\4\u0118\1\367\21\u0118\2\0\1\u011a\4\u0118\1\370"+
    "\1\u0119\17\u0118\1\233\2\0\1\371\4\233\1\371\2\233"+
    "\1\171\5\233\1\171\3\233\2\171\2\233\1\0\2\373"+
    "\1\u011b\4\0\1\u011b\2\0\1\234\16\0\2\374\1\u011c"+
    "\4\0\1\u011c\15\0\1\236\5\0\1\376\4\0\1\376"+
    "\1\u011d\17\0\1\375\2\0\1\377\4\375\1\u011e\1\377"+
    "\17\375\1\u011f\2\0\1\u0120\4\u011f\1\u0100\21\u011f\2\0"+
    "\1\u0121\4\u011f\1\u0101\1\u0120\17\u011f\1\u0122\2\0\1\u0123"+
    "\4\u0122\1\u0102\21\u0122\2\0\1\u0124\4\u0122\1\u0103\1\u0123"+
    "\17\u0122\1\u0125\2\0\1\u0126\4\u0125\1\u0104\21\u0125\2\0"+
    "\1\u0127\4\u0125\1\u0105\1\u0126\17\u0125\1\u0106\2\0\5\u0106"+
    "\1\0\20\u0106\24\0\1\u0128\4\0\1\u010a\2\0\1\264"+
    "\4\u010a\1\264\2\u010a\1\171\4\u010a\1\u010b\1\171\3\u010a"+
    "\2\171\2\u010a\1\343\2\0\1\u010c\4\343\1\u010c\2\343"+
    "\1\171\5\343\1\347\3\343\2\347\2\343\1\u010e\2\0"+
    "\10\u010e\1\u0129\15\u010e\3\0\1\u0110\4\0\1\u0110\2\0"+
    "\1\214\15\0\1\214\2\0\10\214\1\270\10\214\1\u012a"+
    "\4\214\1\222\2\0\21\222\1\u012b\1\222\1\275\2\222"+
    "\1\336\2\363\1\u0114\4\336\1\u0114\2\336\1\u0109\12\336"+
    "\1\357\2\336\3\0\1\u0115\4\0\1\u0115\15\0\1\222"+
    "\2\0\1\u012c\2\0\1\u012d\4\u012c\1\u0116\21\u012c\2\0"+
    "\1\u012e\4\u012c\1\u0117\1\u012d\17\u012c\1\u0118\2\0\5\u0118"+
    "\1\0\20\u0118\3\0\1\u011b\4\0\1\u011b\2\0\1\234"+
    "\20\0\1\u011c\4\0\1\u011c\15\0\1\236\2\0\1\u012f"+
    "\2\0\1\u0130\4\u012f\1\u011d\21\u012f\2\0\1\u0131\4\u012f"+
    "\1\u011e\1\u0130\17\u012f\1\u011f\2\0\5\u011f\1\0\20\u011f"+
    "\1\u0122\2\0\5\u0122\1\0\20\u0122\1\u0125\2\0\5\u0125"+
    "\1\0\20\u0125\1\171\2\0\21\171\1\u0132\4\171\1\u012c"+
    "\2\0\5\u012c\1\0\20\u012c\1\u012f\2\0\5\u012f\1\0"+
    "\20\u012f";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5575];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\37\0\2\11\4\1\4\11\2\1\2\11\2\1\2\11"+
    "\2\1\2\11\1\1\3\11\2\1\1\11\1\1\1\11"+
    "\1\1\1\11\3\1\1\11\1\1\1\11\1\1\2\11"+
    "\4\1\1\11\4\1\2\11\5\1\1\11\16\1\1\11"+
    "\1\1\1\11\1\1\2\11\4\1\1\11\6\1\1\0"+
    "\4\1\3\0\1\1\1\11\4\0\3\1\2\0\1\1"+
    "\2\0\1\1\3\0\1\1\2\0\1\1\2\0\2\1"+
    "\1\0\1\1\1\0\1\1\2\0\1\1\5\0\1\11"+
    "\1\0\1\1\1\0\1\1\2\0\1\1\2\0\1\1"+
    "\1\0\5\1\3\0\2\1\2\0\1\1\3\0\1\1"+
    "\1\0\1\1\2\0\2\1\5\0\1\1\1\0\2\1"+
    "\1\0\1\1\1\11\1\1\1\0\1\1\3\0\1\1"+
    "\2\0\10\1\2\0\1\1\3\0\1\1\1\0\1\1"+
    "\3\0\1\1\1\0\1\1\2\0\2\1\2\0\1\1"+
    "\1\0\1\1\6\0\3\1\1\0\6\1\10\0\3\1"+
    "\4\0\11\1\1\11\12\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[306];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CndLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 62: break;
          case 2: 
            { yybegin(YYINITIAL); return CndTypes.CRLF;
            } 
            // fall through
          case 63: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 64: break;
          case 4: 
            { if ("extends".equalsIgnoreCase(yytext().toString())) { yybegin(EXTENDS); return CndTypes.EXTENDS; } 
												  	else if ("itemtype".equalsIgnoreCase(yytext().toString())) { yybegin(ITEMTYPE); return CndTypes.ITEMTYPE; } 
    											  	else { yybegin(OPTIONS); return CndTypes.OPTION; }
            } 
            // fall through
          case 65: break;
          case 5: 
            { yybegin(NAMESPACE); return CndTypes.LEFT_ANGLE_BRACKET;
            } 
            // fall through
          case 66: break;
          case 6: 
            { yybegin(NODETYPE_NAMESPACE); return CndTypes.LEFT_BRACKET;
            } 
            // fall through
          case 67: break;
          case 7: 
            { yybegin(PROPERTY); return CndTypes.MINUS;
            } 
            // fall through
          case 68: break;
          case 8: 
            { yybegin(NODE); return CndTypes.PLUS;
            } 
            // fall through
          case 69: break;
          case 9: 
            { return CndTypes.NAMESPACE_NAME;
            } 
            // fall through
          case 70: break;
          case 10: 
            { return CndTypes.EQUAL;
            } 
            // fall through
          case 71: break;
          case 11: 
            { yybegin(NAMESPACE_URI); return CndTypes.SINGLE_QUOTE;
            } 
            // fall through
          case 72: break;
          case 12: 
            { return CndTypes.NAMESPACE_URI;
            } 
            // fall through
          case 73: break;
          case 13: 
            { return CndTypes.SINGLE_QUOTE;
            } 
            // fall through
          case 74: break;
          case 14: 
            { yybegin(YYINITIAL); return CndTypes.RIGHT_ANGLE_BRACKET;
            } 
            // fall through
          case 75: break;
          case 15: 
            { yybegin(NODETYPE); return CndTypes.NAMESPACE_NAME;
            } 
            // fall through
          case 76: break;
          case 16: 
            { return CndTypes.NODE_TYPE_NAME;
            } 
            // fall through
          case 77: break;
          case 17: 
            { return CndTypes.COLON;
            } 
            // fall through
          case 78: break;
          case 18: 
            { yybegin(NODETYPE_DONE); return CndTypes.RIGHT_BRACKET;
            } 
            // fall through
          case 79: break;
          case 19: 
            { yybegin(OPTIONS); return CndTypes.OPTION;
            } 
            // fall through
          case 80: break;
          case 20: 
            { yybegin(SUPER_TYPE_NAMESPACE); return CndTypes.RIGHT_ONLY_ANGLE_BRACKET;
            } 
            // fall through
          case 81: break;
          case 21: 
            { yybegin(SUPER_TYPE_NAME); return CndTypes.COLON;
            } 
            // fall through
          case 82: break;
          case 22: 
            { yybegin(YYINITIAL); yypushback(yylength()); return CndTypes.NODE_TYPE_NAME;
            } 
            // fall through
          case 83: break;
          case 23: 
            { yybegin(AFTER_SUPER_TYPE_NAME); return CndTypes.NODE_TYPE_NAME;
            } 
            // fall through
          case 84: break;
          case 24: 
            { yybegin(SUPER_TYPE_NAMESPACE); return CndTypes.COMMA;
            } 
            // fall through
          case 85: break;
          case 25: 
            { return CndTypes.OPTION;
            } 
            // fall through
          case 86: break;
          case 26: 
            { yybegin(EXTEND_NAMESPACE); return CndTypes.EQUAL;
            } 
            // fall through
          case 87: break;
          case 27: 
            { yybegin(EXTEND); return CndTypes.NAMESPACE_NAME;
            } 
            // fall through
          case 88: break;
          case 28: 
            { yybegin(EXTEND_NAMESPACE); return CndTypes.COMMA;
            } 
            // fall through
          case 89: break;
          case 29: 
            { return CndTypes.ITEMTYPE_TYPE;
            } 
            // fall through
          case 90: break;
          case 30: 
            { return CndTypes.PROPERTY_NAME;
            } 
            // fall through
          case 91: break;
          case 31: 
            { yybegin(PROPERTY_TYPE); return CndTypes.LEFT_PARENTHESIS;
            } 
            // fall through
          case 92: break;
          case 32: 
            { return CndTypes.PROPERTY_TYPE;
            } 
            // fall through
          case 93: break;
          case 33: 
            { yybegin(PROPERTY_MASK); return CndTypes.COMMA;
            } 
            // fall through
          case 94: break;
          case 34: 
            { yybegin(PROPERTY_DEFAULT); return CndTypes.RIGHT_PARENTHESIS;
            } 
            // fall through
          case 95: break;
          case 35: 
            { yybegin(PROPERTY_MASK_OPTION); return CndTypes.PROPERTY_MASK_OPTION;
            } 
            // fall through
          case 96: break;
          case 36: 
            { return CndTypes.PROPERTY_MASK;
            } 
            // fall through
          case 97: break;
          case 37: 
            { yybegin(PROPERTY_MASK_OPTION_NAME); return CndTypes.LEFT_BRACKET;
            } 
            // fall through
          case 98: break;
          case 38: 
            { return CndTypes.PROPERTY_MASK_OPTION_VALUE;
            } 
            // fall through
          case 99: break;
          case 39: 
            { return CndTypes.RIGHT_BRACKET;
            } 
            // fall through
          case 100: break;
          case 40: 
            { yybegin(PROPERTY_MASK_OPTION_NAME); return CndTypes.COMMA;
            } 
            // fall through
          case 101: break;
          case 41: 
            { yybegin(PROPERTY_ATTRIBUTES); return CndTypes.PROPERTY_ATTRIBUTE;
            } 
            // fall through
          case 102: break;
          case 42: 
            { yybegin(PROPERTY_DEFAULT_VALUE); return CndTypes.EQUAL;
            } 
            // fall through
          case 103: break;
          case 43: 
            { yybegin(PROPERTY_CONSTRAINT); return CndTypes.LEFT_ONLY_ANGLE_BRACKET;
            } 
            // fall through
          case 104: break;
          case 44: 
            { yybegin(PROPERTY_ATTRIBUTES); return CndTypes.PROPERTY_DEFAULT_VALUE;
            } 
            // fall through
          case 105: break;
          case 45: 
            { return CndTypes.PROPERTY_ATTRIBUTE;
            } 
            // fall through
          case 106: break;
          case 46: 
            { return CndTypes.PROPERTY_CONSTRAINT_VALUE;
            } 
            // fall through
          case 107: break;
          case 47: 
            { return CndTypes.NODE_NAME;
            } 
            // fall through
          case 108: break;
          case 48: 
            { yybegin(NODE_NAMESPACE); return CndTypes.LEFT_PARENTHESIS;
            } 
            // fall through
          case 109: break;
          case 49: 
            { yybegin(NODE_NODETYPE); return CndTypes.NAMESPACE_NAME;
            } 
            // fall through
          case 110: break;
          case 50: 
            { yybegin(NODE_NAMESPACE); return CndTypes.COMMA;
            } 
            // fall through
          case 111: break;
          case 51: 
            { yybegin(NODE_DEFAULT); return CndTypes.RIGHT_PARENTHESIS;
            } 
            // fall through
          case 112: break;
          case 52: 
            { yybegin(NODE_ATTRIBUTES); return CndTypes.NODE_ATTRIBUTE;
            } 
            // fall through
          case 113: break;
          case 53: 
            { yybegin(NODE_DEFAULT_VALUE_NAMESPACE); return CndTypes.EQUAL;
            } 
            // fall through
          case 114: break;
          case 54: 
            { yybegin(NODE_DEFAULT_VALUE); return CndTypes.NAMESPACE_NAME;
            } 
            // fall through
          case 115: break;
          case 55: 
            { yybegin(NODE_ATTRIBUTES); return CndTypes.NODE_TYPE_NAME;
            } 
            // fall through
          case 116: break;
          case 56: 
            { return CndTypes.NODE_ATTRIBUTE;
            } 
            // fall through
          case 117: break;
          case 57: 
            { return CndTypes.COMMENT;
            } 
            // fall through
          case 118: break;
          case 58: 
            { yypushback(yytext().toString().replaceAll("\\r", "").replaceAll("\\n", "").trim().length()); yybegin(PROPERTY_ATTRIBUTES); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 119: break;
          case 59: 
            { yypushback(1); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 120: break;
          case 60: 
            { yypushback(yytext().toString().replaceAll("\\r", "").replaceAll("\\n", "").trim().length()); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 121: break;
          case 61: 
            { yypushback(yytext().toString().replaceAll("\\r", "").replaceAll("\\n", "").trim().length()); yybegin(NODE_ATTRIBUTES); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 122: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
