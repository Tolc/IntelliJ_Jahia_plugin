{
  parserClass="fr.tolc.jahia.intellij.plugin.cnd.parser.CndParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Cnd"
  psiImplClassSuffix="Impl"
  psiPackage="fr.tolc.jahia.intellij.plugin.cnd.psi"
  psiImplPackage="fr.tolc.jahia.intellij.plugin.cnd.psi.impl"

  elementTypeHolderClass="fr.tolc.jahia.intellij.plugin.cnd.psi.CndTypes"
  elementTypeClass="fr.tolc.jahia.intellij.plugin.cnd.psi.CndElementType"
  tokenTypeClass="fr.tolc.jahia.intellij.plugin.cnd.psi.CndTokenType"

  psiImplUtilClass="fr.tolc.jahia.intellij.plugin.cnd.psi.CndPsiImplUtil"
}

cnd ::= (COMMENT|CRLF)* (namespace CRLF*)* (namespace | (nodeType | COMMENT | CRLF)*)



namespace ::= LEFT_ANGLE_BRACKET namespaceIdentifier EQUAL SINGLE_QUOTE NAMESPACE_URI SINGLE_QUOTE RIGHT_ANGLE_BRACKET
{ mixin="fr.tolc.jahia.intellij.plugin.cnd.psi.elements.impl.CndNamespaceElementImpl"
  implements="fr.tolc.jahia.intellij.plugin.cnd.psi.elements.CndNamespaceElement" 
  methods=[getNamespaceName setNamespaceName getNamespaceURI getPresentation] }
namespaceIdentifier ::= NAMESPACE_NAME
{ mixin="fr.tolc.jahia.intellij.plugin.cnd.psi.identifiers.impl.CndNamespaceIdentifierElementImpl"
  implements="fr.tolc.jahia.intellij.plugin.cnd.psi.identifiers.CndNamespaceIdentifierElement"
  methods=[getNamespaceName setNamespaceName getNameIdentifier getPresentation toString getName setName getNamespace] }



nodeType ::= LEFT_BRACKET NAMESPACE_NAME COLON nodeTypeIdentifier RIGHT_BRACKET [superTypes] [options] [COMMENT] [CRLF extensions] [COMMENT] [CRLF itemType] [COMMENT] [CRLF extensions] (CRLF+ COMMENT | CRLF+ property | CRLF+ subNode)* [CRLF]
{ mixin="fr.tolc.jahia.intellij.plugin.cnd.psi.elements.impl.CndNodeTypeElementImpl"
  implements="fr.tolc.jahia.intellij.plugin.cnd.psi.elements.CndNodeTypeElement" 
  methods=[getNodeTypeName setNodeTypeName getNodeTypeNamespace getPresentation toString equals hashCode getProperties getOwnProperties getProperty getOwnProperty getOptions isMixin getParentsNodeTypes getAncestorsNodeTypes getExtensions] }
nodeTypeIdentifier ::= NODE_TYPE_NAME
{ mixin="fr.tolc.jahia.intellij.plugin.cnd.psi.identifiers.impl.CndNodeTypeIdentifierElementImpl"
  implements="fr.tolc.jahia.intellij.plugin.cnd.psi.identifiers.CndNodeTypeIdentifierElement" 
  methods=[getNodeTypeName setNodeTypeName getNameIdentifier getPresentation getName setName getNodeType] }

superTypes ::= RIGHT_ONLY_ANGLE_BRACKET superType (COMMA superType)* [COMMA]
superType ::= NAMESPACE_NAME COLON NODE_TYPE_NAME
{ mixin="fr.tolc.jahia.intellij.plugin.cnd.psi.elements.impl.CndSuperTypeElementImpl"
  implements="fr.tolc.jahia.intellij.plugin.cnd.psi.elements.CndSuperTypeElement"
  methods=[getReferences getNodeTypeName getNodeTypeNamespace] }

private options ::= ([CRLF] nodeOption)+
nodeOption ::= OPTION

extensions ::= EXTENDS EQUAL extension (COMMA extension)*
extension ::= NAMESPACE_NAME COLON NODE_TYPE_NAME
{ mixin="fr.tolc.jahia.intellij.plugin.cnd.psi.elements.impl.CndExtensionElementImpl"
  implements="fr.tolc.jahia.intellij.plugin.cnd.psi.elements.CndExtensionElement"
  methods=[getReferences getNodeTypeNamespace getNodeTypeName] }

itemType ::= ITEMTYPE EQUAL ITEMTYPE_TYPE



property ::= MINUS propertyIdentifier [propertyType] [propertyDefault] [propertyAttributes] [propertyConstraint]
{ mixin="fr.tolc.jahia.intellij.plugin.cnd.psi.elements.impl.CndPropertyElementImpl"
  implements="fr.tolc.jahia.intellij.plugin.cnd.psi.elements.CndPropertyElement"
  methods=[getPropertyName setPropertyName getType getTypeMask getPresentation toString hasAttribute isMultiple getNodeType] }
propertyIdentifier ::= PROPERTY_NAME
{ mixin="fr.tolc.jahia.intellij.plugin.cnd.psi.identifiers.impl.CndPropertyIdentifierElementImpl"
  implements="fr.tolc.jahia.intellij.plugin.cnd.psi.identifiers.CndPropertyIdentifierElement"
  methods=[getPropertyName setPropertyName getNameIdentifier getPresentation getName setName getProperty] }
private propertyType ::= LEFT_PARENTHESIS PROPERTY_TYPE [COMMA PROPERTY_MASK [propertyMaskOptions]] RIGHT_PARENTHESIS
private propertyMaskOptions ::= LEFT_BRACKET propertyTypeMaskOption (COMMA propertyTypeMaskOption)* RIGHT_BRACKET 
propertyTypeMaskOption ::= PROPERTY_MASK_OPTION [EQUAL PROPERTY_MASK_OPTION_VALUE]

propertyDefault ::= EQUAL PROPERTY_DEFAULT_VALUE

propertyAttributes ::= PROPERTY_ATTRIBUTE+

propertyConstraint ::= LEFT_ONLY_ANGLE_BRACKET PROPERTY_CONSTRAINT_VALUE



subNode ::= PLUS NODE_NAME LEFT_PARENTHESIS subNodeTypes RIGHT_PARENTHESIS [subNodeDefault] [subNodeAttributes]
{ mixin="fr.tolc.jahia.intellij.plugin.cnd.psi.elements.impl.CndSubNodeElementImpl"
  implements="fr.tolc.jahia.intellij.plugin.cnd.psi.elements.CndSubNodeElement"
  methods=[getSubNodeName] }
private subNodeTypes ::= subNodeType (COMMA subNodeType)*
subNodeType ::= NAMESPACE_NAME COLON NODE_TYPE_NAME
{ mixin="fr.tolc.jahia.intellij.plugin.cnd.psi.elements.impl.CndSubNodeTypeElementImpl"
  implements="fr.tolc.jahia.intellij.plugin.cnd.psi.elements.CndSubNodeTypeElement"
  methods=[getReferences] }

private subNodeDefault ::= EQUAL subNodeDefaultType
subNodeDefaultType ::= NAMESPACE_NAME COLON NODE_TYPE_NAME
{ mixin="fr.tolc.jahia.intellij.plugin.cnd.psi.elements.impl.CndSubNodeDefaultTypeElementImpl"
  implements="fr.tolc.jahia.intellij.plugin.cnd.psi.elements.CndSubNodeDefaultTypeElement"
  methods=[getReferences] }

subNodeAttributes ::= NODE_ATTRIBUTE+