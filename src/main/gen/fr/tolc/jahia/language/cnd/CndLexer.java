/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package fr.tolc.jahia.language.cnd;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import fr.tolc.jahia.language.cnd.psi.CndTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Cnd.flex</tt>
 */
class CndLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int NS = 2;
  public static final int NS_SEP = 4;
  public static final int NS_URI = 6;
  public static final int NT = 8;
  public static final int NT_AFTER = 10;
  public static final int ST = 12;
  public static final int ST_AFTER = 14;
  public static final int OPT = 16;
  public static final int OPT_VALUE = 18;
  public static final int OPT_VALUE_AFTER = 20;
  public static final int PROP = 22;
  public static final int PROP_AFTER = 24;
  public static final int PROP_TYPE = 26;
  public static final int PROP_TYPE_MASK = 28;
  public static final int PROP_TYPE_MASK_OPT = 30;
  public static final int PROP_TYPE_MASK_OPT_VALUE = 32;
  public static final int PROP_TYPE_MASK_OPT_AFTER = 34;
  public static final int PROP_TYPE_AFTER = 36;
  public static final int PROP_DEFAULT = 38;
  public static final int PROP_DEFAULT_VALUE = 40;
  public static final int PROP_DEFAULT_VALUE_AFTER = 42;
  public static final int PROP_ATTR = 44;
  public static final int PROP_CONST = 46;
  public static final int PROP_CONST_VALUE = 48;
  public static final int SUB = 50;
  public static final int SUB_AFTER = 52;
  public static final int SUB_TYPE = 54;
  public static final int SUB_TYPE_AFTER = 56;
  public static final int SUB_DEFAULT = 58;
  public static final int SUB_DEFAULT_VALUE = 60;
  public static final int SUB_DEFAULT_VALUE_AFTER = 62;
  public static final int SUB_ATTR = 64;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 
    32, 32
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\1\23\1\3\1\1\22\0\1\3\1\0\1\10\4\0\1\7\1\21\1\22\1\6\1\20\1"+
    "\16\1\17\1\0\1\5\14\0\1\12\1\11\1\13\34\0\1\14\1\0\1\15\47\0\1\23\32\0\1\4"+
    "\337\0\1\4\177\0\13\4\35\0\2\23\5\0\1\4\57\0\1\4\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\41\0\1\1\2\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\2\10\1\11\1\12\2\13\1\14\1\15\2\16"+
    "\1\17\1\20\2\2\1\3\1\1\1\21\1\0\2\22"+
    "\2\2\1\3\1\1\1\23\1\0\1\24\2\2\1\3"+
    "\1\1\1\24\1\25\1\0\2\26\1\27\2\30\1\31"+
    "\2\2\1\3\1\1\1\32\1\33\1\34\1\0\2\35"+
    "\1\36\1\37\1\40\2\41\1\42\2\43\1\44\1\45"+
    "\1\46\3\47\1\50\2\2\1\3\1\1\1\0\1\51"+
    "\4\52\2\2\1\3\1\1\1\0\1\53\2\2\1\3"+
    "\1\1\1\53\1\0\1\54\4\55\2\56\1\57\2\2"+
    "\1\3\1\1\1\60\1\61\1\0\2\62\1\63\1\64"+
    "\1\65\2\2\1\3\1\1\1\0\1\66\2\67\2\2"+
    "\1\3\1\1\1\0\2\70\1\71\1\0\2\10\2\13"+
    "\2\16\2\22\1\72\2\24\2\26\2\30\2\35\2\41"+
    "\2\43\2\47\2\0\3\52\1\0\2\52\1\0\2\52"+
    "\1\0\2\53\1\0\2\53\1\0\3\55\1\0\2\55"+
    "\1\0\2\55\2\56\2\62\2\67\1\0\2\70\1\0"+
    "\2\70\1\0\1\10\1\13\1\16\1\22\1\24\1\26"+
    "\1\30\1\35\1\41\1\43\2\47\2\0\1\71\1\52"+
    "\1\0\2\52\1\0\1\52\2\0\1\52\2\0\1\52"+
    "\2\0\1\52\4\0\1\53\3\0\1\53\1\71\2\53"+
    "\1\71\1\0\3\53\3\0\1\71\1\55\1\0\2\55"+
    "\1\0\1\55\2\0\1\55\2\0\1\55\2\0\1\55"+
    "\1\0\1\56\1\62\1\67\3\0\1\70\3\0\1\70"+
    "\1\71\2\70\1\71\1\0\3\70\1\0\3\71\12\0"+
    "\2\53\3\0\3\53\3\71\1\53\3\71\1\53\3\0"+
    "\2\53\2\0\1\53\1\0\2\53\2\71\12\0\2\70"+
    "\3\0\3\70\3\71\1\70\3\71\1\70\3\0\2\70"+
    "\2\0\1\70\1\0\2\70\4\53\3\71\3\53\1\0"+
    "\1\53\1\0\1\53\2\0\1\53\1\0\5\53\4\70"+
    "\3\71\3\70\1\0\1\70\1\0\1\70\2\0\1\70"+
    "\1\0\5\70\2\53\2\71\1\0\3\53\2\70\2\71"+
    "\1\0\3\70\2\71";

  private static int [] zzUnpackAction() {
    int [] result = new int[459];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\24\0\50\0\74\0\120\0\144\0\170\0\214"+
    "\0\240\0\264\0\310\0\334\0\360\0\u0104\0\u0118\0\u012c"+
    "\0\u0140\0\u0154\0\u0168\0\u017c\0\u0190\0\u01a4\0\u01b8\0\u01cc"+
    "\0\u01e0\0\u01f4\0\u0208\0\u021c\0\u0230\0\u0244\0\u0258\0\u026c"+
    "\0\u0280\0\u0294\0\u02a8\0\u0294\0\u0294\0\u02bc\0\u0294\0\u0294"+
    "\0\u0294\0\u0294\0\u02d0\0\u02e4\0\u0294\0\u0294\0\u02f8\0\u030c"+
    "\0\u0294\0\u0294\0\u0320\0\u0334\0\u0294\0\u0294\0\u0348\0\u035c"+
    "\0\u035c\0\u035c\0\u0294\0\u035c\0\u0370\0\u0384\0\u0398\0\u03ac"+
    "\0\u03ac\0\u03ac\0\u0294\0\u03ac\0\u03c0\0\u03d4\0\u03e8\0\u03e8"+
    "\0\u03e8\0\u03fc\0\u0294\0\u03e8\0\u0410\0\u0424\0\u0294\0\u0438"+
    "\0\u044c\0\u0294\0\u0460\0\u0474\0\u0474\0\u0474\0\u0294\0\u0294"+
    "\0\u0294\0\u0474\0\u0488\0\u049c\0\u0294\0\u0294\0\u0294\0\u04b0"+
    "\0\u04c4\0\u0294\0\u04d8\0\u04ec\0\u0294\0\u0294\0\u0294\0\u0500"+
    "\0\u0514\0\u0528\0\u0294\0\u053c\0\u0550\0\u0550\0\u0550\0\u0550"+
    "\0\u0294\0\u0564\0\u0578\0\u058c\0\u05a0\0\u05b4\0\u05c8\0\u05c8"+
    "\0\u05c8\0\u05c8\0\u05dc\0\u05f0\0\u0604\0\u0604\0\u0604\0\u0618"+
    "\0\u0604\0\u0294\0\u062c\0\u0640\0\u0654\0\u0668\0\u067c\0\u0690"+
    "\0\u0294\0\u06a4\0\u06b8\0\u06b8\0\u06b8\0\u0294\0\u0294\0\u06b8"+
    "\0\u06cc\0\u06e0\0\u0294\0\u0294\0\u0294\0\u06f4\0\u0708\0\u0708"+
    "\0\u0708\0\u0708\0\u0294\0\u071c\0\u0730\0\u0744\0\u0758\0\u0758"+
    "\0\u0758\0\u0758\0\u076c\0\u0780\0\u0794\0\u07a8\0\u07bc\0\u07d0"+
    "\0\u07e4\0\u07f8\0\u080c\0\u0820\0\u0834\0\u0848\0\u0294\0\u085c"+
    "\0\u0870\0\u0884\0\u0898\0\u08ac\0\u08c0\0\u08d4\0\u08e8\0\u08fc"+
    "\0\u0910\0\u0924\0\u0938\0\u094c\0\u0960\0\u0974\0\u0988\0\u099c"+
    "\0\u09b0\0\u09c4\0\u09d8\0\u09ec\0\u0a00\0\u0a14\0\u0a28\0\u0a3c"+
    "\0\u0a50\0\u0a64\0\u0a78\0\u0a8c\0\u0aa0\0\u0ab4\0\u0ac8\0\u0adc"+
    "\0\u0af0\0\u0b04\0\u0b18\0\u0b2c\0\u0b40\0\u0b54\0\u0b68\0\u0b7c"+
    "\0\u0b90\0\u0ba4\0\u0bb8\0\u0bcc\0\u0be0\0\u0bf4\0\u0c08\0\u0c1c"+
    "\0\u0c30\0\u0c44\0\u0c58\0\u0c6c\0\u0c80\0\u0c94\0\u0ca8\0\u0cbc"+
    "\0\u0cd0\0\u0ce4\0\u0cf8\0\u0d0c\0\u0d20\0\u0d34\0\u0d48\0\u0d5c"+
    "\0\u0294\0\u0d70\0\u099c\0\u0d84\0\u0d98\0\u0dac\0\u0dc0\0\u0dd4"+
    "\0\u0de8\0\u0dfc\0\u0e10\0\u0e24\0\u0e38\0\u0a00\0\u0e4c\0\u0e60"+
    "\0\u0e74\0\u0e88\0\u0e9c\0\u0a3c\0\u0eb0\0\u0ec4\0\u0ed8\0\u0eec"+
    "\0\u0f00\0\u0f14\0\u0f28\0\u0f3c\0\u0f50\0\u0f64\0\u0f78\0\u0f8c"+
    "\0\u0fa0\0\u0fb4\0\u0fc8\0\u0fdc\0\u0ff0\0\u1004\0\u0adc\0\u1018"+
    "\0\u102c\0\u1040\0\u1054\0\u1068\0\u107c\0\u1090\0\u10a4\0\u10b8"+
    "\0\u10cc\0\u0b40\0\u10e0\0\u10f4\0\u1108\0\u111c\0\u1130\0\u0b7c"+
    "\0\u1144\0\u1158\0\u116c\0\u1180\0\u1194\0\u11a8\0\u11bc\0\u11d0"+
    "\0\u11e4\0\u11f8\0\u120c\0\u1220\0\u1234\0\u1248\0\u125c\0\u1270"+
    "\0\u1284\0\u1298\0\u12ac\0\u12c0\0\u0294\0\u12d4\0\u0d98\0\u12e8"+
    "\0\u0dd4\0\u0dfc\0\u12fc\0\u1310\0\u0e38\0\u0e60\0\u1324\0\u1338"+
    "\0\u0e9c\0\u0294\0\u0eb0\0\u134c\0\u1360\0\u1374\0\u1388\0\u0ec4"+
    "\0\u139c\0\u13b0\0\u13c4\0\u13d8\0\u13ec\0\u1400\0\u1414\0\u1428"+
    "\0\u143c\0\u1450\0\u1464\0\u1478\0\u148c\0\u14a0\0\u14b4\0\u14c8"+
    "\0\u14dc\0\u14f0\0\u1504\0\u1518\0\u152c\0\u102c\0\u1540\0\u1068"+
    "\0\u1090\0\u1554\0\u1568\0\u10cc\0\u10f4\0\u157c\0\u1590\0\u1130"+
    "\0\u0294\0\u1180\0\u15a4\0\u15b8\0\u15cc\0\u15e0\0\u1194\0\u15f4"+
    "\0\u1608\0\u161c\0\u1630\0\u1644\0\u1658\0\u166c\0\u1680\0\u1694"+
    "\0\u16a8\0\u16bc\0\u16d0\0\u16e4\0\u16f8\0\u170c\0\u1720\0\u1734"+
    "\0\u1748\0\u175c\0\u1770\0\u134c\0\u1784\0\u0794\0\u13b0\0\u1798"+
    "\0\u17ac\0\u17c0\0\u17d4\0\u13c4\0\u17e8\0\u17fc\0\u07a8\0\u1810"+
    "\0\u1450\0\u1824\0\u1838\0\u184c\0\u1860\0\u1874\0\u1888\0\u1464"+
    "\0\u189c\0\u18b0\0\u15a4\0\u18c4\0\u0794\0\u1608\0\u18d8\0\u18ec"+
    "\0\u1900\0\u1914\0\u161c\0\u1928\0\u193c\0\u07a8\0\u1950\0\u16a8"+
    "\0\u1964\0\u1978\0\u198c\0\u19a0\0\u19b4\0\u19c8\0\u16bc\0\u19dc"+
    "\0\u19f0\0\u1798\0\u1a04\0\u0eb0\0\u0ec4\0\u1a18\0\u1824\0\u1a2c"+
    "\0\u1a40\0\u18d8\0\u1a54\0\u1180\0\u1194\0\u1a68\0\u1964\0\u1a7c"+
    "\0\u1a90\0\u134c\0\u15a4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[459];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\42\1\43\1\44\1\45\1\42\1\46\4\42\1\47"+
    "\1\42\1\50\2\42\1\51\1\52\2\42\1\0\1\53"+
    "\1\43\1\44\1\45\1\42\1\54\3\53\1\42\11\53"+
    "\1\0\1\42\1\43\1\44\1\45\1\42\1\46\1\42"+
    "\1\55\1\42\1\56\11\42\1\0\5\57\1\60\1\57"+
    "\1\61\3\57\1\62\10\57\5\63\1\64\7\63\1\65"+
    "\6\63\1\66\1\67\1\70\1\71\1\72\1\46\5\66"+
    "\1\73\1\42\2\66\2\42\2\66\1\74\1\75\1\43"+
    "\1\44\1\45\1\42\1\76\10\75\1\42\4\75\1\0"+
    "\1\66\1\77\1\100\1\101\1\102\1\46\6\66\1\42"+
    "\1\66\1\103\2\42\2\66\1\104\1\105\1\106\1\107"+
    "\1\110\1\111\1\112\3\105\1\113\11\105\1\114\1\115"+
    "\1\43\1\44\1\45\1\42\1\116\10\115\1\42\4\115"+
    "\1\0\1\66\1\77\1\100\1\101\1\102\1\46\6\66"+
    "\1\42\1\66\1\117\2\42\2\66\1\104\1\120\1\43"+
    "\1\44\1\45\1\42\1\121\3\120\2\42\6\120\1\42"+
    "\1\120\1\0\1\122\1\123\1\124\1\125\1\126\1\46"+
    "\3\122\1\127\1\130\1\122\1\42\2\122\2\42\1\131"+
    "\1\122\1\132\5\133\1\134\10\133\1\135\2\133\1\136"+
    "\1\137\1\133\5\140\1\141\6\140\1\142\5\140\1\137"+
    "\1\140\1\143\1\43\1\44\1\45\1\42\1\144\3\143"+
    "\1\145\3\143\1\146\1\147\4\143\1\0\1\150\1\43"+
    "\1\44\1\45\1\42\1\151\1\150\1\152\5\150\1\146"+
    "\1\153\4\150\1\0\1\42\1\43\1\44\1\45\1\42"+
    "\1\46\14\42\1\137\1\0\1\122\1\154\1\155\1\156"+
    "\1\157\1\46\3\122\1\127\1\130\1\122\1\42\2\122"+
    "\3\42\1\122\1\160\1\42\1\43\1\44\1\45\1\42"+
    "\1\46\3\42\1\161\11\42\1\0\1\162\1\43\1\44"+
    "\1\45\1\42\1\163\1\162\1\164\1\165\12\162\1\0"+
    "\1\122\1\166\1\167\1\170\1\171\1\46\4\122\1\130"+
    "\1\122\1\42\2\122\2\42\2\122\1\172\1\173\1\174"+
    "\1\175\1\176\1\177\1\200\3\173\1\42\11\173\1\201"+
    "\1\42\1\43\1\44\1\45\1\42\1\46\4\42\1\202"+
    "\10\42\1\0\1\203\1\43\1\44\1\45\1\42\1\204"+
    "\1\203\1\205\1\206\12\203\1\0\1\207\1\43\1\44"+
    "\1\45\1\42\1\210\3\207\1\42\7\207\1\42\1\207"+
    "\1\0\1\211\1\212\1\213\1\214\1\215\1\46\3\211"+
    "\1\216\2\211\1\42\2\211\2\42\1\217\1\211\1\220"+
    "\5\221\1\222\10\221\1\223\2\221\1\224\1\225\1\221"+
    "\1\211\1\226\1\227\1\230\1\231\1\46\3\211\1\216"+
    "\2\211\1\42\2\211\2\42\2\211\1\232\1\42\1\43"+
    "\1\44\1\45\1\42\1\46\3\42\1\233\11\42\1\0"+
    "\1\234\1\43\1\44\1\45\1\42\1\235\15\234\1\0"+
    "\1\211\1\236\1\237\1\240\1\241\1\46\6\211\1\42"+
    "\2\211\2\42\2\211\1\242\1\243\1\43\1\44\1\45"+
    "\1\42\1\244\3\243\1\42\11\243\27\0\1\44\26\0"+
    "\1\245\1\246\15\0\1\53\4\0\4\53\1\0\11\53"+
    "\1\0\1\53\4\0\1\247\1\250\2\53\1\0\11\53"+
    "\1\0\7\57\1\0\3\57\1\0\15\57\1\251\1\252"+
    "\1\0\3\57\1\0\10\57\15\63\1\0\13\63\1\253"+
    "\1\254\6\63\1\0\6\63\1\66\1\74\1\70\2\74"+
    "\1\0\5\66\2\0\2\66\2\0\2\66\1\74\1\66"+
    "\4\74\1\0\5\66\2\0\2\66\2\0\2\66\1\74"+
    "\1\75\4\0\11\75\1\0\4\75\1\0\1\75\4\0"+
    "\1\255\1\256\7\75\1\0\4\75\1\0\1\66\1\104"+
    "\1\100\2\104\1\0\6\66\1\0\1\66\3\0\2\66"+
    "\1\104\1\66\4\104\1\0\6\66\1\0\1\66\3\0"+
    "\2\66\1\104\1\105\4\0\4\105\1\0\11\105\1\0"+
    "\1\257\1\114\1\107\2\114\1\0\6\257\1\0\2\257"+
    "\2\0\2\257\1\114\1\257\4\114\1\0\6\257\1\0"+
    "\2\257\2\0\2\257\1\114\1\105\4\0\1\260\1\261"+
    "\2\105\1\0\11\105\1\0\1\115\4\0\11\115\1\0"+
    "\4\115\1\0\1\115\4\0\1\262\1\263\7\115\1\0"+
    "\4\115\1\0\1\120\4\0\4\120\2\0\6\120\1\0"+
    "\1\120\1\0\1\120\4\0\1\264\1\265\2\120\2\0"+
    "\6\120\1\0\1\120\1\0\1\122\1\132\1\124\2\132"+
    "\1\0\3\122\1\127\1\130\1\122\1\0\2\122\2\0"+
    "\1\131\1\122\1\132\1\122\4\132\1\0\3\122\1\127"+
    "\1\130\1\122\1\0\2\122\2\0\1\131\1\122\1\132"+
    "\16\133\1\0\2\133\2\0\6\133\1\266\1\267\7\133"+
    "\1\0\2\133\2\0\1\133\14\140\1\0\5\140\1\0"+
    "\6\140\1\270\1\271\5\140\1\0\5\140\1\0\1\140"+
    "\1\143\4\0\4\143\1\0\3\143\2\0\4\143\1\0"+
    "\1\143\4\0\1\272\1\273\2\143\1\0\3\143\2\0"+
    "\4\143\1\0\1\150\4\0\10\150\2\0\4\150\1\0"+
    "\1\150\4\0\1\274\1\275\6\150\2\0\4\150\1\0"+
    "\1\152\4\276\2\152\1\150\5\152\2\276\4\152\1\276"+
    "\1\122\1\160\1\155\2\160\1\0\3\122\1\127\1\130"+
    "\1\122\1\0\2\122\3\0\1\122\1\160\1\122\4\160"+
    "\1\0\3\122\1\127\1\130\1\122\1\0\2\122\3\0"+
    "\1\122\1\160\1\162\4\277\11\162\1\300\4\162\1\277"+
    "\1\162\4\277\1\301\1\302\7\162\1\300\4\162\1\277"+
    "\1\164\4\303\2\164\1\304\6\164\1\305\4\164\1\303"+
    "\1\165\4\306\3\165\1\307\5\165\1\310\4\165\1\306"+
    "\1\122\1\172\1\167\2\172\1\0\4\122\1\130\1\122"+
    "\1\0\2\122\2\0\2\122\1\172\1\122\4\172\1\0"+
    "\4\122\1\130\1\122\1\0\2\122\2\0\2\122\1\172"+
    "\1\173\2\0\1\311\1\0\2\173\1\312\1\313\1\314"+
    "\11\173\2\0\1\201\1\175\2\201\5\0\1\130\10\0"+
    "\1\201\1\0\4\201\5\0\1\130\10\0\1\201\1\173"+
    "\2\0\1\311\1\0\1\315\1\316\1\312\1\313\1\314"+
    "\11\173\1\0\1\203\4\317\11\203\1\320\4\203\1\317"+
    "\1\203\4\317\1\321\1\322\7\203\1\320\4\203\1\317"+
    "\1\205\4\323\2\205\1\324\6\205\1\325\4\205\1\323"+
    "\1\206\4\326\3\206\1\327\5\206\1\330\4\206\1\326"+
    "\1\207\4\0\4\207\1\0\7\207\1\0\1\207\1\0"+
    "\1\207\4\0\1\331\1\332\2\207\1\0\7\207\1\0"+
    "\1\207\1\0\1\211\1\220\1\213\2\220\1\0\3\211"+
    "\1\216\2\211\1\0\2\211\2\0\1\217\1\211\1\220"+
    "\1\211\4\220\1\0\3\211\1\216\2\211\1\0\2\211"+
    "\2\0\1\217\1\211\1\220\16\221\1\0\2\221\2\0"+
    "\6\221\1\333\1\334\7\221\1\0\2\221\2\0\1\221"+
    "\1\211\1\232\1\227\2\232\1\0\3\211\1\216\2\211"+
    "\1\0\2\211\2\0\2\211\1\232\1\211\4\232\1\0"+
    "\3\211\1\216\2\211\1\0\2\211\2\0\2\211\1\232"+
    "\1\234\4\0\16\234\1\0\1\234\4\0\1\335\1\336"+
    "\14\234\1\0\1\211\1\242\1\237\2\242\1\0\6\211"+
    "\1\0\2\211\2\0\2\211\1\242\1\211\4\242\1\0"+
    "\6\211\1\0\2\211\2\0\2\211\1\242\1\243\2\0"+
    "\1\337\1\0\2\243\1\340\1\341\1\342\11\243\1\0"+
    "\1\243\2\0\1\337\1\0\1\343\1\344\1\340\1\341"+
    "\1\342\11\243\1\0\1\245\2\0\21\245\6\246\1\345"+
    "\15\246\1\247\2\0\2\245\4\247\1\245\11\247\1\245"+
    "\1\250\4\246\1\250\1\346\2\250\1\246\11\250\1\246"+
    "\1\251\2\57\4\251\1\245\3\251\1\245\10\251\6\252"+
    "\1\347\1\246\3\252\1\246\10\252\1\253\2\63\12\253"+
    "\1\245\6\253\6\254\1\350\6\254\1\246\6\254\1\255"+
    "\2\0\2\245\11\255\1\245\4\255\1\245\1\256\4\246"+
    "\1\256\1\351\7\256\1\246\4\256\1\246\1\260\2\0"+
    "\2\245\4\260\1\245\11\260\1\245\1\261\4\246\1\261"+
    "\1\352\2\261\1\246\11\261\1\246\1\262\2\0\2\245"+
    "\11\262\1\245\4\262\1\245\1\263\4\246\1\263\1\353"+
    "\7\263\1\246\4\263\1\246\1\264\2\0\2\245\4\264"+
    "\2\245\6\264\1\245\1\264\1\245\1\265\4\246\1\265"+
    "\1\354\2\265\2\246\6\265\1\246\1\265\1\246\1\266"+
    "\2\133\13\266\1\245\2\266\2\245\1\266\6\267\1\355"+
    "\7\267\1\246\2\267\2\246\1\267\1\270\2\140\11\270"+
    "\1\245\5\270\1\245\1\270\6\271\1\356\5\271\1\246"+
    "\5\271\1\246\1\271\1\272\2\0\2\245\4\272\1\245"+
    "\3\272\2\245\4\272\1\245\1\273\4\246\1\273\1\357"+
    "\2\273\1\246\3\273\2\246\4\273\1\246\1\274\2\0"+
    "\2\245\10\274\2\245\4\274\1\245\1\275\4\246\1\275"+
    "\1\360\6\275\2\246\4\275\1\246\7\276\1\361\14\276"+
    "\1\0\4\277\11\0\1\362\4\0\1\277\1\162\4\363"+
    "\11\162\1\300\4\162\1\363\1\301\2\277\2\364\11\301"+
    "\1\365\4\301\1\364\1\302\4\366\1\302\1\367\7\302"+
    "\1\370\4\302\1\366\1\371\4\303\2\371\1\372\6\371"+
    "\1\373\4\371\1\303\1\162\4\374\11\162\1\375\4\162"+
    "\1\374\1\164\4\376\2\164\1\304\6\164\1\305\4\164"+
    "\1\376\1\377\4\306\3\377\1\u0100\5\377\1\u0101\4\377"+
    "\1\306\1\162\4\u0102\11\162\1\u0103\4\162\1\u0102\1\165"+
    "\4\u0104\3\165\1\307\5\165\1\310\4\165\1\u0104\3\0"+
    "\1\311\3\0\1\u0105\1\u0106\1\314\12\0\1\312\2\u0105"+
    "\1\u0107\1\u0105\3\312\1\u0108\1\u0109\11\312\1\u0105\1\313"+
    "\2\u0106\1\u010a\1\u0106\2\313\1\u0108\1\313\1\u010b\11\313"+
    "\1\u0106\1\u010c\2\0\1\314\1\0\16\u010c\1\0\1\315"+
    "\2\0\1\u010d\1\245\2\315\1\u010e\1\u010f\1\u0110\11\315"+
    "\1\245\1\316\2\246\1\u0111\1\246\1\316\1\u0112\1\u0113"+
    "\1\u0114\1\u0115\11\316\1\246\1\0\4\317\11\0\1\u0116"+
    "\4\0\1\317\1\203\4\u0117\11\203\1\320\4\203\1\u0117"+
    "\1\321\2\317\2\u0118\11\321\1\u0119\4\321\1\u0118\1\322"+
    "\4\u011a\1\322\1\u011b\7\322\1\u011c\4\322\1\u011a\1\u011d"+
    "\4\323\2\u011d\1\u011e\6\u011d\1\u011f\4\u011d\1\323\1\203"+
    "\4\u0120\11\203\1\u0121\4\203\1\u0120\1\205\4\u0122\2\205"+
    "\1\324\6\205\1\325\4\205\1\u0122\1\u0123\4\326\3\u0123"+
    "\1\u0124\5\u0123\1\u0125\4\u0123\1\326\1\203\4\u0126\11\203"+
    "\1\u0127\4\203\1\u0126\1\206\4\u0128\3\206\1\327\5\206"+
    "\1\330\4\206\1\u0128\1\331\2\0\2\245\4\331\1\245"+
    "\7\331\1\245\1\331\1\245\1\332\4\246\1\332\1\u0129"+
    "\2\332\1\246\7\332\1\246\1\332\1\246\1\333\2\221"+
    "\13\333\1\245\2\333\2\245\1\333\6\334\1\u012a\7\334"+
    "\1\246\2\334\2\246\1\334\1\335\2\0\2\245\16\335"+
    "\1\245\1\336\4\246\1\336\1\u012b\14\336\1\246\3\0"+
    "\1\337\3\0\1\u012c\1\u012d\1\342\12\0\1\340\2\u012c"+
    "\1\u012e\1\u012c\3\340\1\u012f\1\u0130\11\340\1\u012c\1\341"+
    "\2\u012d\1\u0131\1\u012d\2\341\1\u012f\1\341\1\u0132\11\341"+
    "\1\u012d\1\u0133\2\0\1\342\1\0\16\u0133\1\0\1\343"+
    "\2\0\1\u0134\1\245\2\343\1\u0135\1\u0136\1\u0137\11\343"+
    "\1\245\1\344\2\246\1\u0138\1\246\1\344\1\u0139\1\u013a"+
    "\1\u013b\1\u013c\11\344\6\246\1\u013d\1\345\15\246\1\250"+
    "\4\246\1\53\1\346\2\250\1\246\11\250\1\246\5\252"+
    "\1\57\1\347\1\246\3\252\1\246\10\252\5\254\1\63"+
    "\1\350\6\254\1\246\6\254\1\256\4\246\1\75\1\351"+
    "\7\256\1\246\4\256\1\246\1\261\4\246\1\105\1\352"+
    "\2\261\1\246\11\261\1\246\1\263\4\246\1\115\1\353"+
    "\7\263\1\246\4\263\1\246\1\265\4\246\1\120\1\354"+
    "\2\265\2\246\6\265\1\246\1\265\1\246\5\267\1\133"+
    "\1\355\7\267\1\246\2\267\2\246\1\267\5\271\1\140"+
    "\1\356\5\271\1\246\5\271\1\246\1\271\1\273\4\246"+
    "\1\143\1\357\2\273\1\246\3\273\2\246\4\273\1\246"+
    "\1\275\4\246\1\150\1\360\6\275\2\246\4\275\1\246"+
    "\1\162\4\362\16\162\1\362\1\245\2\277\2\364\11\245"+
    "\1\u013e\4\245\1\364\1\301\2\363\2\u013f\11\301\1\365"+
    "\4\301\1\u013f\1\246\4\366\1\246\1\345\7\246\1\u0140"+
    "\4\246\1\366\1\302\4\366\1\162\1\367\7\302\1\370"+
    "\4\302\1\366\1\302\4\u0141\1\302\1\367\7\302\1\370"+
    "\4\302\1\u0141\7\371\1\372\14\371\1\0\4\u0142\11\0"+
    "\1\u0143\4\0\1\u0142\1\164\4\373\2\164\1\304\13\164"+
    "\1\373\1\0\4\374\11\0\1\u0144\4\0\1\374\1\162"+
    "\4\u0145\2\162\1\164\6\162\1\300\4\162\1\u0145\10\377"+
    "\1\u0100\13\377\1\0\4\u0146\11\0\1\u0147\4\0\1\u0146"+
    "\1\165\4\u0101\3\165\1\307\12\165\1\u0101\1\0\4\u0102"+
    "\11\0\1\u0148\4\0\1\u0102\1\162\4\u0149\3\162\1\165"+
    "\5\162\1\300\4\162\1\u0149\7\u0105\1\u014a\14\u0105\10\u0106"+
    "\1\u014a\13\u0106\3\u0105\1\u0107\3\u0105\1\u014b\1\u014c\1\u0109"+
    "\12\u0105\1\u0108\2\u014c\1\u014d\1\u014c\4\u0108\1\u014e\11\u0108"+
    "\1\u014c\1\u014f\2\u0105\1\u0109\1\u0105\2\u014f\1\u010c\13\u014f"+
    "\1\u0105\3\u0106\1\u010a\3\u0106\1\u014c\1\u0150\1\u010b\12\u0106"+
    "\1\u0151\2\u0106\1\u010b\1\u0106\3\u0151\1\u010c\12\u0151\1\u0106"+
    "\1\u010c\4\0\16\u010c\1\0\1\245\2\0\1\u010d\3\245"+
    "\1\u0152\1\u0153\1\u0110\12\245\1\u010e\2\u0105\1\u0154\1\u0152"+
    "\3\u010e\1\u0155\1\u0156\11\u010e\1\u0152\1\u010f\2\u0106\1\u0157"+
    "\1\u0153\2\u010f\1\u0155\1\u010f\1\u0158\11\u010f\1\u0153\1\u0159"+
    "\2\0\1\u0110\1\245\16\u0159\1\245\3\246\1\u0111\2\246"+
    "\1\345\1\u015a\1\u015b\1\u0115\12\246\1\316\2\246\1\u0111"+
    "\1\246\1\173\1\u0112\1\u0113\1\u0114\1\u0115\11\316\1\246"+
    "\1\u0113\2\u015a\1\u015c\1\u015a\1\u0113\1\u015d\1\u0113\1\u015e"+
    "\1\u015f\11\u0113\1\u015a\1\u0114\2\u015b\1\u0160\1\u015b\1\u0114"+
    "\1\u0161\1\u015e\1\u0114\1\u0162\11\u0114\1\u015b\1\u0163\2\246"+
    "\1\u0115\1\246\1\u0163\1\u0164\14\u0163\1\246\1\203\4\u0116"+
    "\16\203\1\u0116\1\245\2\317\2\u0118\11\245\1\u0165\4\245"+
    "\1\u0118\1\321\2\u0117\2\u0166\11\321\1\u0119\4\321\1\u0166"+
    "\1\246\4\u011a\1\246\1\345\7\246\1\u0167\4\246\1\u011a"+
    "\1\322\4\u011a\1\203\1\u011b\7\322\1\u011c\4\322\1\u011a"+
    "\1\322\4\u0168\1\322\1\u011b\7\322\1\u011c\4\322\1\u0168"+
    "\7\u011d\1\u011e\14\u011d\1\0\4\u0169\11\0\1\u016a\4\0"+
    "\1\u0169\1\205\4\u011f\2\205\1\324\13\205\1\u011f\1\0"+
    "\4\u0120\11\0\1\u016b\4\0\1\u0120\1\203\4\u016c\2\203"+
    "\1\205\6\203\1\320\4\203\1\u016c\10\u0123\1\u0124\13\u0123"+
    "\1\0\4\u016d\11\0\1\u016e\4\0\1\u016d\1\206\4\u0125"+
    "\3\206\1\327\12\206\1\u0125\1\0\4\u0126\11\0\1\u016f"+
    "\4\0\1\u0126\1\203\4\u0170\3\203\1\206\5\203\1\320"+
    "\4\203\1\u0170\1\332\4\246\1\207\1\u0129\2\332\1\246"+
    "\7\332\1\246\1\332\1\246\5\334\1\221\1\u012a\7\334"+
    "\1\246\2\334\2\246\1\334\1\336\4\246\1\234\1\u012b"+
    "\14\336\1\246\7\u012c\1\u0171\14\u012c\10\u012d\1\u0171\13\u012d"+
    "\3\u012c\1\u012e\3\u012c\1\u0172\1\u0173\1\u0130\12\u012c\1\u012f"+
    "\2\u0173\1\u0174\1\u0173\4\u012f\1\u0175\11\u012f\1\u0173\1\u0176"+
    "\2\u012c\1\u0130\1\u012c\2\u0176\1\u0133\13\u0176\1\u012c\3\u012d"+
    "\1\u0131\3\u012d\1\u0173\1\u0177\1\u0132\12\u012d\1\u0178\2\u012d"+
    "\1\u0132\1\u012d\3\u0178\1\u0133\12\u0178\1\u012d\1\u0133\4\0"+
    "\16\u0133\1\0\1\245\2\0\1\u0134\3\245\1\u0179\1\u017a"+
    "\1\u0137\12\245\1\u0135\2\u012c\1\u017b\1\u0179\3\u0135\1\u017c"+
    "\1\u017d\11\u0135\1\u0179\1\u0136\2\u012d\1\u017e\1\u017a\2\u0136"+
    "\1\u017c\1\u0136\1\u017f\11\u0136\1\u017a\1\u0180\2\0\1\u0137"+
    "\1\245\16\u0180\1\245\3\246\1\u0138\2\246\1\345\1\u0181"+
    "\1\u0182\1\u013c\12\246\1\344\2\246\1\u0138\1\246\1\243"+
    "\1\u0139\1\u013a\1\u013b\1\u013c\11\344\1\246\1\u013a\2\u0181"+
    "\1\u0183\1\u0181\1\u013a\1\u0184\1\u013a\1\u0185\1\u0186\11\u013a"+
    "\1\u0181\1\u013b\2\u0182\1\u0187\1\u0182\1\u013b\1\u0188\1\u0185"+
    "\1\u013b\1\u0189\11\u013b\1\u0182\1\u018a\2\246\1\u013c\1\246"+
    "\1\u018a\1\u018b\14\u018a\1\246\1\301\2\362\2\u013e\16\301"+
    "\1\u013e\1\302\4\u0140\1\302\1\367\14\302\1\u0140\1\0"+
    "\4\u0143\2\0\1\371\13\0\1\u0143\1\162\4\u0144\2\162"+
    "\1\164\13\162\1\u0144\1\0\4\u0147\3\0\1\377\12\0"+
    "\1\u0147\1\162\4\u0148\3\162\1\165\12\162\1\u0148\7\u014c"+
    "\1\u0150\1\u014b\16\u014c\1\u014d\3\u014c\2\u018c\1\u014e\12\u014c"+
    "\1\u018d\2\u014c\1\u014e\1\u014c\2\u018d\1\u0151\1\u014f\12\u018d"+
    "\1\u014c\1\u014f\4\u0105\2\u014f\1\u010c\13\u014f\1\u0105\1\u0151"+
    "\4\u0106\3\u0151\1\u010c\12\u0151\1\u0106\1\u0152\2\u0105\4\u0152"+
    "\1\u018e\14\u0152\1\u0153\2\u0106\5\u0153\1\u018e\13\u0153\1\u0152"+
    "\2\u0105\1\u0154\3\u0152\1\u018f\1\u0190\1\u0156\12\u0152\1\u0155"+
    "\2\u014c\1\u0191\1\u0190\4\u0155\1\u0192\11\u0155\1\u0190\1\u0193"+
    "\2\u0105\1\u0156\1\u0152\2\u0193\1\u0159\13\u0193\1\u0152\1\u0153"+
    "\2\u0106\1\u0157\3\u0153\1\u0190\1\u0194\1\u0158\12\u0153\1\u0195"+
    "\2\u0106\1\u0158\1\u0153\3\u0195\1\u0159\12\u0195\1\u0153\1\u0159"+
    "\2\0\2\245\16\u0159\1\245\6\u015a\1\u0196\1\u0197\14\u015a"+
    "\6\u015b\1\u0198\1\u015b\1\u0197\13\u015b\3\u015a\1\u015c\2\u015a"+
    "\1\u0196\1\u0199\1\u019a\1\u015f\12\u015a\1\u0113\2\u015a\1\u015c"+
    "\1\u015a\1\312\1\u015d\1\u0113\1\u015e\1\u015f\11\u0113\1\u015a"+
    "\1\u015e\2\u019a\1\u019b\1\u019a\1\u015e\1\u019c\2\u015e\1\u019d"+
    "\11\u015e\1\u019a\1\u019e\2\u015a\1\u015f\1\u015a\1\u019e\1\u019f"+
    "\1\u0163\13\u019e\1\u015a\3\u015b\1\u0160\2\u015b\1\u0198\1\u019a"+
    "\1\u01a0\1\u0162\12\u015b\1\u0114\2\u015b\1\u0160\1\u015b\1\313"+
    "\1\u0161\1\u015e\1\u0114\1\u0162\11\u0114\1\u015b\1\u01a1\2\u015b"+
    "\1\u0162\1\u015b\1\u01a1\1\u01a2\1\u01a1\1\u0163\12\u01a1\1\u015b"+
    "\1\u0163\4\246\1\u0163\1\u0164\14\u0163\1\246\1\u0163\4\246"+
    "\1\u010c\1\u0164\14\u0163\1\246\1\321\2\u0116\2\u0165\16\321"+
    "\1\u0165\1\322\4\u0167\1\322\1\u011b\14\322\1\u0167\1\0"+
    "\4\u016a\2\0\1\u011d\13\0\1\u016a\1\203\4\u016b\2\203"+
    "\1\205\13\203\1\u016b\1\0\4\u016e\3\0\1\u0123\12\0"+
    "\1\u016e\1\203\4\u016f\3\203\1\206\12\203\1\u016f\7\u0173"+
    "\1\u0177\1\u0172\16\u0173\1\u0174\3\u0173\2\u01a3\1\u0175\12\u0173"+
    "\1\u01a4\2\u0173\1\u0175\1\u0173\2\u01a4\1\u0178\1\u0176\12\u01a4"+
    "\1\u0173\1\u0176\4\u012c\2\u0176\1\u0133\13\u0176\1\u012c\1\u0178"+
    "\4\u012d\3\u0178\1\u0133\12\u0178\1\u012d\1\u0179\2\u012c\4\u0179"+
    "\1\u01a5\14\u0179\1\u017a\2\u012d\5\u017a\1\u01a5\13\u017a\1\u0179"+
    "\2\u012c\1\u017b\3\u0179\1\u01a6\1\u01a7\1\u017d\12\u0179\1\u017c"+
    "\2\u0173\1\u01a8\1\u01a7\4\u017c\1\u01a9\11\u017c\1\u01a7\1\u01aa"+
    "\2\u012c\1\u017d\1\u0179\2\u01aa\1\u0180\13\u01aa\1\u0179\1\u017a"+
    "\2\u012d\1\u017e\3\u017a\1\u01a7\1\u01ab\1\u017f\12\u017a\1\u01ac"+
    "\2\u012d\1\u017f\1\u017a\3\u01ac\1\u0180\12\u01ac\1\u017a\1\u0180"+
    "\2\0\2\245\16\u0180\1\245\6\u0181\1\u01ad\1\u01ae\14\u0181"+
    "\6\u0182\1\u01af\1\u0182\1\u01ae\13\u0182\3\u0181\1\u0183\2\u0181"+
    "\1\u01ad\1\u01b0\1\u01b1\1\u0186\12\u0181\1\u013a\2\u0181\1\u0183"+
    "\1\u0181\1\340\1\u0184\1\u013a\1\u0185\1\u0186\11\u013a\1\u0181"+
    "\1\u0185\2\u01b1\1\u01b2\1\u01b1\1\u0185\1\u01b3\2\u0185\1\u01b4"+
    "\11\u0185\1\u01b1\1\u01b5\2\u0181\1\u0186\1\u0181\1\u01b5\1\u01b6"+
    "\1\u018a\13\u01b5\1\u0181\3\u0182\1\u0187\2\u0182\1\u01af\1\u01b1"+
    "\1\u01b7\1\u0189\12\u0182\1\u013b\2\u0182\1\u0187\1\u0182\1\341"+
    "\1\u0188\1\u0185\1\u013b\1\u0189\11\u013b\1\u0182\1\u01b8\2\u0182"+
    "\1\u0189\1\u0182\1\u01b8\1\u01b9\1\u01b8\1\u018a\12\u01b8\1\u0182"+
    "\1\u018a\4\246\1\u018a\1\u018b\14\u018a\1\246\1\u018a\4\246"+
    "\1\u0133\1\u018b\14\u018a\1\246\1\u018d\4\u014c\2\u018d\1\u0151"+
    "\1\u014f\12\u018d\1\u014c\1\u0190\2\u014c\4\u0190\1\u0194\1\u018f"+
    "\14\u0190\2\u014c\1\u0191\3\u0190\2\u01ba\1\u0192\12\u0190\1\u01bb"+
    "\2\u014c\1\u0192\1\u0190\2\u01bb\1\u0195\1\u0193\12\u01bb\1\u0190"+
    "\1\u0193\2\u0105\2\u0152\2\u0193\1\u0159\13\u0193\1\u0152\1\u0195"+
    "\2\u0106\2\u0153\3\u0195\1\u0159\12\u0195\1\u0153\5\u015a\1\u01bc"+
    "\1\u0196\1\u0197\14\u015a\5\u015b\1\u01bd\1\u0198\1\u015b\1\u0197"+
    "\13\u015b\6\u019a\1\u01be\1\u01a0\1\u0199\16\u019a\1\u019b\2\u019a"+
    "\1\u01be\2\u01bf\1\u019d\12\u019a\1\u015e\2\u019a\1\u019b\1\u019a"+
    "\1\u0108\1\u019c\2\u015e\1\u019d\11\u015e\1\u019a\1\u01c0\2\u019a"+
    "\1\u019d\1\u019a\1\u01c0\1\u01c1\1\u01a1\1\u019e\12\u01c0\1\u019a"+
    "\1\u019e\4\u015a\1\u019e\1\u019f\1\u0163\13\u019e\1\u015a\1\u019e"+
    "\4\u015a\1\u014f\1\u019f\1\u0163\13\u019e\1\u015a\1\u01a1\4\u015b"+
    "\1\u01a1\1\u01a2\1\u01a1\1\u0163\12\u01a1\1\u015b\1\u01a1\4\u015b"+
    "\1\u0151\1\u01a2\1\u01a1\1\u0163\12\u01a1\1\u015b\1\u01a4\4\u0173"+
    "\2\u01a4\1\u0178\1\u0176\12\u01a4\1\u0173\1\u01a7\2\u0173\4\u01a7"+
    "\1\u01ab\1\u01a6\14\u01a7\2\u0173\1\u01a8\3\u01a7\2\u01c2\1\u01a9"+
    "\12\u01a7\1\u01c3\2\u0173\1\u01a9\1\u01a7\2\u01c3\1\u01ac\1\u01aa"+
    "\12\u01c3\1\u01a7\1\u01aa\2\u012c\2\u0179\2\u01aa\1\u0180\13\u01aa"+
    "\1\u0179\1\u01ac\2\u012d\2\u017a\3\u01ac\1\u0180\12\u01ac\1\u017a"+
    "\5\u0181\1\u01c4\1\u01ad\1\u01ae\14\u0181\5\u0182\1\u01c5\1\u01af"+
    "\1\u0182\1\u01ae\13\u0182\6\u01b1\1\u01c6\1\u01b7\1\u01b0\16\u01b1"+
    "\1\u01b2\2\u01b1\1\u01c6\2\u01c7\1\u01b4\12\u01b1\1\u0185\2\u01b1"+
    "\1\u01b2\1\u01b1\1\u012f\1\u01b3\2\u0185\1\u01b4\11\u0185\1\u01b1"+
    "\1\u01c8\2\u01b1\1\u01b4\1\u01b1\1\u01c8\1\u01c9\1\u01b8\1\u01b5"+
    "\12\u01c8\1\u01b1\1\u01b5\4\u0181\1\u01b5\1\u01b6\1\u018a\13\u01b5"+
    "\1\u0181\1\u01b5\4\u0181\1\u0176\1\u01b6\1\u018a\13\u01b5\1\u0181"+
    "\1\u01b8\4\u0182\1\u01b8\1\u01b9\1\u01b8\1\u018a\12\u01b8\1\u0182"+
    "\1\u01b8\4\u0182\1\u0178\1\u01b9\1\u01b8\1\u018a\12\u01b8\1\u0182"+
    "\1\u01bb\2\u014c\2\u0190\2\u01bb\1\u0195\1\u0193\12\u01bb\1\u0190"+
    "\5\u019a\1\u01ca\1\u01be\1\u01a0\1\u0199\13\u019a\1\u01c0\4\u019a"+
    "\1\u01c0\1\u01c1\1\u01a1\1\u019e\12\u01c0\1\u019a\1\u01c0\4\u019a"+
    "\1\u018d\1\u01c1\1\u01a1\1\u019e\12\u01c0\1\u019a\1\u01c3\2\u0173"+
    "\2\u01a7\2\u01c3\1\u01ac\1\u01aa\12\u01c3\1\u01a7\5\u01b1\1\u01cb"+
    "\1\u01c6\1\u01b7\1\u01b0\13\u01b1\1\u01c8\4\u01b1\1\u01c8\1\u01c9"+
    "\1\u01b8\1\u01b5\12\u01c8\1\u01b1\1\u01c8\4\u01b1\1\u01a4\1\u01c9"+
    "\1\u01b8\1\u01b5\12\u01c8\1\u01b1";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6820];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\41\0\1\11\1\1\2\11\1\1\4\11\2\1\2\11"+
    "\2\1\2\11\2\1\2\11\4\1\1\11\1\0\6\1"+
    "\1\11\1\0\6\1\1\11\1\0\2\1\1\11\2\1"+
    "\1\11\4\1\3\11\1\0\2\1\3\11\2\1\1\11"+
    "\2\1\3\11\3\1\1\11\4\1\1\0\1\11\10\1"+
    "\1\0\6\1\1\0\1\11\6\1\1\11\4\1\2\11"+
    "\1\0\2\1\3\11\4\1\1\0\1\11\6\1\1\0"+
    "\3\1\1\0\10\1\1\11\16\1\2\0\3\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\0\2\1\1\0"+
    "\3\1\1\0\2\1\1\0\10\1\1\0\2\1\1\0"+
    "\2\1\1\0\13\1\1\11\2\0\2\1\1\0\2\1"+
    "\1\0\1\1\2\0\1\1\2\0\1\1\2\0\1\1"+
    "\4\0\1\1\3\0\5\1\1\0\3\1\3\0\2\1"+
    "\1\0\2\1\1\0\1\1\2\0\1\1\2\0\1\1"+
    "\2\0\1\1\1\0\3\1\3\0\1\1\3\0\5\1"+
    "\1\0\3\1\1\0\1\11\2\1\12\0\1\11\1\1"+
    "\3\0\13\1\3\0\2\1\2\0\1\1\1\0\4\1"+
    "\12\0\1\11\1\1\3\0\13\1\3\0\2\1\2\0"+
    "\1\1\1\0\14\1\1\0\1\1\1\0\1\1\2\0"+
    "\1\1\1\0\17\1\1\0\1\1\1\0\1\1\2\0"+
    "\1\1\1\0\11\1\1\0\7\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[459];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CndLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 59: break;
          case 2: 
            { yybegin(YYINITIAL); return CndTypes.CRLF;
            } 
            // fall through
          case 60: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 61: break;
          case 4: 
            { yybegin(NS); return CndTypes.NS_START;
            } 
            // fall through
          case 62: break;
          case 5: 
            { yybegin(NT); return CndTypes.NT_START;
            } 
            // fall through
          case 63: break;
          case 6: 
            { yybegin(PROP); return CndTypes.PROP_START;
            } 
            // fall through
          case 64: break;
          case 7: 
            { yybegin(SUB); return CndTypes.SUB_START;
            } 
            // fall through
          case 65: break;
          case 8: 
            { yybegin(NS_SEP); return CndTypes.NS_NAME;
            } 
            // fall through
          case 66: break;
          case 9: 
            { yybegin(NS_URI); return CndTypes.NS_URI_QUOTE;
            } 
            // fall through
          case 67: break;
          case 10: 
            { return CndTypes.NS_EQUAL;
            } 
            // fall through
          case 68: break;
          case 11: 
            { return CndTypes.NS_URI;
            } 
            // fall through
          case 69: break;
          case 12: 
            { return CndTypes.NS_URI_QUOTE;
            } 
            // fall through
          case 70: break;
          case 13: 
            { yybegin(YYINITIAL); return CndTypes.NS_END;
            } 
            // fall through
          case 71: break;
          case 14: 
            { return CndTypes.NT_NAME;
            } 
            // fall through
          case 72: break;
          case 15: 
            { yybegin(NT_AFTER); return CndTypes.NT_END;
            } 
            // fall through
          case 73: break;
          case 16: 
            { yybegin(OPT); yypushback(1); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 74: break;
          case 17: 
            { yybegin(ST); return CndTypes.ST_START;
            } 
            // fall through
          case 75: break;
          case 18: 
            { yybegin(ST_AFTER); return CndTypes.ST_NAME;
            } 
            // fall through
          case 76: break;
          case 19: 
            { yybegin(ST); return CndTypes.ST_SEP;
            } 
            // fall through
          case 77: break;
          case 20: 
            { return CndTypes.OPT;
            } 
            // fall through
          case 78: break;
          case 21: 
            { yybegin(OPT_VALUE); return CndTypes.OPT_EQUAL;
            } 
            // fall through
          case 79: break;
          case 22: 
            { yybegin(OPT_VALUE_AFTER); return CndTypes.OPT_VALUE;
            } 
            // fall through
          case 80: break;
          case 23: 
            { yybegin(OPT_VALUE); return CndTypes.OPT_VALUE_SEP;
            } 
            // fall through
          case 81: break;
          case 24: 
            { yybegin(PROP_AFTER); return CndTypes.PROP_NAME;
            } 
            // fall through
          case 82: break;
          case 25: 
            { yybegin(PROP_ATTR); yypushback(1); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 83: break;
          case 26: 
            { yybegin(PROP_DEFAULT); yypushback(1); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 84: break;
          case 27: 
            { yybegin(PROP_CONST); yypushback(1); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 85: break;
          case 28: 
            { yybegin(PROP_TYPE); yypushback(1); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 86: break;
          case 29: 
            { return CndTypes.PROP_TYPE;
            } 
            // fall through
          case 87: break;
          case 30: 
            { yybegin(PROP_TYPE_MASK); return CndTypes.PROP_TYPE_MASK_START;
            } 
            // fall through
          case 88: break;
          case 31: 
            { return CndTypes.PROP_TYPE_START;
            } 
            // fall through
          case 89: break;
          case 32: 
            { yybegin(PROP_TYPE_AFTER); return CndTypes.PROP_TYPE_END;
            } 
            // fall through
          case 90: break;
          case 33: 
            { return CndTypes.PROP_TYPE_MASK;
            } 
            // fall through
          case 91: break;
          case 34: 
            { yybegin(PROP_TYPE_MASK_OPT); return CndTypes.PROP_TYPE_MASK_OPTS_START;
            } 
            // fall through
          case 92: break;
          case 35: 
            { return CndTypes.PROP_TYPE_MASK_OPT;
            } 
            // fall through
          case 93: break;
          case 36: 
            { yybegin(PROP_TYPE_MASK_OPT_VALUE); return CndTypes.PROP_TYPE_MASK_OPT_EQUAL;
            } 
            // fall through
          case 94: break;
          case 37: 
            { yybegin(PROP_TYPE_MASK_OPT_AFTER); return CndTypes.PROP_TYPE_MASK_OPTS_END;
            } 
            // fall through
          case 95: break;
          case 38: 
            { return CndTypes.PROP_TYPE_MASK_OPT_SEP;
            } 
            // fall through
          case 96: break;
          case 39: 
            { return CndTypes.PROP_TYPE_MASK_OPT_VALUE;
            } 
            // fall through
          case 97: break;
          case 40: 
            { yybegin(PROP_TYPE_MASK_OPT); return CndTypes.PROP_TYPE_MASK_OPT_SEP;
            } 
            // fall through
          case 98: break;
          case 41: 
            { yybegin(PROP_DEFAULT_VALUE); return CndTypes.PROP_DEFAULT_EQUAL;
            } 
            // fall through
          case 99: break;
          case 42: 
            { yybegin(PROP_DEFAULT_VALUE_AFTER); return CndTypes.PROP_DEFAULT;
            } 
            // fall through
          case 100: break;
          case 43: 
            { return CndTypes.PROP_ATTR;
            } 
            // fall through
          case 101: break;
          case 44: 
            { yybegin(PROP_CONST_VALUE); return CndTypes.PROP_CONST_START;
            } 
            // fall through
          case 102: break;
          case 45: 
            { return CndTypes.PROP_CONST;
            } 
            // fall through
          case 103: break;
          case 46: 
            { yybegin(SUB_AFTER); return CndTypes.SUB_NAME;
            } 
            // fall through
          case 104: break;
          case 47: 
            { yybegin(SUB_ATTR); yypushback(1); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 105: break;
          case 48: 
            { yybegin(SUB_DEFAULT); yypushback(1); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 106: break;
          case 49: 
            { yybegin(SUB_TYPE); yypushback(1); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 107: break;
          case 50: 
            { return CndTypes.SUB_TYPE;
            } 
            // fall through
          case 108: break;
          case 51: 
            { return CndTypes.SUB_TYPE_SEP;
            } 
            // fall through
          case 109: break;
          case 52: 
            { return CndTypes.SUB_TYPES_START;
            } 
            // fall through
          case 110: break;
          case 53: 
            { yybegin(SUB_TYPE_AFTER); return CndTypes.SUB_TYPES_END;
            } 
            // fall through
          case 111: break;
          case 54: 
            { yybegin(SUB_DEFAULT_VALUE); return CndTypes.SUB_DEFAULT_EQUAL;
            } 
            // fall through
          case 112: break;
          case 55: 
            { yybegin(SUB_DEFAULT_VALUE_AFTER); return CndTypes.SUB_DEFAULT;
            } 
            // fall through
          case 113: break;
          case 56: 
            { return CndTypes.SUB_ATTR;
            } 
            // fall through
          case 114: break;
          case 57: 
            { return CndTypes.COMMENT;
            } 
            // fall through
          case 115: break;
          case 58: 
            { yypushback(1); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 116: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
