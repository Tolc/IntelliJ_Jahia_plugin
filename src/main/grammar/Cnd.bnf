/**
 * JahiaCndReader. Parses node type definitions written in the compact
 * node type definition format and returns a list of JahiaNodeTypeDef objects that
 * can then be used to register node types.
 * <p/>
 * The EBNF grammar of the compact node type definition:<br>
 * <pre>
 * cnd ::= ns_mapping* node_type_def+
 *
 * ns_mapping ::= "&lt;" prefix "=" namespace "&gt;"
 *
 * prefix ::= string
 *
 * namespace ::= string
 *
 * node_type_def ::= node_type_name [super_types] [options] {property_def | node_def}
 *
 * node_type_name ::= "[" string "]"
 *
 * super_types ::= "&gt;" string_list
 *
 * options ::= orderable_opt | mixin_opt | orderable_opt mixin_opt | mixin_opt orderable_opt
 *
 * orderable_opt ::= "orderable" | "ord" | "o"
 *
 * mixin_opt ::= "mixin" | "mix" | "m"
 *
 * property_def ::= "-" property_name [property_type_decl] [default_values] [attributes] [value_constraints]
 *
 * property_name ::= string
 *
 * property_type_decl ::= "(" property_type ")"
 *
 * property_type ::= "STRING" | "String |"string" |
 *                   "BINARY" | "Binary" | "binary" |
 *                   "LONG" | "Long" | "long" |
 *                   "DOUBLE" | "Double" | "double" |
 *                   "BOOLEAN" | "Boolean" | "boolean" |
 *                   "DATE" | "Date" | "date" |
 *                   "NAME | "Name | "name |
 *                   "PATH" | "Path" | "path" |
 *                   "REFERENCE" | "Reference" | "reference" |
 *                   "UNDEFINED" | "Undefined" | "undefined" | "*"
 *
 *
 * default_values ::= "=" string_list
 *
 * value_constraints ::= "&lt;" string_list
 *
 * node_def ::= "+" node_name [required_types] [default_type] [attributes]
 *
 * node_name ::= string
 *
 * required_types ::= "(" string_list ")"
 *
 * default_type ::= "=" string
 *
 * attributes ::= "primary" | "pri" | "!" |
 *                "autocreated" | "aut" | "a" |
 *                "mandatory" | "man" | "m" |
 *                "protected" | "pro" | "p" |
 *                "multiple" | "mul" | "*" |
 *                "COPY" | "Copy" | "copy" |
 *                "VERSION" | "Version" | "version" |
 *                "INITIALIZE" | "Initialize" | "initialize" |
 *                "COMPUTE" | "Compute" | "compute" |
 *                "IGNORE" | "Ignore" | "ignore" |
 *                "ABORT" | "Abort" | "abort"
 *
 * string_list ::= string {"," string}
 *
 * string ::= quoted_string | unquoted_string
 *
 * quoted_string :: = "'" unquoted_string "'"
 *
 * unquoted_string ::= [A-Za-z0-9:_]+
 * </pre>
 */
{
  parserClass="fr.tolc.jahia.language.cnd.CndParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Cnd"
  psiImplClassSuffix="Impl"
  psiPackage="fr.tolc.jahia.language.cnd.psi"
  psiImplPackage="fr.tolc.jahia.language.cnd.psi.impl"

  elementTypeHolderClass="fr.tolc.jahia.language.cnd.psi.CndTypes"
  elementTypeClass="fr.tolc.jahia.language.cnd.psi.CndElementType"
  tokenTypeClass="fr.tolc.jahia.language.cnd.psi.CndTokenType"
}

cndFile ::= item_*
private item_ ::= (COMMENT|CRLF|namespace|nodetype)


namespace ::= NS_START namespaceIdentifier? NS_EQUAL? (NS_URI_QUOTE NS_URI? NS_URI_QUOTE)? NS_END {
  mixin="fr.tolc.jahia.language.cnd.psi.mixins.CndNamespaceMixin"
  implements="fr.tolc.jahia.language.cnd.psi.interfaces.CndNamespaceInterface"
}
namespaceIdentifier ::= NS_NAME {
  mixin="fr.tolc.jahia.language.cnd.psi.mixins.CndNamespaceIdentifierMixin"
  implements="fr.tolc.jahia.language.cnd.psi.interfaces.CndNamespaceIdentifierInterface"
}


nodetype ::= NT_START nodetypeIdentifier? NT_END [supertypes_] option* subitem_* {
  mixin="fr.tolc.jahia.language.cnd.psi.mixins.CndNodetypeMixin"
  implements="fr.tolc.jahia.language.cnd.psi.interfaces.CndNodetypeInterface"
}
nodetypeIdentifier ::= NT_NAME {
  mixin="fr.tolc.jahia.language.cnd.psi.mixins.CndNodetypeIdentifierMixin"
  implements="fr.tolc.jahia.language.cnd.psi.interfaces.CndNodetypeIdentifierInterface"
}

private supertypes_ ::= ST_START supertype? (ST_SEP supertype?)*
supertype ::= ST_NAME {
  mixin="fr.tolc.jahia.language.cnd.psi.mixins.CndSupertypeMixin"
}

option ::= option_name [OPT_EQUAL option_values_] {
  mixin="fr.tolc.jahia.language.cnd.psi.mixins.CndOptionMixin"
  implements="fr.tolc.jahia.language.cnd.psi.interfaces.CndOptionInterface"
}
option_name ::= OPT {
  mixin="fr.tolc.jahia.language.cnd.psi.mixins.CndOptionNameMixin"
  implements="fr.tolc.jahia.language.cnd.psi.interfaces.CndOptionNameInterface"
}
private option_values_ ::= option_value? (OPT_VALUE_SEP option_value?)*
option_value ::= OPT_VALUE {
  mixin="fr.tolc.jahia.language.cnd.psi.mixins.CndOptionValueMixin"
  implements="fr.tolc.jahia.language.cnd.psi.interfaces.CndOptionValueInterface"
}

private subitem_ ::= CRLF+ (property|subnode)


property ::= PROP_START property_name? [prop_type_] [prop_default_] property_attribute* [prop_constraint_] {
  mixin="fr.tolc.jahia.language.cnd.psi.mixins.CndPropertyMixin"
  implements="fr.tolc.jahia.language.cnd.psi.interfaces.CndPropertyInterface"
}
property_name ::= PROP_NAME {
  mixin="fr.tolc.jahia.language.cnd.psi.mixins.CndPropertyNameMixin"
  implements="fr.tolc.jahia.language.cnd.psi.interfaces.CndPropertyNameInterface"
}

private prop_type_ ::= PROP_TYPE_START property_type? [prop_type_mask_] PROP_TYPE_END
property_type ::= PROP_TYPE
private prop_type_mask_ ::= PROP_TYPE_MASK_START property_type_mask [prop_type_mask_options_]
property_type_mask ::= PROP_TYPE_MASK
private prop_type_mask_options_ ::= PROP_TYPE_MASK_OPTS_START property_type_mask_option (PROP_TYPE_MASK_OPT_SEP property_type_mask_option)* PROP_TYPE_MASK_OPTS_END
property_type_mask_option ::= property_type_mask_option_name [PROP_TYPE_MASK_OPT_EQUAL property_type_mask_option_value]
property_type_mask_option_name ::= PROP_TYPE_MASK_OPT
property_type_mask_option_value ::= PROP_TYPE_MASK_OPT_VALUE

private prop_default_ ::= PROP_DEFAULT_EQUAL property_default?
property_default ::=  PROP_DEFAULT

property_attribute ::= PROP_ATTR

private prop_constraint_ ::= PROP_CONST_START property_constraint?
property_constraint ::= PROP_CONST


subnode ::= SUB_START subnode_name? [subnode_types_] [subnode_default_] subnode_attribute* {
  mixin="fr.tolc.jahia.language.cnd.psi.mixins.CndSubnodeMixin"
  implements="fr.tolc.jahia.language.cnd.psi.interfaces.CndSubnodeInterface"
}
subnode_name ::= SUB_NAME {
  mixin="fr.tolc.jahia.language.cnd.psi.mixins.CndSubnodeNameMixin"
  implements="fr.tolc.jahia.language.cnd.psi.interfaces.CndSubnodeNameInterface"
}

private subnode_types_ ::= SUB_TYPES_START subnode_type? (SUB_TYPE_SEP subnode_type?)* SUB_TYPES_END
subnode_type ::= SUB_TYPE {
  mixin="fr.tolc.jahia.language.cnd.psi.mixins.CndSubnodeTypeMixin"
}

private subnode_default_ ::= SUB_DEFAULT_EQUAL subnode_default?
subnode_default ::= SUB_DEFAULT {
  mixin="fr.tolc.jahia.language.cnd.psi.mixins.CndSubnodeDefaultMixin"
}

subnode_attribute ::= SUB_ATTR
